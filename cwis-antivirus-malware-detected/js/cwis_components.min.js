if(!window.cwis) {
  cwis = { components: {} }
}

cwis.components['ui-form-generic'] = ({
  template: '{{ > ui_form_generic }}',
});

cwis.components['ui-action'] = ({
    template: `<div class="btn-group">
      <button on-click="action" class="{{className}} pe-4">{{label}}</button>
        {{#if is_buttons==null || is_buttons}}
          <ul class="dropdown-menu dropdown-menu-r">
    
            {{#if mode=='explorer'}}
            {{#each actions.files}}
                {{#if btn_json == undefined || 
                (JSON.parse(decodeURI(btn_json))[name] != undefined && JSON.parse(decodeURI(btn_json))[name])}}
                    <li><a class="dropdown-item cursor-pointer" on-click="run_action" >{{label}}</a></li>
                {{/if}}
            {{/each}}
            {{/if}}
    
            {{#if mode=='blacklist'}}
            {{#each actions.blacklist}}
              <li><a class="dropdown-item cursor-pointer" on-click="run_action" >{{label}}</a></li>
            {{/each}}
            {{/if}}
    
            {{#if mode=='components'}}
            {{#each actions.components}}
                {{#if btn_json == undefined || 
                (JSON.parse(decodeURI(btn_json))[name] != undefined && JSON.parse(decodeURI(btn_json))[name])}}
                    <li><a class="dropdown-item cursor-pointer" on-click="run_action" >{{label}}</a></li>
                {{/if}}
            {{/each}}
            {{/if}}
          </ul>
        {{/if}}
      </div>`,
    run_success: function() {
      Swal.fire({
        position: 'top-end',
        icon: 'success',
        title: 'Success',
        showConfirmButton: false,
        timer: 1500
      })
    },
    data: function () {
      return {
        className: 'btn btn-light-dark btn-sm m-0 p-2 dd-btn',
        actions: {
          components: [
            { label: 'Upgrade', name: 'upgrade' },
            { label: 'Enable', name: 'enable' },
            { label: 'Disable', name: 'disable' },
          ],
          files: [
            { label: 'View', name: 'view' },
            { label: 'Delete', name: 'delete' },
            { label: 'Change Permissions', name: 'permissions' },
            { label: 'Quarantine', name: 'quarantine_add' },
            { label: 'UnQuarantine', name: 'quarantine_restore' },
            { label: 'Whitelist', name: 'whitelist_add' },
            { label: 'UnWhitelist', name: 'whitelist_remove' },
            { label: 'Source Reset', name: 'archive_reset' },
            { label: 'Archive Local', name: 'archive_local' },
            { label: 'Archive Remote', name: 'archive_remote' },
          ],
          blacklist: [
            { label: 'Unblock', name: 'unblock' },
            { label: 'Block Network', name: 'block_net' },
            { label: 'Block ASN', name: 'block_asn' },
            { label: 'Block GEO', name: 'block_geo' },
          ],
        }
      }
    },
    onrender: function(ctx) {

      if(!cwis.toggle_bind) {
        window.onclick = function(event) {
          if (!event.target.matches('.dropdown-item') && !event.target.matches('.dd-btn')) {
            $('.table-action .dropdown-menu').hide();
          }
        }
        cwis.toggle_bind = true;
      }

    },
    on: {
      run_action: function(e) {

        let root;
        let action = e.get('name')

        //check if action was run before
        let runBefore = this.get('action_' + action, false)
        if (runBefore) {
          return;
        } else {
          this.set('action_' + action, true)
        }

        let mode = this.get('mode');
        let btnJson = this.get('btnJson');

        if(mode === 'blacklist') {
          //cwis.active.findComponent('cwis-tree')
          root = cwis.active.findComponent('cwis-table');
        }
        if(mode === 'explorer') {
          root = cwis.active.findComponent('cwis-table')
          //root = cwis.explorer.findComponent('cwis-table');
        }
        if(mode === 'components') {
          root = cwis.active.findComponent('cwis-table')
          //root = cwis.explorer.findComponent('cwis-table');
        }

        let items  = root.get('items');
        let row_id = this.get('row_id');
        let item   = false
        let files  = [];
        let titles  = [];
        let b_list  = [];
        let components  = [];
        let octal  = '644';

        // files / components
        if (mode === 'explorer' || mode === 'components') {
          if (row_id === 'selected' && action !== 'view') {
            let selected = root.dt.column().checkboxes.selected().toArray()
            if (selected && selected.length) {
              for (let x in items) {
                for (let y in selected) {
                  if (items[x].id === selected[y]) {
                    files.push(items[x].path + items[x].name);
                    if (items[x].title !== undefined) {
                      titles.push(items[x].title);
                      components.push(items[x].name);
                    }
                  }
                }
              }
            } else {
              this.set('action_' + action, false)
              return;
            }

            if (!files.length) {
              this.set('action_' + action, false)
              return;
            }

          } else {

            for (let x in items) {
              if (items[x].id === row_id) {
                item = items[x];
                files = [item.path + item.name];
                if (item.title !== undefined) {
                  titles = [item.title];
                  components = [item.name];
                }

                octal = item.stat ? item.stat.perm : '664';
                break;
              }
            }
            if (!item) {
              this.set('action_' + action, false)
              return;
            }

          }
        }

        //blacklist
        if (mode === 'blacklist') {
          if(row_id === 'selected' ) {
            let selected = root.dt.column().checkboxes.selected().toArray()

            if(selected && selected.length) {
              for(let x in items) {
                for(let y in selected) {
                  if(items[x].id === selected[y]) {
                    if (items[x].ip !== undefined && items[x].asn !== undefined) {
                      b_list.push(items[x]);
                    }
                  }
                }
              }
            } else {
              this.set('action_' + action, false)
              return;
            }

            if(!b_list.length) {
              this.set('action_' + action, false)
              return;
            }

          } else {

            for(let x in items) {
              if(items[x].id === row_id) {
                item = items[x];

                if (item.ip !== undefined && item.asn !== undefined) {
                  b_list = [item];
                }
                break;
              }
            }
            if(!item) {
              this.set('action_' + action, false)
              return;
            }

          }
        }

        switch(action) {

          case 'unblock':
            CwisDebug && console.log('Unblock')
            CwisDebug && console.log(b_list)
            cwis.actions.blacklist_unblock(b_list, function () {
            })
            break;

          case 'block_net':
            CwisDebug && console.log('Block net')
            CwisDebug && console.log(b_list)
            cwis.actions.blacklist_block_net(b_list, function () {
            })
            break;

          case 'block_asn':
            CwisDebug && console.log('Block asn')
            CwisDebug && console.log(b_list)
            cwis.actions.blacklist_block_asn(b_list, function () {
            })
            break;

          case 'block_geo':
            CwisDebug && console.log('Block geo')
            CwisDebug && console.log(b_list)
            cwis.actions.blacklist_block_geo(b_list, function () {
            })
            break;

          case 'upgrade':
            CwisDebug && console.log('Upgrade')
            CwisDebug && console.log(components)
            CwisDebug && console.log(titles)
            cwis.actions.component_upgrade(titles, components, function () {
            })
          break;

          case 'enable':
            CwisDebug && console.log('Enable')
            CwisDebug && console.log(components)
            CwisDebug && console.log(titles)
            cwis.actions.component_enable(titles, components, function () {
            })
          break;

          case 'disable':
            CwisDebug && console.log('Disable')
            CwisDebug && console.log(components)
            CwisDebug && console.log(titles)
            cwis.actions.component_disable(titles, components, function () {
            })
          break;

          case 'delete':
            cwis.actions.file_delete(files, function () {
            })
          break;
          case 'permissions':
            cwis.actions.file_permissions(files, octal,function () {
              root.dt.ajax.reload()
            })
          break;
          case 'view':
            cwis.actions.file_editor(row_id, function () {})
          break;
          case 'quarantine_add':
            cwis.actions.quarantine(files, [], function () {
              root.dt.ajax.reload()
              cwis.api(root.parent)
            })
          break;
          case 'quarantine_restore':
            cwis.actions.unquarantine(files, [], function () {
              root.dt.ajax.reload()
              cwis.api(root.parent)
            })
          break;
          case 'whitelist_add':
            cwis.actions.whitelist(files, [], function () {
              root.dt.ajax.reload()
              cwis.api(root.parent)
            })
          break;
          case 'whitelist_remove':
            cwis.actions.unwhitelist(files, [], function () {
              root.dt.ajax.reload()
              cwis.api(root.parent)
            })
          break;
          case 'archive_reset':
            cwis.actions.reset_remote(files, [], function () {
              root.dt.ajax.reload()
              cwis.api(root.parent)
            });
          break;
          case 'archive_local':
            cwis.actions.archive_local(files, [], function () {
              root.dt.ajax.reload()
            });
          break;
          case 'archive_remote':
            cwis.actions.archive_remote(files, [], function () {
              root.dt.ajax.reload()
            });
          break;
        }

        let that = this
        setTimeout(function () {
          that.set('action_' + action, false)
        }, 5000);

      },
      action: function(e) {
        $('.table-action .dropdown-menu').hide();
        $(".dropdown-menu", this.root.el).toggle();
      }
    }
});

cwis.components['ui-button'] = ({
    data: function () {
      return {
        className: 'btn btn-primary btn-sm m-2 p-3 fs-6 pe-4',
        //icon: 'user',
        //label: 'Test'
      }
    },
    template: '{{ > ui_button }}',
    onrender: function() {

    },
    on: {
      action: function(e) {

        var action = this.get('action');
        if(!action) {
          return;
        }

        var params = [];
        var c1  = action.indexOf('(');
        var c2 = action.indexOf(')');

        if(c1 !== -1 && c2 != -1) {

          var str = action.substr(c1 + 1, c2 - c1 - 1)
          var par = str.split(',');
          CwisDebug && console.log(action)
          CwisDebug && console.log(str)
          for(var x in par) {

            par[x] = par[x].trim();
            r = par[x];
            if(r == 'true') {
              par[x] = true;
            } else if(r == 'false') {
              par[x] = false;
            } else if(r.substr(0,1) == "'") {
              //CwisDebug && console.log('STR')
              par[x] = r.substr(1, r.length - 2)
            } else {
              par[x] = parseInt(r)
            }
          }
          action = action.substr(0, c1)
          this.parent[action](...par);
          return;
        } else {
          CwisDebug && console.log(action)
          this.parent[action]();
        }

      }
    }
});

cwis.components['ui-form-checkbox'] = ({
  template: '{{ > ui_form_checkbox }}',
});

cwis.components['ui-form-input'] = ({
  template: '{{ > ui_form_input }}',
});

cwis.components['ui-form-toggle'] = ({
  template: '{{ > ui_form_toggle }}',
  components: cwis.components,
  data: function () {
    return {
      uuid: (Math.random() + 1).toString(36).substring(3),
      val: 0
    }
  },
  render: function () {
    this._super().render()
    var that = this;
    ractive.observe( 'val', function ( newValue, oldValue, keypath ) {
      that.set('value', newValue);
    });

  }
});

cwis.components['cwis-table'] = ({
  template: `<div class="table-action table-action-selected loading" row-id="selected"></div>
  <table class="cwis-table dataTable table table-bordered" class="display" width="100%"></table>`,
  formatters: function(mode) {
    var that = this;
    switch(mode) {
      case 'components':

      var cols = {
      id: {
        width: 16,
        title: "ID",
        name: 'id',
        data: 'id',
      },
      info: {
          name: 'info',
          data: null,
          title: 'Info',
          width: 50,
          render: function( data, type, row, meta ) {
            return row.info ? cwis.icons('info', '') : '';
          }
      },
      type: {
          name: 'type',
          data: 'type',
          title: 'Type',
          width: 120,
          className: "text-start text-capitalize",
          render: function( data, type, row, meta ) {
            if(row.type) {

                return cwis.icons(data, 'bg-' + data) + data;

            } else {
              return 'N/A'
            }
          }
      },
      slug: {
          name: 'slug',
          data: 'name',
          title: 'Slug',
          width: 200,
          className: "text-start",
      },
      name: {
          name: 'name',
          data: 'title',
          title: 'Name',
          className: "text-start",
      },
      version: {
          width: 100,
          name: 'version',
          data: 'version',
          title: 'Version',
          className: "text-center",
          render: function( data, type, row, meta ) {
            return data;
          }
      },
      outdated: {
          name: 'outdated',
          data: 'outdated',
          title: 'Outdated',
          className: "text-center",
          width: 100,
          render: function( data, type, row, meta ) {
            if(row.latest_version) {
              return '<span class="text-danger">Out of Date<br><b>Latest ' + row.latest_version + '</span>'
            } else {
              return 'Up to date'
            }
            return data;
          }
      },
      vulnerabilities: {
          name: 'vulnerabilities',
          data: null,
          title: 'Vulnerabilities',
          className: "text-center",
          width: 200,
          render: function( data, type, row, meta ) {

            if(row.vulnerabilities) {
              return '<b class="text-danger">' + data + '</b><span class="text-danger"> Known Exploits<br></span>'
            } else {
              return '';
            }

          }
      },
      active: {
        name: 'active',
        width: 150,
        title: "Active",
        className: "text-end",
        data: null,
        render: function( data, type, row, meta ) {
          return row.active === false ? 'Inactive' : 'Active';
        }
      },
      actions: {
        data: null,
        width: 80,
        title: '',
        orderable: false,
        render: function( data, type, row, meta ) {
          return '<div class="table-action loading" row-id="' + row.id + '"></div>';
        }
      }
      }
      return cols;

      break;
      case 'blacklist':

      var cols = {
        first_seen: {
          width: 120,
          title: "First Seen",
          name: 'first',
          data: null,
          render: function(x, y, z) {
            return (z.ts1 ? new Date(z.ts1 * 1000).toISOString().replace("T", " ").split('.')[0] : '')
          }
        },
        last_seen: {
          width: 120,
          title: "Last Seen",
          name: 'last',
          data: null,
          render: function(x, y, z) {
            return (z.ts2 ? new Date(z.ts2 * 1000).toISOString().replace("T", " ").split('.')[0] : '')
          }
        },
        id: {
          width: 20,
          title: "ID",
          name: 'id',
          data: 'id',
        },
        geo: {
          width: 120,
          title: "Geo",
          name: 'geo',
          data: null,
          render: function(x, y, z) {
            return (z.geo ? '<i class="cf-32 cf-' + z.geo.toLowerCase() + '"></i> ' + z.geo + ' ' : '') + (z.cty ? z.cty : '')
          }
        },
        ip: {
          width: 50,
          title: "IP",
          name: 'ip',
          data: 'ip',
        },
        asn_code: {
          width: 50,
          title: "ASN ID",
          name: 'asn_id',
          data: null,
          render: function(x, y, z) {
            return z.as ? z.as : ''
          }
        },
        asn_name: {
          title: "ASN Name",
          name: 'asn_name',
          data: null,
          render: function(x, y, z) {
            return z.asn ? z.asn : ''
          }
        },
        asn_net: {
          title: "Network",
          name: 'asn_net',
          data: null,
          render: function(x, y, z) {
            return z.asn && z.asn.network ? z.asn.network : ''
          }
        },
        score: {
          width: 100,
          title: "Score",
          name: 'score',
          data: null,
          render: function(x, y, z) {
            return z.score ? z.score : ''
          }
        },
        count: {
          width: 100,
          title: "Score",
          name: 'score',
          data: null,
          render: function(x, y, z) {
            return z.count ? z.count : ''
          }
        },
        reason: {
          width: 200,
          title: "Reason",
          name: 'reason',
          data: null,
          render: function( data, type, row, meta ) {

            if(!row.reason) {
              return '';
            }
            switch(row.reason) {
              case 'GEO':
                return 'Blocked GEO';
              break;
              case 'ASN':
                return 'Blocked ASN';
              break;
              case 'EMG':
                return 'Blocked EMERGING';
              break;
              case 'BLK':
                return 'Blocked GLOBAL';
              break;
            }
            return '';

          }
        },
        sites: {
          width: 100,
          title: "Sites",
          name: 'sites',
          data: null,
          render: function(x, y, z) {
            return z.sites ? z.sites.length + ' sites' : ''
          }
        },
        actions: {
          data: null,
          width: 80,
          title: '',
          orderable: false,
          render: function( data, type, row, meta ) {
            return '<div class="table-action loading" row-id="' + row.id + '"></div>';
          }
        }
      }

      return cols;

      break;
      case 'explorer':

      var cols = {
        id: {
          width: 20,
          title: "ID",
          name: 'id',
          data: 'id',
        },
        tags: {
          width: '10%',
          title: "Tags",
          name: 'tags',
          render: function(x, y, z) {
            return cwis.tree_table_formatter(z.tags)
          }
        },
        path: {
          title: "Path",
          name: 'path',
          data: 'path',
          width: '25%',
        },
        name: {
          title: "Name",
          name: 'name',
          data: 'name',
        },
        stat: {
          width: 180,
          title: "Stats",
          name: 'stats',
          data: null,
          render: function(x, y, z) {
            return z.stat ? cwis.format_stats(z.stat) : '';
          }
        },
        sig: {
          width: 100,
          title: "sig",
          name: 'sig',
          data: null,
          render: function(x, y, z) {
            return z.sig ? z.sig : ''
          }
        },
        actions: {
          data: null,
          width: 80,
          title: '',
          orderable: false,
          render: function( data, type, row, meta ) {
            return '<div class="table-action loading" row-id="' + row.id + '"></div>';
          }
        }
      }

      return cols;

      break;
    }
  },
  onteardown: function() {
    //$('table', this.root.el).DataTable('destroy');
  },
  onrender: function() {

    var that = this;
    var mode = this.get('mode');
    var cat  = this.get('cat');

    var cols = this.formatters(mode);
    var col;

    // Cleanup
    $('.cwis-table').empty();

    if(mode == 'components') {
      col = [
        cols.id,
        cols.type,
        cols.slug,
        cols.name,
        cols.version,
        cols.outdated,
        cols.vulnerabilities,
        cols.active,
        cols.actions
      ];
    }

    if(mode == 'explorer') {
      col = [
        cols.id,
        cols.path,
        cols.name,
        cols.stat,
        cols.tags,
        //cols.sig,
        cols.actions
      ];
    }
    if(mode == 'blacklist') {
      col = [
        cols.id,
        cols.first_seen,
        cols.last_seen,
        cols.geo,
        cols.ip,
        cols.asn_code,
        cols.asn_name,
        //cols.asn_net,
        cols.count,
        cols.score,
        //cols.sites,
        cols.reason,
        cols.actions
      ];
    }
    if(!col) return;

    var conf = {
      columnDefs: [ { targets: 0, checkboxes: true, orderable: false }],
      createdRow: function (row, data, dataIndex) {

        $('.table-action.loading', row).each(function () {

          var el  = $(this);
          var id   = el.attr('row-id');
          if(!cwis.actions) { cwis.actions = {} }

          let button_statuses = {};
          let is_buttons = null;
          if (data.buttons !== undefined) {
            button_statuses = data.buttons;
            is_buttons = data.is_buttons;
          }

          if (that.get('mode') == 'explorer') {
            button_statuses = {'view':true,'delete':true,'permissions':true,'quarantine_add':true,'quarantine_restore':true,
              'whitelist_add':true,'whitelist_remove':true,'archive_reset':true,'archive_local':true,'archive_remote':true};

            if (data.is_dir) {
              button_statuses['view'] = false;
            }
          }

          let btn_json = encodeURI(JSON.stringify(button_statuses));

          cwis.actions[id] = new Ractive({
              el: el,
              template: '<ui-action mode="' + that.get('mode') + '" btn_json="' + btn_json + '"  is_buttons="' +
                  is_buttons + '" ' + 'row_id="{{id}}" action="{{action}}" label="ACTIONS" icon="arrow-down" />',
              data: function() { return { id: id } },
              partials: cwis.partials,
              components: cwis.components,
              twoway: true,
          });
          el.removeClass('loading');

        });
      },
      columns: col,
      processing: true,
      serverSide: true,
      ajax: {
        method: "POST",
        data: function(d) {
          CwisDebug && console.log(that.get())
          d.filters = that.get('filters');
          d.action = 'cwis_scanner';
          d.subaction = that.get('mode');
          if(that.get('cat')) {
            d.cat       = cwis.objectFlip(cwis.type_mapping)[that.get('cat').toLowerCase()];
          }
          d.id = CwisSettings.pluginAjaxId;
          d.pass = CwisSettings.pluginAjaxPass;
        },
        url: CwisSettings.actionUrl,
        dataSrc: function(d) {
          that.set('count', d.recordsFiltered);
          that.set('items', d.data)
          return d.data
        },
      },
      pageLength: 100
    };

    if(mode == 'blacklist') {
      conf.order = [[ 2, 'desc' ]];
    } else {
      conf.order = [[ 1, 'asc' ]];
    }


    if(mode == 'components') {
      conf.searching = false
      conf.paging = false
      conf.info = false
    }

    this.dt = $('table', this.root.el).DataTable(conf);

    this.observe( 'cat', function ( newValue, oldValue, keypath ) {
      if(!(typeof oldValue == 'undefined')) {
        if(that.timer){ clearTimeout(that.timer) }
        that.timer = setTimeout(function () {
          that.dt.ajax.reload();
        }, 100)
      }
    });

    this.observe( 'filters.*', function ( newValue, oldValue, keypath ) {

      if(!(typeof oldValue == 'undefined')) {
        if(that.timer){ clearTimeout(that.timer) }
        that.timer = setTimeout(function () {
          that.dt.ajax.reload();
        }, 100)
      }

    });

    $('.table-action.loading', this.root.el).each(function () {
      var el  = $(this);
      var id   = el.attr('row-id');
      if(!cwis.actions) { cwis.actions = {} };
      cwis.actions[id] = new Ractive({
          el: el,
          template: '<ui-action row_id="{{id}}" mode="{{mode}}" action="{{action}}" label="ACTIONS" icon="arrow-down" />',
          data: function() { return { id: id, mode: that.get('mode') } },
          partials: cwis.partials,
          components: cwis.components,
          twoway: true,
      });
      el.removeClass('loading').appendTo('.dataTables_filter label');

    });

  }
});

cwis.components['cwis-tree'] = ({
  template: `<div class="tree_wrapper p-0 m-0"><div class="tree_container w-100"></div></div>`,
  getSelection: function () {
    var selection = this.tree.data('jstree').get_selected();

    var files = {};
    var folders = {};
    for(var x in selection) {
      selection[x] = atob(selection[x])
      var s = selection[x].split('.')
      if(s.length > 1) {
        files[selection[x]] = true;
      }
    }
    for(var x in selection) {
      var s = selection[x].split('.')
      if(s.length == 1) {
        var skip = false;
        for(var y in files) {
          if(y.indexOf(s) !== -1) {
            skip = true;
            break;
          }
        }
        if(!skip) {
            folders[selection[x].substr(1)] = true;
        }
      }
    }

    files = Object.keys(files).sort();
    folders = Object.keys(folders).sort();

    for(var x in folders) {
      var fol = folders[x];
      for(var y in folders) {
        var fol2 = folders[y];
        if(fol != fol2 && fol.indexOf(fol2) !== -1) {
          delete folders[x]
        }
      }
      for(var y in files) {
        var fil = files[y]
        if(fil.indexOf(fol) !== -1) {
          delete files[y]
        }
      }
    }

    // Reset indexes
    files = Object.values(files).sort();
    folders = Object.values(folders).sort();

    CwisDebug && console.log(files)
    CwisDebug && console.log(folders)


    return { files: files, folders: folders };
  },
  onrender: function() {

    var that = this;
    var r = [];

    this.observe( 'filters.*', function ( newValue, oldValue, keypath ) {

      if(keypath == 'filters.show_expanded' && newValue == true) {

        if(newValue) {
          if(typeof oldValue == 'undefined') {

              if(that.timer){ clearTimeout(that.timer) }

              that.timer = setTimeout(function () {
                that.tree.data('jstree').open_all()
              }, 1000)
          } else {

              that.tree.data('jstree').open_all()
          }
        } else {
          that.tree.data('jstree').close_all()
        }
        return;

      }

      if(!(typeof oldValue == 'undefined')) {
        if(that.timer){ clearTimeout(that.timer) }
        that.timer = setTimeout(function () {
          that.tree.data('jstree').refresh()
        }, 100)
      }

    });

    function update_colors() {

      for(var x in r) {
        var row = r[x];
        var y   = row.id;
        var el = $("[id='" + y + "']");
        if(el) {
          if(row.data.data) {
            row.data = row.data.data;
          }

          if(row.data.is_missing > 0 && row.data.is_missing == row.data.total) {
            el.addClass("component_missing")
          //  $('checkbox', el).attr("disabled", true);
          } else if(row.data.is_match > 0 && row.data.is_match == row.data.total) {
            el.addClass("component_matching")
          //  $('checkbox', el).attr("disabled", true);
          } else {
            el.removeClass('component_matching').removeClass('component_missing')
          }
        } else {
        }
      }
    }

    //CwisDebug && console.log(site)
    this.tree = $(".tree_container", this.root.el).jstree({
      contextmenu: {
        select_node: false,
        items: {
          viewerItem: {
              label: "Viewer",
              action: function (node) {
                var file = $(node.reference[0]).parent().attr('id');
                cwis.actions.file_editor(file, function() {})
              }
          },
            quarantineItem: {
                label: "Quarantine",
                action: function () {

                  var { files, folders } = that.getSelection()
                  if(!files && !folders) { return; }

                  cwis.actions.quarantine(files, folders, function () {
                    that.tree.data('jstree').refresh()
                    cwis.api(that.parent)
                  })

                }
            },
            restoreItem: {
                label: "Restore",
                action: function () {

                  var { files } = that.getSelection()
                  if(!files) { return; }
                  cwis.actions.unquarantine(files, [], function () {
                    that.tree.data('jstree').refresh()
                    cwis.api(that.parent)
                  })

                }
            },
            archiveItem: {
                label: "Archive Sources",
                action: function () {

                  var { files, folders } = that.getSelection()
                  if(!files && !folders) { return; }
                  cwis.actions.archive_remote(files, folders, function () {})

                }
            },
            resetItem: {
                label: "Reset Sources",
                action: function () {

                  var { files, folders } = that.getSelection()
                  if(!files && !folders) { return; }
                  cwis.actions.reset_remote(files, folders, function () {
                    that.tree.data('jstree').refresh()
                  })

                }
            },
            sendFolder: { // The "delete" menu item
                label: "Archive Local",
                action: function () {

                  var { files, folders } = that.getSelection()
                  if(!files && !folders) { return; }
                  cwis.actions.archive_local(files, folders, function () {
                    that.tree.data('jstree').refresh()
                  })

                }
            },
            whitelist: { // The "delete" menu item
                label: "Whitelist",
                action: function () {

                  var { files, folders } = that.getSelection()
                  if(!files && !folders) { return; }

                  cwis.actions.whitelist(files, folders, function () {
                    that.tree.data('jstree').refresh()
                    cwis.api(that.parent)
                  })

                }
            },
            unwhitelist: { // The "delete" menu item
                label: "Unwhitelist",
                action: function () {

                  var { files, folders } = that.getSelection()
                  if(!files && !folders) { return; }

                  cwis.actions.unwhitelist(files, folders, function () {
                    that.tree.data('jstree').refresh()
                    cwis.api(that.parent)
                  })

                }
            },
        }
      },
      core: {
        themes: {
          name: "default",
          dots: true,
          icons: true,
          variant: "large"
        },
        data: {
          type: "POST",
          success: function (retval) {
            for(var x in retval) {
              r.push(retval[x])
            }
            setTimeout(function () {
                update_colors()
            }, 100)
          },
          url: function (node) {
            return CwisSettings.actionUrl;
          },
          data: function (node) {

            var filters = that.get('filters');

            if(!filters) {
              that.set('presets.default.filters.ext_all', that.parent.get('presets.default.filters.ext'))
              that.set('filters', that.parent.get('presets.default.filters'))
              filters = that.get('filters')
            }

            for(var x in filters) {
              if(filters[x] === false) { filters[x] = 0; }
              if(filters[x] === true)  { filters[x] = 1; }
            }

            var data = {
              'action': 'cwis_scanner',
              'subaction': 'tree',
              'id' : CwisSettings.pluginAjaxId,
              'pass' : CwisSettings.pluginAjaxPass,
              'node': node,
              'filters': filters,
              //'ext': $('.tree-ext', that.root.el).data('select2').val()
            }

            CwisDebug && console.log(data)

            return data;
          }
        }
      },
      table: {
        resizable: false,
        draggable: false,
        contextmenu: true,
      	columns: [
        	{ width: '40%', header: "Files" },
          { width: '30%', header: "Stats", value: 'stat', format: cwis.format_stats },
          { width: '30%', header: "Info", value: 'tags', format: cwis.tree_table_formatter }
      	]
      },
      types: {
        '#': {
          max_children : 1,
          max_depth : 4,
          valid_children : ["root"]
        },
        root: {
          icon : "/static/3.3.15/assets/images/tree_icon.png",
          valid_children : ["default"]
        },
        default: {
          valid_children : ["default","file"]
        },
        file: {
          icon : "glyphicon glyphicon-file",
          valid_children : []
        }
      },
      plugins: [ "ui","themes", "table","contextmenu", "checkbox", "types", "wholerow" ]
    }).bind("loaded.jstree", function () {
      update_colors();
   }).on("open_node.jstree", function () {
      update_colors();
   }).on("select_node.jstree", function () {
     that.set('selected', that.tree.data('jstree').get_selected())
   })

  }

});

cwis.components['cwis-auth'] = ({
  template: "{{ > tpl_auth }}",
  components: cwis.components,
  partials: cwis.partials,
  data: function () {
    CwisDebug && console.log(CwisSettings.pluginType)
    var data = Object.assign({ toggle: 0, locked: (CwisSettings.pluginType == 'dashboard'), routing: cwis.cnx_routing }, cwis.defaults);
    return data;
  },
  pack: function() {
    let nv = this.get('routing')
    let o = {};
    for(let x in nv.routes) {
      let key = nv.routes[x].params.subaction;
      if (nv.routes[x].params.cwis_task !== undefined && nv.routes[x].params.cwis_task) {
        key = key + '-' + nv.routes[x].params.cwis_task;
      }

      o[key] = nv.routes[x]['enabled'];
    }
    return o;
  },
  toggle: function(bool) {
    this._super().toggle()
    var nv = this.get('routing')
    var o = {};
    for(var x in nv.routes) {
      nv.routes[x].enabled = bool ? 1 : 0;
    }
    this.set('routing.routes', nv.routes);
  },
  onrender: function() {
    let that = this;
    //CwisDebug && console.log(this.get())

    let last_sent;

    this.observe('toggle', function(nv, ov) {

      if(typeof(ov) === 'undefined') {
        return;
      }
      that.toggle(nv)
    })

    setTimeout(function () {
      that.observe('routing.*', function (n, old, p) {

        if(p == 'routing.auth') {
          return;
        }

        //if(!old) { return; }

        let ns = that.pack();

        if(old === undefined) {
          last_sent = JSON.stringify(ns);
          return;
        }

        if(JSON.stringify(ns) == last_sent) {
          return;
        }

        let data = {
          subaction: 'auth',
          config: ns
        }
        cwis.post(data, function() {
          cwis.success(that.get('t')('settings.alerts.saved'));
        });
        last_sent = JSON.stringify(ns);

      });
    }, 100)
  }
});

cwis.components['cwis-blacklist'] = ({
  template: "{{ > tpl_blacklist }}",
  data: function () {
    return Object.assign({ }, cwis.defaults);
  },
  onrender: function() {
  }
});

cwis.components['cwis-chart'] = ({
  template: `
  <div id="amchart" class="linechart"></div>
  <small class="footnote text-danger"><b>*</b>
      {{ t('dashboard.defender.footnote') }}
  </small>
`,
  data: function () {
    return Object.assign({ }, cwis.defaults);
  },
  onteardown: function() {

  },
  drawchart: function(chartData) {

    this.chart = AmCharts.makeChart('amchart', {
        type: "serial",
        theme: "none",
        color: cwis.layoutColors.defaultText,
        creditsPosition: 'bottom-left',
        /* dataDateFormat: "YYYY-MM-DD", */
        dataProvider: chartData,
        pathToImages: CwisSettings.pluginBaseUrl + 'img/',
        //pathToImages: '/public/img/',
        precision: 0,
        balloon: {
            "borderThickness": 1,
            "shadowAlpha": 0
        },
        categoryAxis: {
            "axisColor": cwis.layoutColors.defaultText,
            "color": cwis.layoutColors.defaultText,
            "gridColor": cwis.layoutColors.defaultText,
            "parseDates": true,
            "dashLength": 1,
            "minorGridEnabled": true
        },
        categoryField: "date",
        chartCursor: {
            "pan": true,
            "cursorColor": cwis.layoutColors.danger,
            "valueLineEnabled": true,
            "valueLineBalloonEnabled": true,
            "cursorAlpha": 0,
            "valueLineAlpha": 0.2
        },
        chartScrollbar: {
            "graph": "g3",
            "oppositeAxis": false,
            "offset": 30,
            "gridAlpha": 0,
            "color": cwis.layoutColors.defaultText,
            "scrollbarHeight": 45,
            "backgroundAlpha": 0,
            "selectedBackgroundAlpha": 0.05,
            "selectedBackgroundColor": cwis.layoutColors.defaultText,
            "graphFillAlpha": 0,
            "autoGridCount": true,
            "selectedGraphFillAlpha": 0,
            "graphLineAlpha": 0.2,
            "selectedGraphLineColor": cwis.layoutColors.defaultText,
            "selectedGraphLineAlpha": 1
        },
        export: {
            "enabled": true
        },
        graphs: [
            {
                "id": "g3",
                "color": cwis.layoutColors.defaultText,
                "valueAxis": "v1",
                "lineColor": cwis.layoutColors.primaryLight,
                "fillColors": cwis.layoutColors.primaryLight,
                "fillAlphas": 0.8,
                "lineAlpha": 0.8,
                "type": "column",
                "title": "Pageviews",
                "valueField": "pageviews",
                "clustered": false,
                "columnWidth": 0.6,
                "lineColorField": cwis.layoutColors.defaultText,
                /* "legendValueText": "$[[value]]M", */
                "balloonText": "[[title]]<br/><b style='font-size: 120%'>[[value]]</b>"
            }, {
                "id": "g4",
                "valueAxis": "v1",
                "color": cwis.layoutColors.defaultText,
                "lineColor": cwis.layoutColors.primary,
                "fillColors": cwis.layoutColors.primary,
                "fillAlphas": 0.9,
                "lineAlpha": 0.9,
                "type": "column",
                "title": "Visits",
                "valueField": "visits",
                "clustered": false,
                "columnWidth": 0.4,
                /* "legendValueText": "$[[value]]M", */
                "balloonText": "[[title]]<br/><b style='font-size: 120%'>[[value]]</b>"
            }, {
                "id": "g1",
                "valueAxis": "v2",
                "bullet": "round",
                "bulletBorderAlpha": 1,
                "bulletColor": cwis.layoutColors.defaultText,
                "color": cwis.layoutColors.defaultText,
                "bulletSize": 5,
                "hideBulletsCount": 50,
                "lineThickness": 2,
                "lineColor": cwis.layoutColors.danger,
                "type": "smoothedLine",
                "title": "Bad Bots",
                "useLineColorForBulletBorder": true,
                "valueField": "badbots",
                "balloonText": "[[title]]<br/><b style='font-size: 120%'>[[value]]</b>"
            }, /* {
                "id": "g2",
                "valueAxis": "v2",
                "bullet": "round",
                "bulletBorderAlpha": 1,
                "bulletColor": cwis.layoutColors.defaultText,
                "color": cwis.layoutColors.defaultText,
                "bulletSize": 5,
                "hideBulletsCount": 50,
                "lineThickness": 2,
                "lineColor": cwis.layoutColors.dangerLight,
                "type": "smoothedLine",
                "title": "Brute Force",
                "useLineColorForBulletBorder": true,
                "valueField": "bruteforce",
                "balloonText": "[[title]]<br/><b style='font-size: 120%'>[[value]]</b>"
            },*/ {
                "id": "g3",
                "valueAxis": "v2",
                "color": cwis.layoutColors.defaultText,
                "bullet": "round",
                "bulletBorderAlpha": 1,
                "bulletColor": cwis.layoutColors.defaultText,
                "bulletSize": 5,
                "hideBulletsCount": 50,
                "lineThickness": 2,
                "lineColor": cwis.layoutColors.warning,
                "type": "smoothedLine",
                "dashLength": 5,
                "title": "Total Blocked",
                "useLineColorForBulletBorder": true,
                "valueField": "blocked",
                "balloonText": "[[title]]<br/><b style='font-size: 120%'>[[value]]</b>"
            }
        ],
        legend: {
            "useGraphSettings": true,
            "position": "top",
            "color": cwis.layoutColors.defaultText
        },
        valueAxes: [
            {
                "color": cwis.layoutColors.defaultText,
                "axisColor": cwis.layoutColors.defaultText,
                "gridColor": cwis.layoutColors.defaultText,
                "id": "v1",
                "title": "Website Traffic",
                "position": "left",
                "autoGridCount": false
            }, {
                "color": cwis.layoutColors.defaultText,
                "axisColor": cwis.layoutColors.defaultText,
                "gridColor": cwis.layoutColors.defaultText,
                "id": "v2",
                "title": "Blocked",
                "gridAlpha": 0,
                "position": "right",
                "autoGridCount": false
            }
        ]
    });
  },
  onrender: function() {
    var that = this;

    this.observe('chart', function(data) {
      if(data) {
        that.drawchart(data);
      }
    })

  }
});

cwis.components['cwis-components'] = ({
  template: `{{ > tpl_components }}`,
  data: function() { return Object.assign({}, cwis.defaults); },
  refresh: function() {

  },
  onrender: function () {
  
  }
});

cwis.components['cwis-dashboard'] = ({
  template: "{{ > tpl_dashboard }}",
  data: function () {
    return Object.assign({ loading: true, widget: true}, cwis.defaults);
  },
  on: {
    render: function () {
      let that = this;
      that.set('loading', true)
      cwis.api(this, false, function () {
        that.set('loading', false)
        that.handleResize()
      });

      window.addEventListener('resize', (event) => {
        this.handleResize(event);
      });
    }
  },
  handleResize: function () {
    const container = document.querySelector('#scanner-feature-status');
    const elements = container.querySelectorAll('.vertical-rule-xs-right');

    // Reset the right borders
    elements.forEach(el => {
      el.style.borderRight = '1px solid rgba(0, 0, 0, 0.12)';
    });

    // Get container width and element width to calculate elements per row
    const containerWidth = container.offsetWidth;
    const elementWidth = elements[0].offsetWidth - 5;
    const elementsPerRow = Math.floor(containerWidth / elementWidth);

    // Remove right border for the last element in each row
    elements.forEach((el, index) => {
      if ((index + 1) % elementsPerRow === 0) {
        el.style.borderRight = 'none';
      }
    });
  }
});

cwis.components['cwis-debug'] = ({
  on: {
    reset_licence: function() {
      cwis.post({ subaction: 'reset', rst: 'licence' }, function () {});
    },
    reset_results: function() {
      cwis.post({ subaction: 'reset', rst: 'results' }, function () {});
    },
    reset_settings: function() {
      cwis.post({ subaction: 'reset', rst: 'settings' }, function () {});
    },
    reset_sitecheck: function() {
      cwis.post({ subaction: 'reset', rst: 'sitecheck' }, function () {});
    },
    reset_all: function() {
      cwis.post({ subaction: 'reset', rst: 'all' }, function () {});
    },
    cwis_register: function() {
      cwis.post({ subaction: 'register' }, function () {});
    },
  },
  template: "{{ > tpl_debug }}",
  data: function () {
    return Object.assign({ }, cwis.defaults);
  },
  onrender: function() {
  }
});

cwis.components['cwis-defender'] = ({
  template: `{{ > tpl_defender }}`,
  data: function () {

    var data = {
      bots: cwis.bots,
      countries: cwis.countries,
      no_observe: false
    }

    return Object.assign(data, cwis.defaults);

  },
  watch: function () {

    var that = this;
    var opts = cwis.tag_opts;

    that.timeout = setTimeout(function () {
      that.observe( 'defenderSettings.*', function ( newValue, oldValue, keypath ) {
        if(oldValue === undefined) { return; }
        if(that.get('no_observe')) {return; }
        that.timeout = setTimeout(function () {
          CwisDebug && console.log(that.get('defenderSettings'));
          cwis.post({
            'subaction': 'defender',
            'cwis_task': 'settings',
            'cwis_config': JSON.stringify(that.get('defenderSettings'))
          }, function (response) {
              cwis.success(that.get('t')('settings.alerts.saved'));
          })
        }, 50)
      });

      $("#ipfilterBlockGeo", that.root.el).select2({
        templateResult: function(item) {
          if(!item.id) { return ''; }
          var icon = $('<i class="cf-32 cf-' + item.id.toLowerCase() + '"></i>');
          var span = $('<span>').append(icon, item.text)
          return span;
        }
      }).on("change", function () {
        var val = $(this).select2('val') ? $(this).select2('val').join(',') : '';
        that.set('defenderSettings.geo', val)
      });

      $("#ipfilterBlockASN", that.root.el).select2({
        tags: true,
        createTag: function (params) {

        if(!params.term || !parseInt(params.term) || parseInt(params.term) != params.term || parseInt(params.term) > 4294967295) {
          return null
        }

        return {
          id: params.term,
          text: params.term,
          newTag: true,
        }
        }
      }).on("change", function () {
        var val = $(this).select2('val') ? $(this).select2('val').join(',') : '';
        that.set('defenderSettings.asn', val)
      });


      $('#ipfilterAllowInput', that.root.el).select2(opts).on("change", function () {
        var val = $(this).select2('val') ? $(this).select2('val').join(',') : '';
        that.set('defenderSettings.ipfilter.allow', val)
      });

      $('#ipfilterBlockInput', that.root.el).select2(opts).on("change", function () {
        var val = $(this).select2('val') ? $(this).select2('val').join(',') : '';
        that.set('defenderSettings.ipfilter.block', val)
      });

      $('#botsBlockInput', that.root.el).select2().on("change", function () {
        var val = $(this).select2('val') ? $(this).select2('val').join(',') : '';
        that.set('defenderSettings.bots', val)
      });

    }, 50)

  },
  onrender: function() {
    var that = this;

    if(cwis.cnx_chart) {
      that.set('cnx_chart', cwis.cnx_chart)
    } else {
      cwis.post({
        'subaction': 'defender',
        'cwis_task': 'stats',
      }, function (response) {
          cwis.cnx_chart = response;
          that.set('cnx_chart', response)
      })
    }

    if(cwis.cnx_chart) {
      that.set('cnx_blacklist', cwis.cnx_blacklist)
    } else {
      cwis.post({
        'subaction': 'defender',
        'cwis_task': 'stats',
      }, function (response) {
          cwis.cnx_blacklist = response;
          that.set('cnx_blacklist', response)
      })
    }

    if(this.get('defenderSettings')) {
      if(cwis.cnx_defender) {
        that.set('defenderSettings', cwis.cnx_defender);
        that.watch();
      } else {
        cwis.post({
          'subaction': 'defender',
          'cwis_task': 'settings',
        }, function (response) {

            cwis.cnx_defender = response;

            cwis.cnx_defender = Object.assign(cwis.cnx_defender, {
              blockArr: cwis.cnx_defender.ipfilter && cwis.cnx_defender.ipfilter.block && cwis.cnx_defender.ipfilter.block.split ? cwis.cnx_defender.ipfilter.block.split(',') : [],
              allowArr: cwis.cnx_defender.ipfilter && cwis.cnx_defender.ipfilter.allow && cwis.cnx_defender.ipfilter.allow.split ? cwis.cnx_defender.ipfilter.allow.split(',') : [],
              geoArr:   cwis.cnx_defender.geo    && cwis.cnx_defender.geo.split   ? cwis.cnx_defender.geo.split(',')   : [],
              botsArr:  cwis.cnx_defender.bots   && cwis.cnx_defender.bots.split ? cwis.cnx_defender.bots.split(',')  : [],
              asnArr:   cwis.cnx_defender.asn    && cwis.cnx_defender.asn.split ? cwis.cnx_defender.asn.split(',')  : [],
            })
            CwisDebug && console.log(cwis.cnx_defender.ipfilter && cwis.cnx_defender.ipfilter.block && cwis.cnx_defender.ipfilter.block.split ? cwis.cnx_defender.ipfilter.block.split(',') : [])

            that.set('defenderSettings', cwis.cnx_defender);
            that.watch();
        })
      }
    }

  }
});

cwis.components['cwis-documentation'] = ({
  template: `{{ > tpl_documentation }}`,
  data: function () {
    return Object.assign({}, cwis.defaults);
  },
  onrender: function() {

    let that = this;

    cwis.api(this);

  }
});

cwis.components['cwis-explorer'] = ({
  template: "{{ > tpl_explorer }}",
  on: {
    cat: '#',
    cat_filter: function(e) {
      CwisDebug && console.log(e.get('name'))
      this.set('cat', e.get('name'))
    },
    toggleTab: function(e) {
      var vuln_cats = this.get('vuln_cats');
      for(x in vuln_cats) {
        this.set('vuln_cats.' + x + '.opened', false);
      }
      e.set('opened', true);
    },
    sync: function() {

      this.set('syncing', true)

      Swal.fire({
        title: "Syncing to dashboard",
        html: '<b>Starting Sync</b>',
        customClass: 'swal-wide',
        showCancelButton: true,
        confirmButtonText: "OK",
        showLoaderOnConfirm: true,
        didOpen: () => {
            Swal.showLoading();
            var el = $(".swal2-html-container", Swal.getPopup());
            $('button[title="Quick Rescan"]').click()
        },
        allowOutsideClick: () => !Swal.isLoading()
      }).then((result) => {
        if (result.isConfirmed) {
          CwisDebug && console.log("done")
        }
      });

    }
  },
  data: function() {
    return {
      lang: cwis.lang,
      t: function(t) { return this.get('lang.' + t) ? this.get('lang.' + t) : t },
      cat: '#',
      vuln_cats: {
          info: {
              context: 'info',
              icon: 'fa fa-info-circle',
              name: 'Info',
              tags: {},
          },
          vuln: {
              context: 'danger',
              icon: 'fa fa-fire',
              name: 'Vulner',
              tags: {},
          },
          crit: {
              context: 'danger',
              icon: 'fa fa-bug',
              name: 'Critical',
              tags: {},
          },
          warn: {
              context: 'warning',
              icon: 'fa fa-user-secret',
              name: 'Warnings',
              tags: {},
          },
          susp: {
              context: 'warning',
              icon: 'fa fa-exclamation-circle',
              name: 'Susp',
              tags: {},
          }
      },
      reportName: 'Explorer',
      type_mapping: cwis.type_mapping,
      syncing: false,
      mode: 1,
      preset: 'default',
      presets: {
          default: {
            id: "default",
            label: "Default",
            filters: {
              ext: [ 'mp3','wav','m4a','flac','mp4','ogg','webm','mpg',
                     'ogv','m4v','asf','avi','flv','swf','css','webp',
                     'jpeg','svg','jpg','png','gif','raw','bmp','eot','ttf' ],
              types: [
                'BigFiles',
                'match',
                'BigFiles',
                'SkippedDirs',
                'Whitelisted',
                'quarantine'
              ],
              query_logic: 1,
              show_matching: -1,
              show_missing: -1,
              show_anomalies: -1,
              show_quarantine: -1,
              show_expanded: 0,
              expand_matching_core: 0,
              expand_matching_plugins: 0,
              expand_matching_themes: 0,
              expand_missing_core: 1,
              expand_missing_plugins: 0,
              expand_missing_themes: 0,
              expand_quarantine_folders: 0,
            },
          },
          quarantine: {
            id: "quarantine",
            label: "Quarantine Manager",
            filters: {
              query_logic: 1,
              show_matching: -1,
              show_missing: -1,
              show_anomalies: -1,
              show_quarantine: 1,
              show_expanded: 1,
              expand_matching_core: 0,
              expand_matching_plugins: 0,
              expand_matching_themes: 0,
              expand_missing_core: 1,
              expand_missing_plugins: 1,
              expand_missing_themes: 1,
              expand_quarantine_folders: 1,
            },
            ext_default: [
              '.*',
            ],
          },
          threats: {
            id: "threats",
            label: "Active Threats",
            filters: {
              query_logic: 1,
              show_matching: 0,
              show_missing: 1,
              show_anomalies: 1,
              show_quarantine: 1,
              show_expanded: 0,
              expand_matching_core: 0,
              expand_matching_plugins: 0,
              expand_matching_themes: 0,
              expand_missing_core: 1,
              expand_missing_plugins: 1,
              expand_missing_themes: 1,
              expand_quarantine_folders: 1,
            },
            ext_default: [
              '.php',
            ],
          },
          explorer: {
            id: "explorer",
            label: "Site Explorer",
            filters: {
              query_logic: 1,
              show_matching: -1,
              show_missing: -1,
              show_anomalies: -1,
              show_quarantine: -1,
              show_expanded: 0,
              expand_matching_core: 1,
              expand_matching_plugins: 1,
              expand_matching_themes: 1,
              expand_missing_core: 1,
              expand_missing_plugins: 1,
              expand_missing_themes: 1,
              expand_quarantine_folders: 1,
            },
            ext_default: [
              '.*',
            ],
          },
          vulnerable: {
            id: "vulnerable",
            label: "Scanner Vulnerabilities",
            filters: {
              query_logic: 1,
              show_matching: -1,
              show_missing: -1,
              show_anomalies: 1,
              show_quarantine: -1,
              show_expanded: 1,
              expand_matching_core: 1,
              expand_matching_plugins: 1,
              expand_matching_themes: 1,
              expand_missing_core: 1,
              expand_missing_plugins: 1,
              expand_missing_themes: 1,
              expand_quarantine_folders: 1,
            },
            ext_default: [
              '.php',
            ],
          },
      },
    }
  },
  components: cwis.components,
  onrender: function() {

    var that = this;

    if(cwis.params && cwis.params[1]) {
      for(var x in cwis.type_mapping) {
        if(cwis.type_mapping[x] == cwis.params[1]) {
          this.set('cat', x);
        }
      }
    }

    that.observe( 'responseData.results', function(mewValue, oldValue, kp) {
      if(!mewValue) {
        return;
      }

      var cats = that.get('vuln_cats');

      for(var key in mewValue) {

        for(var cat in cats) {
          if(mewValue[key].type == cat) {
            cats[cat].tags[mewValue[key].name] = mewValue[key];
          }
        }
      }

      that.set('vuln_cats', cats)

    });

    that.observe( 'filters', function(nv, ov) {
      if (nv === undefined || ov === undefined) {
        return;
      }

      cwis.post({ subaction: 'tree_settings', cwis_task: 'set', filters: nv }, function(res) {});
    });

    that.set('loading', true)

    let filters = that.get('filters');

    if(!filters) {
      cwis.post({ subaction: 'tree_settings', cwis_task: 'get' },
          function(res) {

            if (res.ext !== undefined) {
              that.set('presets.default.filters.ext_all', res.ext)
              that.set('filters', res)
              that.set('filters.ext_all', res.ext)
            } else {
              that.set('presets.default.filters.ext_all', that.get('presets.default.filters.ext'))
              that.set('filters', that.get('presets.default.filters'))
              that.set('filters.ext_all', that.get('presets.default.filters.ext'))
            }

            setTimeout(function () {
              $('.tree-ext', that.root.el).select2({ tags:true }).on("change", function () {
                that.set('filters.ext', $(this).val())
              });

              $('.hidden-types', that.root.el).select2().on("change", function () {
                that.set('filters.types', $(this).val())
              });

              that.set('loading', false)

            }, 50);

            that.set('loading', false)
          }, function(res) {
            that.set('presets.default.filters.ext_all', that.get('presets.default.filters.ext'))
            that.set('filters', that.get('presets.default.filters'))
            that.set('filters.ext_all', that.get('presets.default.filters.ext'))

            setTimeout(function () {
              $('.tree-ext', that.root.el).select2({ tags:true }).on("change", function () {
                that.set('filters.ext', $(this).val())
              });

              $('.hidden-types', that.root.el).select2().on("change", function () {
                that.set('filters.types', $(this).val())
              });

              that.set('loading', false)

            }, 50);


          });
    } else {
      that.set('loading', false)
    }

    cwis.api(this, false, function () {
      that.observe( 'cat', function(mewValue, oldValue) {

        if(mewValue == '#') {
          that.set('reportName', 'Explorer');

          setTimeout(function () {
            $('.tree-ext', that.root.el).select2({ tags:true }).on("change", function () {
              that.set('filters.ext', $(this).val())
            });

            $('.hidden-types', that.root.el).select2().on("change", function () {
              that.set('filters.types', $(this).val())
            });

          }, 50);


        } else {
          that.set('reportName', mewValue);
        }
      });

    })

    if(this.get('cat') == '#') {
      that.set('reportName', 'Explorer');

      setTimeout(function () {
        CwisDebug && console.log("EXP")

        CwisDebug && console.log(that.get('filters.ext_all'))

        //----------------------------
        //if(!that.get('filters.ext_all')) {
        //  that.set('filters.ext_all', that.get('presets.default.filters.ext'))
        //}
        //----------------------------
        let filters = that.get('filters');
        let loading = that.get('loading')

        if (!loading) {
          if (filters) {
            that.set('filters.ext_all', filters.ext)
          } else {
            that.set('filters.ext_all', that.get('presets.default.filters.ext'))
          }
        }

        $('.tree-ext').select2({ tags:true }).on("change", function () {
          that.set('filters.ext', $(this).val())
        });

        $('.hidden-types').select2().on("change", function () {
          that.set('filters.types', $(this).val())
        });

      }, 100);

    }



    if(cwis.progressData) {
      this.set('progressData', cwis.progressData);
    }

    that.observe( 'sync', function(newValue, oldValue) {
      var el = $(".swal2-html-container", Swal.getPopup());
      if(newValue) {

        if(newValue.isAllFinished) {
          if(that.get('syncing')) {
            el.append($('<div>').html('Quick Scan Completed'))
          }

          el.append($('<div>').html('Syncing Hashes'))

          cwis.post({ action: 'sync', step: 1 }, function (res) {

            el.append($('<div>').html('Syncing Threats'))

            cwis.post({ action: 'sync', step: 2 }, function (res) {

              el.append($('<div>').html('Syncing Quarantine'))

              cwis.post({ action: 'sync', step: 3 }, function (res) {

                el.append($('<div>').html('Syncing File List'))
                  cwis.post({ action: 'sync', step: 3 }, function (res) {

                    el.append($('<div>').html('Sync Done'))
                    Swal.hideLoading()

                  });

              });

            });

          });

        } else {
          el.append($('<div>').html('Quick Scan Progress ' + newValue.rescan.progress))
        }

      }
    });

  }
});


cwis.components['cwis-features'] = ({
  template: "{{ > tpl_features }}",
  on: {
    hovered: function(x) {
      x.set('hovered', x.hover)
    }
  },
  data: function () {
    return Object.assign({ features: {
      basicscan: { enabled: true, title: 'basicscan' },
      recommended: { enabled: true, title: 'recommended' },
      professional: { enabled: true, title: 'professional' },
      blacklist: { enabled: true, title: 'blacklist' },
      database: { enabled: true, title: 'database' },
      scheduler: { enabled: true, title: 'scheduler' },
      defender: { enabled: true, title: 'defender' },
      removal: { enabled: true, title: 'removal' },
      emailing: { enabled: true, title: 'emailing' },
      updates: { enabled: true, title: 'updates' },
      support: { enabled: true, title: 'support' },
      realtime: { enabled: true, title: 'realtime' },
    } }, cwis.defaults);
  },
  onrender: function() {
    var that = this;
    this.observe('licenseResult', function(nv) {
      if(!nv) {
        return;
      }
      var f = that.get('features');

      if(nv && nv.license) {

        switch(nv.license) {
          case 'Trial':
            f.professional.enabled = false;
            f.database.enabled = false;
            f.scheduler.enabled = false;
            f.emailing.enabled = false;
            f.updates.enabled = false;
            f.support.enabled = false;
            f.realtime.enabled = false;
          break;
          case 'Business':
            f.realtime.enabled = false;
          break;
          case 'Premium':

          break;
        }
      } else {
        for(var x in f) {
          f[x].enabled = false;
        }
      }

      that.set('features', f);
    })
  }
});

cwis.components['cwis-filemod'] = ({
  template: "{{ > tpl_filemod }}",
  data: function() {
    return {
      stat: {
        o_r: false,
        g_r: false,
        p_r: false,
        o_w: false,
        g_w: false,
        p_w: false,
        o_e: false,
        g_e: false,
        p_e: false,
      }
    }
  },
  onrender: function () {
    var that = this;
    this.observe('octal', function (chmod, ov) {

      var stat = {
        o_r: false,
        g_r: false,
        p_r: false,
        o_w: false,
        g_w: false,
        p_w: false,
        o_e: false,
        g_e: false,
        p_e: false,
      }

      if (chmod >= 400) { chmod -= 400; stat.o_r = true; }
      if (chmod >= 200) { chmod -= 200; stat.o_w = true; }
      if (chmod >= 100) { chmod -= 100; stat.o_e = true; }
      if (chmod >= 40)  { chmod -= 40; stat.g_r = true; }
      if (chmod >= 20)  { chmod -= 20; stat.g_w = true; }
      if (chmod >= 10)  { chmod -= 10; stat.g_e = true; }
      if (chmod >= 4)   { chmod -= 4; stat.p_r = true; }
      if (chmod >= 2)   { chmod -= 2; stat.p_w = true; }
      if (chmod >= 1)   { chmod -= 1; stat.p_e = true; }

      that.set('stat', stat)

    })
    this.observe('stat.*', function (nv, ov, kp) {

      var stat = that.get('stat');
      var oct  = 0;

      if(stat.o_r) { oct += 400; }
      if(stat.g_r) { oct += 40; }
      if(stat.p_r) { oct += 4; }
      if(stat.o_w) { oct += 200; }
      if(stat.g_w) { oct += 20; }
      if(stat.p_w) { oct += 2; }
      if(stat.o_e) { oct += 100; }
      if(stat.g_e) { oct += 10; }
      if(stat.p_e) { oct += 1; }

      that.set('octal', oct);

    })
  }
});


cwis.components['cwis-license'] = ({
  template: `{{ > tpl_widget_license }}`,
  data: function () {
    return Object.assign({ licenseResult: { license: 'free' } , restNonce: ''}, cwis.defaults);
  },
  on: {
    goLicensePremium: function() {
      window.open(
          'https://cobweb-security.com/pages/premium-cwis-antivirus/',
          '_blank'
      );
    },
    goLicenseBusiness: function() {
      window.open(
          'https://cobweb-security.com/pages/business-cwis-antivirus/',
          '_blank'
      );
    },
    trialRegister: function() {

      var that = this;
      var n = this.get('trialLicense.name');
      var e = this.get('trialLicense.email')

      if(!n || !n.length || n.length < 4 || n.length > 64) {
        return that.set('trialLicense.nameError', true);
      }
      if(!e || !e.length || !cwis.validateEmail(e)) {
        return that.set('trialLicense.emailError', true);
      }
      that.set('loading', true)
      cwis.api(this, { op: 'trial', name: n , email: e }, function (res) {
        that.set('loading', false)
        if(res.success || res.result && res.result == 'success') {
          cwis.success(cwis.lang.settings.license.success.free)

          setTimeout(() => {
            location.reload();
          }, 1000);

          //cwis.main.onrender()
        } else {
          cwis.error(res.error)
        }
      });

    },
  },
  watch: function () {
    let that = this;

    this.observe('licenseResult.lickey', function(nv, ov) {
      if (nv === undefined) {
        return
      }

      let license = this.get('license')

      if (license && license === nv) {
        return
      }

      if(!nv || !nv.length || nv.length !== 35 ) {
        that.set('licenseError', true);
      } else {
        that.set('licenseError', false);
        that.set('loading', true)
        cwis.api(this, { op: 'verify', lkey: nv }, function (res) {
          that.set('loading', false)

          if(res.license) {
            let type = res.license.toLowerCase();
            cwis.success(cwis.lang.settings.license.success[type])

            setTimeout(() => {
              location.reload();
            }, 1000);
          } else {
            cwis.error(res.error)

            setTimeout(() => {
              location.reload();
            }, 2000);
          }
        })
      }
    });

    this.observe('trialLicense.*', function(nv, ov, kp){
      if(!ov) { return; }

      switch(kp) {
        case 'trialLicense.name':
        if(!nv || nv.length < 4 || nv.length > 64) {
          that.set('trialLicense.nameError', true);
        } else {
          that.set('trialLicense.nameError', false);
        }
        break;
        case 'trialLicense.email':
          if(!cwis.validateEmail(nv)) {
            that.set('trialLicense.emailError', true);
          } else {
            that.set('trialLicense.emailError', false);
          }
        break;
      }
    });
  },
  onrender: function() {
    this.set('restNonce', CwisSettings.restNonce);

    if (cwis.cnx_license !== undefined) {
      this.set('license', cwis.cnx_license.lickey);
    }

    this.watch();
  }
});

cwis.components['cwis-logs'] = ({
  template: `{{ > tpl_logs }}`,
  data: function() { return Object.assign({ type: "errors", loglines: 100, logtypes: false, loaded: false, logs: '' }, cwis.defaults); },
  refresh: function() {
    var that = this;
    cwis.post({
      subaction: 'logviewer',
      cwis_log_type: this.get('type'),
      cwis_log_lines: parseInt(this.get('loglines'))
    }, function (res) {
      that.set('loaded', true)
      that.set('logs', res)
    })
  },
  onrender: function () {

    var that = this;
    var types = {
      "errors": "PHP Error Log",
      "prescan": "Prescan Log",
      "rescan": "Rescan Log"
    }

    if(this.get('debug')) {
      types.debug = "CWIS Debug";
      this.set('type', 'debug')
    } else {
      this.set('type', 'errors')
    }
    this.set('logtypes', types)

    this.observe('type', function (nv, ov) {
      if(!ov) { return; }
      that.refresh();
    })
    this.observe('loglines', function (nv, ov) {
      if(!ov) { return; }
      that.refresh();
    })

    this.refresh();

  }
});

cwis.components['cwis-main'] = ({
  template: '{{ > tpl_main }}',
  on: {
    navigate: function(e) {
      var page = e.get('page');
      if(page && page != this.get('page')) {
        this.set('page', page)
        this.set('title', e.get('title'))
        location.hash = page;
      }
    },
  },
  data: function() {
    return Object.assign({ nav: cwis.nav, hidden_nav: cwis.hidden_nav }, cwis.defaults);
  },
  open: function(page) {

    var page = this.lookup(page);

    if(!page) {
      return;
    }

    if(page == this.get('page')) {
      return;
    }

    cwis.page = page.page;
    this.set('page', page.page)
    this.set('title', page.title)
    if(location.hash != '#' + page.page) {
      location.hash = page.page
    }
    CwisDebug && console.log('cwis-' + page.page)
    var data = {};
    if(page.page == 'results' && cwis.params) {
      for(var x in cwis.type_mapping) {
        if(cwis.type_mapping[x] == cwis.params[1]) {
          data.cat = x;
        }
      }
    }

    cwis.active = new cwis.components['cwis-' + page.page]({
      el: '.site-router-main',
      data: function() { return data },
      components: cwis.components,
      partials: cwis.partials
    });

  },
  lookup: function(find) {
    var nav = this.get('nav');
    var hidden_nav = this.get('hidden_nav');
    var page = false;

    var params = find.split('/');
    CwisDebug && console.log(params)
    if(params.length) {
      find = params[0];
      cwis.params = params;
    } else {
      cwis.params = false;
    }

    for(var x in nav) {
      if(nav[x].page == find) {
        page = nav[x];
        return page;
      }
      if(nav[x].submenu) {
        for(var y in nav[x].submenu) {
          if(nav[x].submenu[y].page == find) {
            page = nav[x].submenu[y];
            return page;
          }
        }
      }
      if(hidden_nav[x] !== undefined && hidden_nav[x].page === find) {
        page = hidden_nav[x];
        return page;
      }
    }
    return page;
  },
  onrender: function() {

    CwisDebug && console.log("INMAIN")

    $(window).on('click', function (e) {
      let target = $( e.target );

      if (target.has('i.fa-wrench').length === 0 &&
          !(target.parent().is('a.site-navbar-list-link') &&
              target.parent().has('i.fa-wrench').length === 0) &&
          !target.hasClass('fa-wrench') &&
          target.has('i.fa-search').length === 0 &&
          !(target.parent().is('a.site-navbar-list-link') &&
              target.parent().has('i.fa-search').length === 0) &&
          !target.hasClass('fa-search')) {
        $('ul.site-navbar-sublist').hide();
      }
    });

    $('.site-navbar-list-item').click(function() {
      $('.site-navbar-sublist').hide();
      $('ul', this).toggle();
    });

    var page = this.get('page');
    var that = this;

    cwis.api(this, false, function () {

      if(location.hash == '') {
        that.open('dashboard')
      } else {
        that.open(location.hash.substr(1))
      }

      $(window).on('hashchange', function() {
        if(cwis.page !== location.hash.substr(1)) {
          that.open(location.hash.substr(1))
        }
      });

    });


  }
});

cwis.components['cwis-news'] = ({
  template: `{{ > tpl_news }}`,
  data: function () {
    return Object.assign({}, cwis.defaults);
  },
  onrender: function() {

    let that = this;

    if (cwis.cnx_news) {
      that.set('news', cwis.cnx_news)
    } else {
      cwis.post({ subaction: 'news' }, function(res) {
        that.set('news', res.news)
        that.set('few_news', res.news.slice(0, 3))
      });
    }

  }
});

cwis.components['cwis-results'] = ({
  template: `{{ >tpl_results }}`,
  data: function () {
    return Object.assign({ }, cwis.defaults);
  },
});

cwis.components['cwis-scanner-settings'] = ({
  template: "{{ > tpl_settings_scanner }}",
  components: cwis.components,
  data: function () {
    return Object.assign({ scanSettings: { "action": "", "email": "", "frequency": "0", "level": "1", "extskip": [] },
      startScanSettings: {"action": "", "email": "", "frequency": "0", "level": "1", "extskip": [] },
      levels: cwis.lang.settings.scheduler.levels, frequencies: cwis.lang.settings.scheduler.frequencies, extall: cwis.extall  }, cwis.defaults);
  },
  onrender: function() {
    this.set('startScanSettings', this.get('scanSettings'))

    let that = this;

    if (!cwis.cnx_settings) {
    //  this.set('scanSettings', cwis.scanner_defaults);
    } else {
      //this.set('scanSettings', cwis.cnx_settings);
    }

    $("#scanSettings-frequency", that.root.el).select2({ minimumResultsForSearch: -1 }).on("change", function () {
      let val = $(this).select2('val') ? $(this).select2('val') : '';

      that.set('scanSettings.frequency', val)
    });

    $("#scanSettings-level", that.root.el).select2({ minimumResultsForSearch: -1 }).on("change", function () {
      let val = $(this).select2('val') ? $(this).select2('val') : '';

      that.set('scanSettings.level', val)
    });

    $("#scanEmail", that.root.el).blur(function(){
      let oldV = that.get('scanSettings.email');
      let newV = $(this).val();

      if (newV.length && !cwis.validateEmail(newV)) {
        cwis.error('Incorrect email value.', '')
      } else {
        if (oldV !== newV) {
          that.set('scanSettings.email', newV)
        }
      }
    });

    $("#scanDepth", that.root.el).blur(function(){
      let oldV = that.get('scanSettings.depth');
      let newV = $(this).val();

      if (!newV) {
        newV = -1
      }

      if (oldV !== newV) {
        that.set('scanSettings.depth', newV)
      }
    });

    $("#scanDepth", that.root.el).keyup(function(){
      let val = $(this).val()
      val = parseInt(val)

      if (!val) {
        val = -1
      }

      if (val > 1000) {
        val = 1000
      }

      if (val < -1) {
        val = -1
      }

      $(this).val(val)
    });

    let init = false;

    this.observe('scanSettings.level', function (nv, ov) {
      setTimeout(function () {
        if (that.get('scanSettings.level') !== 1) {
          $("#scanSettings-level").trigger('change');
        }
      }, 100)
    })

    this.observe('scanSettings.frequency', function (nv, ov) {
      setTimeout(function () {
        if (that.get('scanSettings.frequency') !== 3) {
          $("#scanSettings-frequency").trigger('change');
        }
      }, 100)
    })


    this.observe('scanSettings.action', function (nv, ov) {

      if (!nv || init) {
        return;
      }
      init = true;

      setTimeout(function () {

        let last_sent = false;

        $("#scanSettings-extskip", that.root.el).select2({ tags:true,  dropdownAutoWidth : true }).on("change", function () {

          let val = $(this).select2('val') ? $(this).select2('val') : '';

          that.set('scanSettings.extskip', val)

        });

        last_sent = JSON.stringify(that.get('scanSettings'));

        that.observe('scanSettings.*', function(nv, ov) {

          let ns = that.get('scanSettings');

          if (JSON.stringify(ns) == last_sent) {
            return;
          }
          let data = {
            subaction:'scheduler',
            cwis_task:'change',
            cwis_task_config: ns
          }

          cwis.post(data, function (response) {
            cwis.success(that.get('t')('settings.alerts.saved'));
          });
          last_sent = JSON.stringify(ns);
        })

      }, 50)
    });
  }
});

cwis.components['cwis-scanner'] = ({
  template: "{{ > tpl_scanner }}",
  data: function () {
    cwis.cnx_settings = {}
    return Object.assign({ scanner: {stopped: false, running: false, paused: false },
      scanButtonsClass: '', scanButtonsWithText: true, charts: cwis.charts }, cwis.defaults);
  },
  on: {
    rescanQuick: function() {
      let that = this;
      cwis.post({ subaction: 'scanner', cwis_task: 'is_signatures_loaded' }, function (res) {
        if (res.loaded) {
          CwisDebug && console.log('RSQ');
          cwis.scanner.scan.rescanQuick();
        } else {
          Swal.fire(
              'Error!',
              'Signatures weren\'t loaded.',
              'error'
          );
        }
      });
    },
    rescanFull: function() {
      let that = this;
      cwis.post({ subaction: 'scanner', cwis_task: 'is_signatures_loaded' }, function (res) {
        if (res.loaded) {
          CwisDebug && console.log('RSF');
          cwis.scanner.scan.rescanFull();
        } else {
            Swal.fire(
                'Error!',
                'Signatures weren\'t loaded.',
                'error'
            );
        }
      });
    },
    start: function() {
      CwisDebug && console.log('STA');
      this.set('scanner.running', true)
      this.set('scanner.paused', false)
      this.set('scanner.finished', false)
      cwis.scanner.scan.start();
    },
    pause: function() {
      CwisDebug && console.log('PAU');
      this.set('scanner.paused', true)
      this.set('scanner.finished', false)
      this.set('scanner.running', false)
      cwis.scanner.scan.pause();
    },
    stop: function() {
      CwisDebug && console.log('STO');
      this.set('scanner.paused', false)
      cwis.scanner.scan.stop();
    },
  },
  initCharts: function() {

    var that = this;

    $('.pie-chart').each(function () {
      $(this).easyPieChart(JSON.parse($(this).attr('options')));
    });

        this.observe('responseData', function(nv, ov) {

          if(nv) {

          } else {
            return;
          }

          if(that.get('widget')) {
            return;
          }

          for(var key in cwis.charts) {
            switch(key) {

              case 'scan':

                if(nv.rescan.percent && nv.rescan.percent !== 100) {
                  $('.pie-type-scan').data('easyPieChart').update(nv.rescan.percent);
                } else {
                  $('.pie-type-' + key).data('easyPieChart').update(nv[key].percent);
                }

              break;

              case 'prescan':
              case 'tables':
                if(nv[key].percent) {
                  $('.pie-type-' + key).data('easyPieChart').update(nv[key].percent);
                }
              break;
              case 'system':
                if(nv.system && nv.system.cpumark) {
                  $('.pie-type-' + key).data('easyPieChart').update(Math.floor((100 * nv.system.cpumark) / 1000));
                }
              break;
              case 'memory':
                if(nv.system && nv.system.memory && nv.system.memory.usage && nv.system.memory.limit) {
                  $('.pie-type-' + key).data('easyPieChart').update(Math.floor((nv.system.memory.usage / nv.system.memory.limit) * 100 ));
                }
              break;
              case 'results':
                if(nv.results) {
                  for(var x in nv.results) {
                    if(nv.results.count && nv.results.type != 'info') {
                      $('.pie-type-' + key).data('easyPieChart').update(100);
                    }
                  }
                }
              break;
            }
          }
    })
  },
  onrender: function() {
    var that = this;

    that.set('scanner_load', true)
    that.set('loading', true)

    cwis.api(this, false, function () {
      that.set('loading', false)
      that.initCharts();
      cwis.scanner = { ractive: that, scan: cwis.get_scanner() };

      if (cwis.cnx_settings.autostart) {
        cwis.scanner.scan.setAutoStart(true);
      }

      cwis.scanner.scan.getCachedData();
    });

    this.observe('statisticsData', function(nv, ov) {

      if (nv === undefined) {
        return;
      }
      CwisDebug && console.log('++++++++++++++++++++++++++++++++++');

      if (nv && nv.isAllFinished === true) {
        CwisDebug && console.log('scanner.finished');
        that.set('scanner.finished', true)
      } else {
        CwisDebug && console.log('NO scanner.finished');
        that.set('scanner.finished', false)
      }

      if (cwis.scanner.scan.isPaused()) {
        CwisDebug && console.log('scanner.paused');
        that.set('scanner.paused', true)
      } else {
        CwisDebug && console.log('NO scanner.paused');
        that.set('scanner.paused', false)
      }

      if (cwis.scanner.scan.isStopped()) {
        CwisDebug && console.log('scanner.stopped');
        that.set('scanner.stopped', true)
      } else {
        CwisDebug && console.log('NO scanner.stopped');
        that.set('scanner.stopped', false)
      }

      if(cwis.scanner.scan.isRunning()) {
        CwisDebug && console.log('scanner.running');
        that.set('scanner.running', true)
      } else {
        CwisDebug && console.log('NO scanner.running');
        that.set('scanner.running', false)
      }
    });
  }
});

cwis.components['cwis-security'] = ({
  template: `{{ > tpl_security }}`,
  data: function () {
    return Object.assign({ loaded: false }, cwis.defaults);
  },
  onrender: function() {

    var that = this;
    if(cwis.cnx_sysinfo) {
      that.set('cnx_sysinfo', cwis.cnx_sysinfo)
      that.set('loaded', true)
    } else {
      cwis.post({
        'subaction': 'sysinfo',
      }, function (response) {
        CwisDebug && console.log(response)
          cwis.cnx_sysinfo = response;
          that.set('cnx_sysinfo', response)
          that.set('loaded', true)
      })
    }

  }
});

cwis.components['cwis-settings'] = ({
  template: `{{ > tpl_settings }}`,
  data: function () {
    return Object.assign({}, cwis.defaults);
  },
  onrender: function() {

    let that = this;

    let scanSettings = that.get('scanSettings');

    if (scanSettings !== undefined) {
      scanSettings.level = 1;
      scanSettings.frequency = 3;
      that.set('scanSettings', scanSettings);
    }

    cwis.api(this);

  }
});

cwis.components['cwis-sitecheck'] = ({
  template: `{{ > tpl_sitecheck }}`,
  data: function() {
    return Object.assign({ loading: true, is_data:false, resultData: cwis.cnx_sitecheck }, cwis.defaults);
  },
  on: {
    sitecheckReload: function () {
      this.set('loading', true);
      this.onrender();
    }
  },
  onrender: function() {
      let that = this;

    that.set('is_data', false)

    //if(!cwis.cnx_sitecheck) {
      cwis.post({
        'subaction': 'sitecheck',
      }, function (response) {
        if(response.success) {
          cwis.cnx_sitecheck = response.data;
          that.set('resultData', response.data)
        }

        if (response.data.site !== undefined && response.data.site.blacklist.length > 0) {
          that.set('is_data', true)
        }

        that.set('loading', false)
      });
    //}
  }
});

cwis.components['cwis-sysinfo'] = ({
  template: `{{ > tpl_sysinfo }}`,
  data: function () {
    return Object.assign({ loaded: false }, cwis.defaults);
  },
  onrender: function() {

    var that = this;
    if(cwis.cnx_sysinfo) {
      that.set('cnx_sysinfo', cwis.cnx_sysinfo)
      that.set('loaded', true)
    } else {
      cwis.post({
        'subaction': 'sysinfo',
      }, function (response) {
        CwisDebug && console.log(response)
          cwis.cnx_sysinfo = response;
          that.set('cnx_sysinfo', response)
          that.set('loaded', true)
      })
    }

  }
});
