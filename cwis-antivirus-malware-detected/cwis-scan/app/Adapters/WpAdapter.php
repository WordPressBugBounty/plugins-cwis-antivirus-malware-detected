<?php

namespace App\Adapters;

use App\Library\CwisData;
use App\State;
use Automatic_Upgrader_Skin;
use Core_Upgrader;
use Plugin_Upgrader;
use Theme_Upgrader;

class WpAdapter implements AdapterInterface
{
   function getOption(string $key, $def = false)
   {
     if (!function_exists('get_option')) {
         if (!include_once(State::scanPath() . '/wp-includes/option.php')) {
             throw new \Exception('Cannot load options.php', 500);
         }
     }
     return get_option($key);
   }

   function setOption(string $key, $value, $autoload = null)
   {
       if (!function_exists('get_option')) {
           if (!include_once(State::scanPath() . '/wp-includes/option.php')) {
               throw new \Exception('Cannot load options.php', 500);
           }
       }
       return update_option($key, $value, $autoload);
   }

    function addOption(string $key, $value, $autoload = null)
    {
        if (!function_exists('get_option')) {
            if (!include_once(State::scanPath() . '/wp-includes/option.php')) {
                throw new \Exception('Cannot load options.php', 500);
            }
        }
        return add_option($key, $value);
    }

    function upgradePlugin($file)
    {
        $skin = new Automatic_Upgrader_Skin();
        $upgrader = new Plugin_Upgrader( $skin );

        return $upgrader->upgrade(
            $file,
            array(
                'clear_update_cache'           => false,
                'pre_check_md5'                => false,
                'attempt_rollback'             => true,
                'allow_relaxed_file_ownership' => false,
            )
        );
    }

    function upgradeWordpress($component)
    {
        $version = $component['latest_version'];
        $locale  = 'en_US';
        $update  = find_core_update( $version, $locale );
        if ( ! $update ) {
            return false;
        }

        $allow_relaxed_file_ownership = isset( $update->new_files ) && ! $update->new_files;

        $url = 'update-core.php?action=do-core-upgrade';

        $credentials = request_filesystem_credentials( $url, '', false,
            ABSPATH, array( 'version', 'locale' ), $allow_relaxed_file_ownership );
        if ( false === $credentials ) {
            return false;
        }

        if ( ! WP_Filesystem( $credentials, ABSPATH, $allow_relaxed_file_ownership ) ) {
            // Failed to connect. Error and request again.
            request_filesystem_credentials( $url, '', true,
                ABSPATH, array( 'version', 'locale' ), $allow_relaxed_file_ownership );

            return false;
        }

        $skin = new Automatic_Upgrader_Skin();

        ob_start(function($content) {return '';});
        $upgrader = new Core_Upgrader($skin);
        $result   = $upgrader->upgrade(
            $update,
            array(
                'allow_relaxed_file_ownership' => $allow_relaxed_file_ownership,
            )
        );
        ob_end_clean();

        if ( is_wp_error( $result ) ) {
            return false;
        }

        return true;
    }

    function enablePlugin($file)
    {
        activate_plugin($file, '', false, true);
    }

    function upgradeTheme($name)
    {
        $skin = new Automatic_Upgrader_Skin();
        $upgrader = new Theme_Upgrader( $skin );

        return $upgrader->upgrade(
            $name,
            array(
                'clear_update_cache'           => false,
                'pre_check_md5'                => false,
                'attempt_rollback'             => true,
                'allow_relaxed_file_ownership' => false,
            )
        );
    }

    function enableTheme($name)
    {
        $theme = wp_get_theme($name);

        if ($theme->exists() || $theme->is_allowed()) {
            switch_theme($theme->get_stylesheet());
            return true;
        }

        return false;
    }

    function disablePlugin($file)
    {
        if (! is_plugin_active_for_network( $file )) {
            deactivate_plugins( $file, false, is_network_admin() );

            if ( ! is_network_admin() ) {
                update_option( 'recently_activated',
                    array( $file => time() ) + (array) get_option( 'recently_activated' ) );
            } else {
                update_site_option( 'recently_activated',
                    array( $file => time() ) +
                    (array) get_site_option( 'recently_activated' ) );
            }

            return true;
        }
        return false;
    }

    function sendPostRequest(string $url, string $body, array $headers = null) : array
    {
        $response = wp_remote_post($url, [
            'headers' => $headers ?: ['Content-Type' => 'application/json; charset=utf-8'],
            'body' => $body,
            'method' => 'POST'
        ]);

        if (is_wp_error($response)) {
            $error_message = $response->get_error_message();
            return ["code" => 500,
                "message" => "Something went wrong: $error_message"
            ];
        }

        $result = json_decode(wp_remote_retrieve_body($response), true);
        return ["code" => 200,
            "message" => $result
        ];
    }

    function getPluginsInfo($plugins_files = false) : ?array
    {
        global $wp_plugin_paths;
        $wp_plugin_paths = [];
        defined('WPMU_PLUGIN_DIR') || define('WPMU_PLUGIN_DIR', false);

        if (!function_exists('get_plugins')) {
            if (!include_once(State::scanPath() . '/wp-admin/includes/plugin.php')) {
                throw new \Exception('Cannot load plugin.php', 500);
            }
        }

        wp_cache_flush();
        $plugins_data = get_plugins();
        $active_plugins = $this->getOption('active_plugins');

        $plugins = array();

        foreach ($plugins_data as $path => $info) {

            $is_active = (in_array($path, $active_plugins)) ? true : false;

            $is_dolly = $path == 'hello.php';
            $name = explode('/', $path, 2)[0];
            if ($is_dolly) $name = 'hello-dolly';
            $files = array();
            if (false !== $plugins_files) {
                $files = isset($plugins_files['plugins'][$name]) ? $plugins_files['plugins'][$name] : [];
            }
            $plugins[] = [
                "name" => $name,
                "title" => $info["Name"],
                "version" => $info["Version"],
                "active" => $is_active,
                "download_url" => 'https://downloads.wordpress.org/plugin/' . $name . '.' . $info["Version"] . '.zip',
                "files" => $files
            ];
        }

        return $plugins;
    }

    function getThemesInfo($themes_files = false) : ?array
    {
        $themes = array();

        if (!function_exists('wp_get_themes')) {
          if (!include_once(State::scanPath() . '/wp-includes/theme.php')) {
              throw new \Exception('Cannot load plugin.php', 500);
          }
        }
        include_once(State::scanPath() . '/wp-includes/class-wp-theme.php');
        include_once(State::scanPath() . '/wp-includes/kses.php');
        include_once(State::scanPath() . '/wp-includes/blocks.php');
        include_once(State::scanPath() . '/wp-includes/class-wp-block-parser.php');



        global $wp_theme_directories;
        $wp_theme_directories = State::scanPath() . '/wp-content/themes';


        $themes_data = wp_get_themes();

        foreach ($themes_data as $name => $info) {
            $files = array();
            if (count($themes_files)) {
                //$files = $themes_files['themes'][$name];
            }
            $themes['themes'][$name] = [
                "name" => $name,
                "title" => $info->get('Name'),
                "version" => $info->get('Version'),
                "download_url" => 'https://downloads.wordpress.org/theme/' . $name . '.' . $info->get('Version') . '.zip',
                "files" => $files
            ];
        }

        return $themes;
    }

    function siteUrl(): string {

    }

    function siteTitle(): string {

    }

    function adminEmail(): string{

    }

    public function getVersion()
    {
        global $wp_version;
        return $wp_version;
    }

    public function getSystemComponents($results = ['core' => [], 'plugins' => [], 'themes' => [] ]): array
    {
      if(!defined('ABSPATH')) {
        define('ABSPATH', State::scanPath() . '/');
      }
      if(!defined('WPINC')) {
        define( 'WPINC', 'wp-includes' );
      }
      if(!defined('WP_PLUGIN_DIR')) {
        define( 'WP_PLUGIN_DIR', State::scanPath() . '/' . 'wp-content/plugins/' );
      }
      defined('SHORTINIT') || define('SHORTINIT', true);
      include_once State::scanPath() . '/wp-load.php';

        return [
            "core" => [
                [
                    "version" => self::getVersion(),
                    "name"    => 'wordpress',
                    "title"   =>  self::getOption('blogname'),
                    "download_url" => "https://wordpress.org/wordpress-" . self::getVersion() . ".zip",
                    "files"        => $results['core']
                ]
            ],
            "plugins" => self::getPluginsInfo(['plugins' => $results['plugins'] ]),
            "themes" => self::getThemesInfo([ 'themes' => $results['themes'] ])["themes"]
        ];
    }
}
