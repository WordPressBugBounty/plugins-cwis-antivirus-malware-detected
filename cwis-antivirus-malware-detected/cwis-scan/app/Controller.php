<?php

namespace App;

use App\Library\CwisApp;
use App\Library\CwisApi;
use App\Library\CwisManageQuarantine;
use App\Library\Cwis_Updater_Methods;
use Slim\Psr7\Request;
use Slim\Psr7\Response;

use App\Actions\Archive;
use App\Actions\AutoLogin;
use App\Actions\BaseAction;
use App\Actions\Blacklist;
use App\Actions\Components;
use App\Actions\Defender;
use App\Actions\Explorer;
use App\Actions\Files;
use App\Actions\Hashes;
use App\Actions\LogViewer;
use App\Actions\Logs;
use App\Actions\Ping;
use App\Actions\Quarantine;
use App\Actions\Results;
use App\Actions\ScanFile;
use App\Actions\Scanner;
use App\Actions\Scheduler;
use App\Actions\SelfRegister;
use App\Actions\Settings;
use App\Actions\Sitecheck;
use App\Actions\Start;
use App\Actions\Sync;
use App\Actions\Sysinfo;
use App\Actions\Tree;
use App\Actions\Updater;
use App\Actions\Whitelist;
use App\Library\CwisLogger;

class Controller
{
    private $logger;

    function ajax(Request $request, Response $response): Response
    {
        $scan_path = State::tempPath();
        $this->logger = new CwisLogger();
        $this->logger->setScanPath($scan_path);

        $params = $request->getParsedBody();
        $query  = $request->getQueryParams();

        $remote = true;

        if (isset($params['id']) && isset($params['pass']) && !isset($params['totp'])) {
            $remote = false;
        }

        unset($params['id']);
        unset($params['pass']);
        unset($params['totp']);
        unset($params['rest']);

        // Allow access from a local web-server
        if (($http_origin = get_server_env('HTTP_ORIGIN')) && substr_count($http_origin, ':') > 1) {
            $http_origin_port = substr($http_origin, strrpos($http_origin, ':') + 1, 5);
            $allowed_port = is_numeric($http_origin_port) ? ':' . $http_origin_port : '';
            header('Access-Control-Allow-Origin: http://' . get_server_ip() . $allowed_port);
        } else {
            //send_origin_headers();

            $https = (isset($_SERVER['REQUEST_SCHEME']) && $_SERVER['REQUEST_SCHEME'] == 'https') ||
                (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on');
            $url   = ($https ? "https://" : "http://") . ( isset($_SERVER['HTTP_HOST']) ? $_SERVER['HTTP_HOST'] : '' );

            $http_origin = $http_origin == $url ? $http_origin : '*';

            header('Access-Control-Allow-Methods: GET, POST');
            header('Access-Control-Allow-Origin: ' . $http_origin);
        }

        $action = isset($params['subaction']) ? $params['subaction'] : false;
        $cwis_task = isset($params['cwis_task']) ? $params['cwis_task'] : false;

        if ($action) {
            // check extension is loaded
            if (!extension_loaded('curl') &&
                !in_array($action, ['license']) &&
                !in_array($cwis_task, ['auth'])
            ) {
                $result = ['success' => false, 'message' => 'Curl extension not found.'];
                $resultString = $this->safe_json_encode($result);
                $response->getBody()->write($resultString);
                return $response->withHeader('Content-Type', 'application/json');
            }

            try {
                switch ($action) {
                    case 'auth':
                        // Better way..
                        if (!$remote) {
                            State::set_auth($params);
                            $result['success'] = true;
                        } else {
                            $result['success'] = false;
                            $result['data'] = 'Access Denied';
                        }
                        break;

                    // Aggregated
                    case 'info':
                        if (!isset($params['only'])) {
                            $only = [
                                'components',
                                'updater',
                                'scanner',
                                'sysinfo',
                                'stats',
                                'defender',
                                'settings',
                                'news',
                                'routing'
                            ];
                        } else {
                            $only = $params['only'];
                        }

                        if (!is_array($only)) {
                            $only = [$only];
                        }

                        foreach ($only as $ref) {
                            switch ($ref) {
                                case 'sitecheck':
                                    $result['sitecheck'] = (new Sitecheck)();
                                    break;
                                case 'components':
                                    $result['components'] = (new Components)(false, $params);
                                    break;
                                case 'updater':
                                    $result['updater'] = (new Cwis_Updater_Methods())->get_defender_updater_data();
                                    break;
                                case 'scanner':
                                    $result['scanner'] = (new Scanner)($params);
                                    break;
                                case 'sysinfo':
                                    $result['sysinfo'] = (new Sysinfo)();
                                    break;
                                case 'stats':
                                    $result['stats'] = (new Defender)(['cwis_task' => 'stats']);
                                    break;
                                case 'defender':
                                    $result['defender'] = (new Defender)(['cwis_task' => 'settings']);
                                    break;
                                case 'settings':
                                    $result['settings'] = (new Scheduler)($params);
                                    break;
                                case 'news':
                                    $result['news'] = CwisApi::fetch_news();
                                    break;
                                case 'routing':
                                    $result['routing'] = State::get_auth();
                                    break;
                            }
                        }
                        break;

                    // Dashboard Specific
                    case 'news':
                        $result['news'] = CwisApi::fetch_news();
                        break;

                    case 'settings':
                        $name = "\App\Actions\\Settings";
                        $result = (new $name)($params);
                        break;

                    case 'results':
                        $name = "\App\Actions\\Results";
                        $result = (new $name)();
                        break;

                    case 'hashes':
                        $name = "\App\Actions\\Hashes";
                        $result = (new $name)();
                        break;

                    case 'ping':
                        $name = "\App\Actions\\Ping";
                        $result = (new $name)();
                        break;

                    case 'components':
                        $name = "\App\Actions\\Components";
                        $result = (new $name)(isset($params['start']), $params); // Its a DT call (bool)
                        break;

                    // Generic / Plugin
                    case 'explorer':
                        $name = "\App\Actions\\Explorer";
                        $result = (new $name)($params);
                        break;

                    case 'blacklist':
                        $name = "\App\Actions\\Blacklist";
                        $result = (new $name)($params);
                        break;

                    case 'file_read':
                    case 'file_write':
                    case 'file_chmod':
                        $name = "\App\Actions\\Files";
                        $result = (new $name)($params);
                        break;

                    case 'sitecheck':
                        $name = "\App\Actions\\Sitecheck";
                        $result = (new $name)();
                        break;

                    case 'tree':
                        $name = "\App\Actions\\Tree";
                        $result = (new $name)($params);
                        break;

                    case 'tree_settings':
                        $name = "\App\Actions\\TreeSettings";
                        $result = (new $name)($params);
                        break;

                    case 'archive_local':
                    case 'archive_local_rm':
                    case 'archive_remote':
                    case 'archive_check':
                    case 'archive_reset':
                        $name = "\App\Actions\\Archive";
                        $result = (new $name)($params);
                        break;

                    case 'quarantine':
                    case 'quarantine_list':
                    case 'quarantine_add':
                    case 'quarantine_restore':
                        $name = "\App\Actions\\Quarantine";
                        $result = (new $name)($params);
                        break;

                    case 'whitelist_list':
                    case 'whitelist_add':
                    case 'whitelist_remove':
                        $name = "\App\Actions\\Whitelist";
                        $result = (new $name)($params);
                        break;

                    case 'sync':
                        $name = "\App\Actions\\Sync";
                        $result = (new $name)($params);
                        break;

                    case 'scheduler':
                        $name = "\App\Actions\\Scheduler";
                        $result = (new $name)($params);
                        break;

                    case 'defender':
                        $name = "\App\Actions\\Defender";
                        $result = (new $name)($params);
                        break;

                    case 'license':
                        $name = "\App\Actions\\License";
                        $result = (new $name)($params);
                        break;

                    case 'logviewer':
                        $name = "\App\Actions\\LogViewer";
                        $result = (new $name)($params);
                        break;

                    case 'scanner':
                        $name = "\App\Actions\\Scanner";
                        $result = (new $name)($params);
                        break;

                    case 'sysinfo':
                        $name = "\App\Actions\\Sysinfo";
                        $result = (new $name)();
                        break;

                    case 'updater':
                        $name = "\App\Actions\\Updater";
                        $result = (new $name)($params);
                        break;

                    case 'register':
                        $name = "\App\Actions\\Register";
                        $result = (new $name)($params);
                        break;

                    case 'reset':
                        $name = "\App\Actions\\Debug";
                        $result = (new $name)($params);
                        break;

                    case 'deactivation':
                        $name = "\App\Actions\\Deactivate";
                        $result = (new $name)($params);
                        break;
                }

                if (!isset($result) && !is_null($result)) {
                    $result = ['success' => false, 'message' => 'No func'];
                    $resultString = $this->safe_json_encode($result);
                    $response->getBody()->write($resultString);
                    return $response->withHeader('Content-Type', 'application/json')->withStatus(404);
                }

                $resultString = $this->safe_json_encode($result);

                //$this->logger->debugMessage('Request --> ' . json_encode($params));
                //$this->logger->debugMessage('Result --> ' . $resultString);

                $response->getBody()->write($resultString);

                return $response->withHeader('Content-Type', 'application/json');
            } catch (\Exception $ex) {
                $resultString = 'Error';
                if (WP_DEBUG) {
                    $resultString = $ex->getMessage();
                }
                $response->getBody()->write(['error' => $resultString]);

                return $response->withHeader('Content-Type', 'application/json');
            }
        }

        if (!$result) {
            $result = 'Not found';
        }

        $response->getBody()->write($result);

        //$this->logger->debugMessage('Request --> ' . json_encode($params));

        return $response->withHeader('Content-Type', 'application/json');
    }

    function safe_json_encode($value, $options = 0, $depth = 512, $utfErrorFlag = false)
    {
        $encoded = json_encode($value, $options, $depth);
        switch (json_last_error()) {
            case JSON_ERROR_NONE:
                return $encoded;
            case JSON_ERROR_DEPTH:
                return 'Maximum stack depth exceeded'; // or trigger_error() or throw new Exception()
            case JSON_ERROR_STATE_MISMATCH:
                return 'Underflow or the modes mismatch'; // or trigger_error() or throw new Exception()
            case JSON_ERROR_CTRL_CHAR:
                return 'Unexpected control character found';
            case JSON_ERROR_SYNTAX:
                return 'Syntax error, malformed JSON'; // or trigger_error() or throw new Exception()
            case JSON_ERROR_UTF8:
                $clean = $this->utf8ize($value);
                if ($utfErrorFlag) {
                    return 'UTF8 encoding error'; // or trigger_error() or throw new Exception()
                }
                return $this->safe_json_encode($clean, $options, $depth, true);
            default:
                return 'Unknown error'; // or trigger_error() or throw new Exception()

        }
    }

    function utf8ize($mixed)
    {
        if (is_array($mixed)) {
            foreach ($mixed as $key => $value) {
                $mixed[$key] = $this->utf8ize($value);
            }
        } else if (is_string($mixed)) {
            return utf8_encode($mixed);
        }
        return $mixed;
    }
}
