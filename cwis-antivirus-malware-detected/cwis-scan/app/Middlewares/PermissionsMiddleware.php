<?php

namespace App\Middlewares;

use App\State;
use Psr\Http\Message\ServerRequestInterface as Request;
use Psr\Http\Server\RequestHandlerInterface as RequestHandler;
use Slim\Psr7\Response;

class PermissionsMiddleware
{
    private static function err_handler($err, $status = 200)
    {
        $response = new Response();
        $response->getBody()->write(json_encode([ 'success' => false, 'error' => $err ]));
        return $response->withHeader('Content-Type', 'application/json')->withStatus($status);
    }

    public function __invoke(Request $request, RequestHandler $handler): Response
    {
        $params = $request->getParsedBody();
        $remote = true;

        if (isset($params['id']) && isset($params['pass']) && !isset($params['totp'])) {
            $remote = false;
            return $handler->handle($request);
        }

        $auth   = State::cnf('CWIS_AUTH');

        if (!$auth) {
            return self::err_handler('Internal Server Error (No Auth Config)', 500);
        } else {
            if (!isset($params['subaction'])) {
                return self::err_handler('Bad Request (No Auth Action)', 400);
            } else {
                $skey = $params['subaction'];
                if (isset($params['cwis_task'])) {
                    $skey .= '-'.$params['cwis_task'];
                }
                
                if (!isset($auth[$skey])) {
                    return self::err_handler('Unauthorized (No Auth Index)', 401);
                } else {
                    if ($auth[$skey] != '1') {
                        return self::err_handler('Unauthorized (No Auth Permission for ' . $params['subaction'].')', 401);
                    } else {
                        return $handler->handle($request);
                    }
                }
            }
        }

    }
}
