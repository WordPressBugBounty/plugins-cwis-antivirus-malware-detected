<?php

namespace App\Middlewares;

use App\Library\CwisTOTP;
use App\State;
use Psr\Http\Message\ServerRequestInterface as Request;
use Psr\Http\Server\RequestHandlerInterface as RequestHandler;
use Slim\Psr7\Response;

class RestAuthMiddleware
{
    public function __invoke(Request $request, RequestHandler $handler): Response
    {
        $params = $request->getParsedBody();

        $input_key  = isset($params['restapi']) ? $params['restapi'] : false;
        $input_totp = isset($params['totp']) ? $params['totp'] : false;

        $local_key  = State::cwisRestNonce();
        $local_totp = State::cwisRestTotp();

        if ($input_key && ($input_key == $local_key)) {
            if ($local_totp && $input_totp && CwisTOTP::TestKey($local_totp, $input_totp)) {
                return $handler->handle($request);
            } else {
                return self::err_handler('Unauthorized (TOTP Mismatch)', 401);
            }
        }

        return self::err_handler('Bad Request (Rest Fail)', 400);
    }

    private static function err_handler($err, $status = 200)
    {
        $response = new Response();
        $response->getBody()->write(json_encode([ 'success' => false, 'error' => $err ]));
        return $response->withHeader('Content-Type', 'application/json')->withStatus($status);
    }
}
