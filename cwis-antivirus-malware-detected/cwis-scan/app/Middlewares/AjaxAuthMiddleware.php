<?php

namespace App\Middlewares;

use App\State;
use Psr\Http\Message\ServerRequestInterface as Request;
use Psr\Http\Server\RequestHandlerInterface as RequestHandler;
use Slim\Psr7\Response;

class AjaxAuthMiddleware
{
    public function __invoke(Request $request, RequestHandler $handler): Response
    {
        // CLI support
        if (State::isCli() && $argc >= 2 && !CWIS_IS_CGI) {
            $scanner_auth_id = isset($argv[1]) ? preg_replace('#^(-i|--id=)#', '', $argv[1]) : null;
            $scanner_ajax_pass = null;
        } else {
            $params = $request->getParsedBody();
            $scanner_auth_id  = isset($params['id']) ? $params['id'] : false;
            $scanner_ajax_pass = isset($params['pass']) ? $params['pass'] : false;
        }

        if (!is_user_logged_in()) {
            header('HTTP/1.0 403 Forbidden');
            die('(AM) Access denied!');
        }

        if (!current_user_can('administrator')) {
            header('HTTP/1.0 403 Forbidden');
            die('(AM) Access denied!');
        }

        // Check the access rights
        if (!$scanner_auth_id && !$scanner_ajax_pass) {
            header('HTTP/1.0 403 Forbidden');
            die('(AM) Access denied!');
        } elseif (!$scanner_auth_id || !$scanner_ajax_pass) {
            header('HTTP/1.0 403 Forbidden');
            die('(AM) Access denied!');
        } elseif ($scanner_auth_id && !hash_equals(State::cwisAjaxId(), $scanner_auth_id)) {
            header('HTTP/1.0 403 Forbidden');
            die('(AM) Access denied!');
        } elseif ($scanner_ajax_pass && !hash_equals(State::cwisAjaxPass(), $scanner_ajax_pass)) {
            header('HTTP/1.0 403 Forbidden');
            die('(AM) Access denied!');
        }

        return $handler->handle($request);
//        return $response;
    }
}
