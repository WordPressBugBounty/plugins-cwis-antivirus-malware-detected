<?php

namespace App\Library;

use App\State;

class CwisCli
{
    use Definitions;

    // CLI options list
    var $options = array(
        // required
        'i:' => 'id:',
        // scan process
        'p:' => 'path:',
        'd:' => 'database:',
        'l:' => 'level:',
        'o:' => 'timeout:',
        't:' => 'type:',
        // optional
        'a:' => 'api',
        'e:' => 'delay:',
        'z:' => 'depth:',
        'x:' => 'exclude:',
        'm:' => 'memory:',
        's:' => 'size:',
        'c:' => 'scan:',
        'k:' => 'skip:',
        // scan report
        'r:' => 'report:',
        // miscellaneous
        'h'	 => 'help',
        'v'	 => 'version'
    );

    /**
     * Use this method as a class constructor.
     */
    function construct($config)
    {
        // Pointer to configuration options
        $this->config = $config;

        State::setCnf('license', 'Premium');
    }

    /**
     * Outputs CLI help info screen.
     */
    function displayHelpScreen()
    {
        $php_self = State::cnf('CWIS_WORK_PATH') . '.php';
        $version = State::version();
        echo <<<HELP

=== WebDefender Security {$version} ===
Scanner is designed to detect exploits, malware, trojans, viruses and other threats within database content and files uploaded to your system.

Usage: php {$php_self} --id=AJAX_ID [OPTIONS] [PATH]
       php {$php_self} --id=AJAX_ID --type=1

Current default path is: {$this->config->scan_path}

Options:

  -i, --id=AJAX_ID     Scanner ID for authentication in AJAX interface.

  -p, --path=PATH      Directory path to scan, by default the file directory is used.
  -d, --database=INT   Database scanning: 0 - scan is disabled (default value), 1 - scan is enabled.
  -l, --level=INT      Set scan level: 0/1 - Basic Check, 2 - Recommended (default level) and 3 - Professional.
  -o, --timeout=INT    Set scan timeout: 0 by default (e.g. unlimited scan time in CLI mode).
  -t, --type=INT       Scan type: 1 by default (1 = full scan, 2 = quick rescan, 3 = full rescan).
  
  -a, --api            Scan in API mode with log messages turned off (e.g. only JSON returned).
  -e, --delay=INT      Delay in milliseconds when scanning files to reduce load on the file system (0 by default).
  -z, --depth=INT      Recursive directory-scanning depth limit: -1 for unlimited depth (default value).
  -x, --exclude=...    Top-level directories to exclude (for example: mail/new,ssl,tmp)

  -m, --memory=SIZE    Maximum amount of memory a script may consume. Current value: {$this->config->memory_limit}
                       Can take shorthand byte values (1M, 1G...).
  -s, --size=SIZE      Scan files are smaller than SIZE (0 - all files). Current value: {$this->config->max_size_to_scan}
  -c, --scan=php,...   Scan only specific extensions. E.g. --scan=php,htaccess,js
  -k, --skip=jpg,...   Skip specific extensions. E.g. --skip=jpg,gif,png,xls,pdf
  
  -r, --report=FILE    Filename to save scan report to. E.g. --report=CWIS-SCAN-REPORT.html
  -r, --report=EMAILS  Email address to send scan report to.
                       Can specify multiple emails separated by commas.

  -h, --help           Display this usage information.
  -v, --version        Prints the version and exits.

HELP;
    }

    /**
     * Converts the config options to CLI-mode arguments.
     * @return string
     */
    function getArguments()
    {
        // Check for minimal PHP version
        if (State::phpVersion() < 40300) {
            throw new \Exception("Your host needs to use PHP 4.3.0 or higher to run this application!");
        }

        // --- REQUIRED ---
        // Authentication ID
        $arguments = ' --id=' . State::cwisAjaxId();

        // --- SCAN PROCESS ---
        // Scan path
        if ($this->config->getScanPath() && $this->config->getScanPath() !== $this->config->scan_path_default) {
            $arguments .= ' --path="' . $this->config->getScanPath() . '"';
        }

        // Database scan
        if ($this->config->scan_database) {
            $arguments .= ' --database=' . $this->config->scan_database;
        }

        // Scan level
        if ($this->config->scan_level) {
            $arguments .= ' --level=' . $this->config->scan_level;
        }

        // Scan timeout
        if ($this->config->scan_timeout) {
            $arguments .= ' --timeout=' . $this->config->scan_timeout;
        }

        // Scan type
        if ($this->config->scan_type) {
            $arguments .= ' --type=' . $this->config->scan_type;
        }

        // --- OPTIONAL ---
        // API mode (silent)
        if ($this->config->api_mode) {
            $arguments .= ' --api=1';
        }

        // Scan delay
        if ($this->config->scan_delay) {
            $arguments .= ' --delay=' . $this->config->scan_delay;
        }

        // Scan depth
        if ($this->config->scan_depth && $this->config->scan_depth != -1) {
            $arguments .= ' --depth=' . $this->config->scan_depth;
        }

        // Scan dirs to exclude
        if ($this->config->scan_dir_exclude) {
            $arguments .= ' --exclude="' . $this->config->scan_dir_exclude . '"';
        }

        // Memory limit (default is 1536M)
        if ($this->config->memory_limit && $this->config->memory_limit !== '1536M') {
            $arguments .= ' --memory=' . $this->config->memory_limit;
        }

        // Max filesize to scan (default is 1536K)
        if ($this->config->max_size_to_scan && $this->config->max_size_to_scan !== '2048K') {
            $arguments .= ' --size=' . $this->config->max_size_to_scan;
        }

        // Extensions list to scan
        if ($this->config->ext_scan) {
            $arguments .= ' --scan="' . $this->config->ext_scan . '"';
        }

        // Extensions list to skip
        if ($this->config->ext_skip) {
            $arguments .= ' --skip="' . $this->config->ext_skip . '"';
        }

        // --- SCAN REPORT ---
        // Report file's path or email address(es) to send report to
        if ($this->config->report_path) {
            $arguments .= ' --report="' . $this->config->report_path . '"';
        }

        return $arguments;
    }

    /**
     * Gets options from the command line argument list.
     * @return void
     */
    function getOptions()
    {
        // Check for minimal PHP version
        if (State::phpVersion() < 40300) {
            header('HTTP/1.0 500 Internal Server Error');
            die("Your host needs to use PHP 4.3.0 or higher to run this application!");
        }

        // Get options and long-options from the command line argument list
        $options = getopt(implode('', array_keys($this->options)), array_values($this->options));

        // Scanner version
        if (isset($options['version'])) {
            echo State::version();
            exit;
        }

        // Help screen
        if (isset($options['help']) || isset($options['h'])) {
            $this->displayHelpScreen();
            exit;
        }

        // Report file's path or email address(es) to send report to
        if ((isset($options['report']) && $report = $options['report']) ||
            (isset($options['r']) && $report = $options['r'])) {
            $this->config->report_path = $report;
        }

        // Scan path
        if ((isset($options['path']) && $path = $options['path']) ||
            (isset($options['p']) && $path = $options['p'])) {
            $this->config->setScanPath($path);
        } else {
            // Enable auto-path "feature"
            $this->config->setScanPath();
        }

        // API mode (silent)
        if (isset($options['api']) || isset($options['a'])) {
            $this->config->api_mode = true;
        }

        // Memory limit
        if ((isset($options['memory']) && $memory = $options['memory']) ||
            (isset($options['m']) && $memory = $options['m'])) {
            $this->config->memory_limit = $memory;
        }

        // Max size to scan
        if ((isset($options['size']) && $size = $options['size']) ||
            (isset($options['s']) && $size = $options['s'])) {
            $this->config->max_size_to_scan = $size;
        }

        // Scan delay
        if ((isset($options['delay']) && $delay = $options['delay']) ||
            (isset($options['e']) && $delay = $options['e'])) {
            $this->config->setScanDelay($delay);
        }

        // Scan depth limit
        if ((isset($options['depth']) && $depth = $options['depth']) ||
            (isset($options['z']) && $depth = $options['z'])) {
            $this->config->setScanDepth($depth);
        }

        // Scan dirs to exclude
        if ((isset($options['exclude']) && $exclude = $options['exclude']) ||
            (isset($options['x']) && $exclude = $options['x'])) {
            $this->config->scan_dir_exclude = $exclude;
        }

        // Database scan
        if ((isset($options['database']) && $database = $options['database']) ||
            (isset($options['d']) && $database = $options['d'])) {
            $this->config->setScanDatabase($database);
        }

        // Scan level
        if ((isset($options['level']) && $level = $options['level']) ||
            (isset($options['l']) && $level = $options['l'])) {
            $this->config->setScanLevel($level);
        }

        // Scan timeout
        if ((isset($options['timeout']) && $timeout = $options['timeout']) ||
            (isset($options['o']) && $timeout = $options['o'])) {
            $this->config->setScanTimeout($timeout);
        } else {
            // Unlimited scan time by default
            $this->config->setScanTimeout();
        }

        // Scan type
        if ((isset($options['type']) && $type = $options['type']) ||
            (isset($options['t']) && $type = $options['t'])) {
            $this->config->setScanType($type);
        }

        // Extensions list to skip
        if ((isset($options['skip']) && $ext_skip = $options['skip']) ||
            (isset($options['k']) && $ext_skip = $options['k'])) {
            $this->config->ext_skip = $ext_skip;
            //\App\Library\CwisStaticHelpers::cwis_stdout_message("Skip extensions: " . $ext_skip);
        }

        // Extensions list to scan
        if ((isset($options['scan']) && $ext_scan = $options['scan']) ||
            (isset($options['c']) && $ext_scan = $options['c'])) {
            $this->config->ext_scan = $ext_scan;
            //\App\Library\CwisStaticHelpers::cwis_stdout_message("Scan extensions: " . $ext_scan);
        }
    }

    /**
     * Wrapper method, imports configuration object from array.
     * @param array $ini_array
     * @return bool
     */
    function importConfigFromIniArray($ini_array = array())
    {
        return $this->config->importConfigFromIniArray($ini_array);
    }

    /**
     * Reads the path to PHP binary executable from an optional config file "bindir.ini".
     * @return string
     */
    function getPhpExecutable()
    {
        $path_to_config = State::makePath([State::cnf('CWIS_ROOT_PATH'), 'cwis-services', 'bindir.ini']);
        if (is_readable($path_to_config)) {
            // Read only the first line of a file
            $path_to_phpbin = trim(reset(file($path_to_config)));
            if (is_dir($path_to_phpbin)) {
                return rtrim($path_to_phpbin, '/\\') . '/php';
            } elseif (is_file($path_to_phpbin)) {
                return $path_to_phpbin;
            }
        }

        return 'php';
    }

    /**
     * Executes scanner, returns the last line of the response.
     * @param string $scanner_file
     * @return bool|string
     */
    function executeScanner($scanner_file = '', $debug = false)
    {
        if (!$scanner_file || !is_file($scanner_file)) {
            return false;
        }

        // Parse command-line options
        $arguments = $this->getArguments();
        $path_to_phpbin = $this->getPhpExecutable();
        $path_to_phpini = State::makePath([State::cnf('CWIS_ROOT_PATH'), 'cwis-services', 'ioncube', 'php.ini']);

        // Run PHP executable
        $command = $path_to_phpbin . ' -c "' . $path_to_phpini . '" "' . $scanner_file . '"' . $arguments;
        $output = array();
        $status = 0;

        // Execute scanner and get the last line of the response
        if (functions_exists('exec')) {
            $json = exec($command . ' &', $output, $status);
        } elseif (functions_exists('system')) {
            ob_start(); // hide unnecessary output
            $json = system($command . ' 2>&1', $status);
            ob_end_clean();
        } else {
            die('Cannot execute command using exec() or system()');
        }

        // CLI debugging
        if ($debug) {
            echo "<pre>\n";
            echo "[CLI command] <samp>{$command}</samp>\n";
            echo "[CLI output] <samp>" . implode('<br />', $output) . "</samp>\n";
            echo "[Result JSON] <samp>{$json}</samp>\n";
            echo "[Exit status] <b>{$status}</b>\n";
            echo "</pre>\n";
        }

        return $json;
    }

}
