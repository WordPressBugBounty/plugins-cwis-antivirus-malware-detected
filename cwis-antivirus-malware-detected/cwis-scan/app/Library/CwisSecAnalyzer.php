<?php

namespace App\Library;

class CwisSecAnalyzer
{

    var $recursion = 0;

    // reconstructs string from a list of tokens
    function get_tokens_value($file_name, $tokens, $var_declares, $var_declares_global, $tokenid, $start = 0, $stop = 0, $source_functions = array())
    {
        if ($this->recursion++ > 100000) {
            return; //prevent infinite recursion
        }

        $value = '';
        if (!$stop) {
            $stop = count($tokens);
        }

        // check all tokens until instruction ends
        for ($i = $start; $i < $stop; $i++) {
            if (!isset($tokens[$i]) || !is_array($tokens[$i])) {
                continue;
            }

            // trace variables for its values
            if ($tokens[$i][0] === T_VARIABLE || (isset($tokens[$i + 1]) && $tokens[$i][0] === T_STRING && $tokens[$i + 1] !== '(' )) {
                if (!in_array($tokens[$i][1], CwisSecSources::$V_USERINPUT)) {
                    // constant CONSTANTS
                    if ($tokens[$i][1] === 'DIRECTORY_SEPARATOR') {
                        $value .= '/';
                    } else if ($tokens[$i][1] === 'PATH_SEPARATOR') {
                        $value .= ';';
                    }

                    // global $varname -> global scope, CONSTANTS
                    else if ((isset($tokens[$i - 1]) && is_array($tokens[$i - 1]) && $tokens[$i - 1][0] === T_GLOBAL) || $tokens[$i][1][0] !== '$') {
                        $value .= $this->get_var_value($file_name, $tokens[$i], $var_declares_global, $var_declares_global, $tokenid);
                    }
                    // local scope
                    else {
                        $value .= $this->get_var_value($file_name, $tokens[$i], $var_declares, $var_declares_global, $tokenid);
                    }
                } else {
                    if (isset($tokens[$i][3])) {
                        $t = $tokens[$i][3][0];
                        if (is_array($t)) {
                            $t = '';
                        }
                        $parameter_name = str_replace(array("'", '"'), '', $t);
                    } else {
                        $parameter_name = '';
                    }

                    // mark userinput for quote analysis
                    if (($tokens[$i][1] !== '$_SERVER' || (empty($parameter_name) ||
                                in_array($parameter_name, CwisSecSources::$V_SERVER_PARAMS) ||
                                substr($parameter_name, 0, 5) === 'HTTP_')) &&
                        !((isset($tokens[$i - 1]) && is_array($tokens[$i - 1]) &&
                                in_array($tokens[$i - 1][0], CwisSecTokens::$T_CASTS)) ||
                            (isset($tokens[$i + 1]) && is_array($tokens[$i + 1]) &&
                                in_array($tokens[$i + 1][0], CwisSecTokens::$T_ARITHMETIC)))) {
                        $value .= '$_USERINPUT';
                    } else {
                        $value .= '1';
                    }
                }
            }
            // add strings
            // except first string of define('var', 'value')
            else if ($tokens[$i][0] === T_CONSTANT_ENCAPSED_STRING &&
                !(isset($tokens[$i - 2]) && $tokens[$i - 2][0] === T_STRING && $tokens[$i - 2][1] === 'define')) {
                // add string without quotes
                $value .= substr($tokens[$i][1], 1, -1);
            }
            // add directory name dirname(__FILE__)
            else if ($tokens[$i][0] === T_FILE &&
                (isset($tokens[$i - 2]) && $tokens[$i - 2][0] === T_STRING && $tokens[$i - 2][1] === 'dirname')) {
                // overwrite value because __FILE__ is absolute
                // add slash just to be sure
                $value = dirname($file_name) . '/';
            }
            // add numbers
            else if ($tokens[$i][0] === T_LNUMBER ||
                $tokens[$i][0] === T_DNUMBER ||
                $tokens[$i][0] === T_NUM_STRING) {
                $value .= round(floatval($tokens[$i][1]));
            } else if ($tokens[$i][0] === T_ENCAPSED_AND_WHITESPACE) {
                $value .= $tokens[$i][1];
            }
            // if in foreach($bla as $key=>$value) dont trace $key, $value back
            else if ($tokens[$i][0] === T_AS) {
                break;
            }
            // function calls
            else if (isset($tokens[$i + 1]) && $tokens[$i][0] === T_STRING && $tokens[$i + 1] === '(') {
                // stop if strings are fetched from database/file (otherwise SQL query will be added)
                if (in_array($tokens[$i][1], CwisSecSources::$F_DATABASE_INPUT) ||
                    in_array($tokens[$i][1], CwisSecSources::$F_FILE_INPUT) ||
                    isset(CwisSecInfo::$F_INTEREST[$tokens[$i][1]])) {
                    break;
                }
                // add userinput for functions that return userinput
                else if (in_array($tokens[$i][1], $source_functions)) {
                    $value .= '$_USERINPUT';
                }
            }
        }

        return $value;
    }

    // traces values of variables and reconstructs string
    function get_var_value($file_name, $var_token, $var_declares, $var_declares_global, $last_token_id, $source_functions = array())
    {
        if ($this->recursion++ > 100000) {
            return; //prevent infinite recursion
        }

        $var_value = '';

        // CONSTANTS
        if ($var_token[1][0] !== '$') {
            $var_token[1] = strtoupper($var_token[1]);
        }

        // check if var declaration could be found for this var
        if (isset($var_declares[$var_token[1]])) {
            foreach ($var_declares[$var_token[1]] as $var_declare) {
                // check if array keys are the same (if it is an array)
                $array_key_diff = false;
                if (isset($var_token[3]) && !empty($var_declare->array_keys)) {
                    $arrayKeys = $var_declare->array_keys;
                    foreach ($arrayKeys as $k => $arrayKey) {
                        if (is_array($arrayKey)) {
                            unset($arrayKeys[$k]);
                        } else {
                            $arrayKeys[$k] = (string)$arrayKey;
                        }
                    }

                    $array_key_diff = array_diff_assoc(
                        (array) $var_token[3],
                        (array) $arrayKeys
                    );
                }

                if ($var_declare->id < $last_token_id && empty($array_key_diff)) {
                    $var_value .= $this->get_tokens_value($file_name, $var_declare->tokens, $var_declares, $var_declares_global,
                        $var_declare->id, $var_declare->tokenscanstart, $var_declare->tokenscanstop, $source_functions);
                }

                if ('' !== $var_value) {
                    break;
                }
            }
        }

        return $var_value;
    }

    // gets end of codeblock (detects brace ending, ignores new brace opening and closing in between)
    function get_brace_end($tokens, $i)
    {
        if ($this->recursion++ > 100000) {
            return; //prevent infinite recursion
        }

        $c = 1;
        $newbraceopen = 1;
        while (!($newbraceopen === 0 || $tokens[$i + $c] === ';')) {

            // watch function calls in function call
            if ($tokens[$i + $c] === '(') {
                $newbraceopen++;
            } else if ($tokens[$i + $c] === ')') {
                $newbraceopen--;
            }
            if ($c > 50) {
                break;
            }
            $c++;
        }

        return $c;
    }

    function get_ini_paths($path)
    {
        if (!preg_match('/([;\\\\]|\W*[C-Z]{1}:)/', $path)) {
            $path = str_replace(':', ';', $path);
        }

        return explode(';', $path);
    }

}
