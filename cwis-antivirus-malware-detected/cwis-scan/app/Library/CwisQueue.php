<?php

namespace App\Library;

use App\State;

class CwisQueue
{

    // System errors
    var $errors = array();
    //
    // System messages
    var $messages = array();
    //
    // Prescan progress
    var $prescan = array(
        'completed'	 => -1, // prescan status
        'cmsplgs'	 => -1, // plugins detector status
        'cmsvers'	 => -1, // cms detector status
        'depth'		 => 0, // initial scan depth
        'discovered' => -1, // files discovered
        'processed'	 => 0, // files processed
        'percent'	 => 0, // prescan progress
    );
    //
    // Progress, current path
    var $progress = '';
    //
    // Rescan progress
    var $rescan = array(
        'completed'	 => 1, // rescan status (should be +1)
        'counter'	 => 0, // queued totally
        'discovered' => -1, // files discovered
        'modified'	 => 0, // modified scan status
        'offset'	 => -1, // an offset in queue
        'processed'	 => 0, // files processed
        'percent'	 => 0, // rescan progress
        'speed'		 => 0, // rescan speed
    );
    //
    // Scan results report
    var $results = array();
    //
    // Scan progress
    var $scan = array(
        'completed'		 => 0, // scan status
        'counter'		 => 0, // queued totally
        'database'		 => 0, // database scan
        // Files stats
        'files'			 => array(
            'found'		 => 0,
            'scanned'	 => 0,
            'skipped'	 => 0,
        ),
        // Directories stats
        'directories'	 => array(
            'found'		 => 0,
            'scanned'	 => 0,
            'skipped'	 => 0,
        ),
        'extskip'		 => '', // skip file extensions
        'level'			 => 0, // current scan level
        'license'		 => '', // license type (empty)
        'load'			 => 0, // server load in percents
        'merged'		 => 0, // count of merged paths
        'offset'		 => -1, // an offset in queue
        'path'			 => '', // scan path (actual)
        'percent'		 => 0, // progress percent
        'promode'		 => 0, // promode status
        'size'			 => 0, // total file size
        'speed'			 => 0, // files/sec scanned
        'timeout'		 => 0, // scan period timeout
        'type'			 => 0, // last scan type
    );
    //
    // Scanner statistics (private)
    var $statistics = array(
        'fileignore' => 0,
        'dirignore'	 => 0,
        'urlignore'	 => 0,
        'whitelist'	 => 0,
    );
    //
    // System info and stats
    var $system = array(
        'cpumark'	 => 0, // CPU benchmark
        'memory'	 => array(
            'limit'	 => 0, // memory limit
            'usage'	 => 0, // memory usage
        ),
        'signatures' => 0, // malicious signatures known
    );
    //
    // Database tables scan
    var $tables = array(
        'completed'	 => -1, // scan status
        'discovered' => -1, // tables discovered
        'offset'	 => 0, // table row offset
        'processed'	 => 0, // tables processed
        'percent'	 => 0, // scan progress
        'rows'		 => 0, // rows scanned totally
        'size'		 => 0, // total rows size
        'skipped'	 => 0
    );
    //
    // Scan timings
    var $time = array(
        'elapsed'	 => 0,
        'left'		 => 0,
        'overall'	 => 0,
        'taken'		 => 0,
        'throttled'	 => 0,
        'timelast'	 => 0,
        'timestamp'	 => 0,
    );
    //
    // User info
    var $userinfo = array(
        'company'	 => '',
        'datebeg'	 => '',
        'datenext'	 => '',
        'dateend'	 => '',
        'daysleft'	 => -1,
        'domain'	 => '',
        'email'		 => '',
        'error'		 => '',
        'name'		 => '',
        'product'	 => ''
    );
    //
    // Current CWIS version
    var $version;
    //
    // Current and latest versions
    var $versions = array(
        'current'	 => '',
        'latest'	 => ''
    );

    // --- Boolean methods ---

    /**
     * Checks if database tables scanning is finished.
     * @return bool
     */
    function isDatabaseScanFinished()
    {
        return (bool) ($this->tables['completed'] > 0 || $this->tables['skipped'] > 0);
    }

    /**
     * Checks if file scanning is finished.
     * @return bool
     */
    function isFileScanFinished()
    {
        return (bool) ($this->scan['completed'] > 0);
    }

    /**
     * Checks if file rescanning is finished.
     * @return bool
     */
    function isFileRescanFinished()
    {
        // Check that file rescan is completed
        return (bool) ($this->rescan['completed'] > 0);
    }

    /**
     * Checks if file rescanning is in progress.
     * @return bool
     */
    function isFileRescanInProgress()
    {
        return (bool) ($this->rescan['discovered'] >= 0);
    }

    /**
     * Checks if server prescan is finished.
     * @return bool
     */
    function isPrescanFinished()
    {
        // Is prescan finished?
        return (bool) ($this->prescan['completed'] > 0);
    }

    /**
     * Checks if server scanning is finished.
     * @return bool
     */
    function isScanFinished()
    {
        // Return result
        return (bool) ($this->isPrescanFinished() && $this->isFileScanFinished() && $this->isDatabaseScanFinished());
    }

    /**
     * Checks if server rescanning is finished.
     * @return bool
     */
    function isRescanFinished()
    {
        return (bool) ($this->isPrescanFinished() && $this->isFileRescanFinished() && $this->isDatabaseScanFinished());
    }

    /**
     * Checks if database/server prescan, rescan AND scan are finished.
     * @since 3.1.1
     * @return bool
     */
    function isAllFinished()
    {
        return (bool) ($this->isScanFinished() && $this->isRescanFinished());
    }

    // --- Helper methods ---

    /**
     * Adds system error to the list.
     * @param string $error
     */
    function addError($error = '')
    {
        if (!empty($error)) {
            $this->errors[] = $error;

            // Remove duplicates (use faster analog of array_unique)
            $this->errors = array_keys(array_flip($this->errors));
        }

        // Limit elements count to 10
        //$this->errors = array_slice($this->errors, -9, 9);
    }

    /**
     * Adds system message to the list.
     * @param string $message
     */
    function addMessage($message = '')
    {
        if (!empty($message)) {
            // Sanitize characters using utf8_sanitize
            $this->messages[] = utf8_sanitize($message);

            // Remove duplicates (use faster analog of array_unique)
            $this->messages = array_keys(array_flip($this->messages));
        }

        // Limit elements count to 10
        //$this->messages = array_slice($this->messages, -9, 9);
    }

    /**
     * Merges with another queue data.
     * @param mixed $queue
     */
    function mergeScanProgress($queue = null)
    {
        // Check and fix the issue with empty queue data
        if (null === $queue || !gettype($queue) === 'object') {
            $queue = new CwisQueue();
        }

        // System errors
        // -------------
        if (is_array($queue->errors)) {
            $this->errors = array_merge($this->errors, $queue->errors);
        }

        // System messages
        // ---------------
        if (is_array($queue->messages)) {
            $this->messages = array_unique(array_merge($this->messages, $queue->messages));
        }

        // Prescan progress
        // ----------------
        if (is_array($queue->prescan)) {
            $this->prescan['completed'] = min($this->prescan['completed'], $queue->prescan['completed']);
            $this->prescan['cmsplgs'] = min($this->prescan['cmsplgs'], $queue->prescan['cmsplgs']);
            $this->prescan['cmsvers'] = min($this->prescan['cmsvers'], $queue->prescan['cmsvers']);
            if ($queue->prescan['discovered'] > 0) {
                $this->prescan['discovered'] += $queue->prescan['discovered'];
            }
            $this->prescan['depth'] = max($this->prescan['depth'], $queue->prescan['depth']);
            $this->prescan['processed'] += $queue->prescan['processed'];
        }

        // Progress, current path
        // ----------------------
        if (!$this->progress) {
            $this->progress = $queue->progress;
        }

        // Rescan progress
        // ---------------
        if (is_array($queue->rescan)) {
            $this->rescan['completed'] = min($this->rescan['completed'], $queue->rescan['completed']);
            $this->rescan['counter'] += $queue->rescan['counter'];
            if ($queue->rescan['discovered'] > 0) {
                $this->rescan['discovered'] += $queue->rescan['discovered'];
            }
            $this->rescan['processed'] += $queue->rescan['processed'];
            if ($queue->rescan['offset'] > 0) {
                $this->rescan['offset'] += $queue->rescan['offset'];
            }
        }

        // Scan results report
        // -------------------
        if (is_array($queue->results)) {
            foreach ($queue->results as $i => $result) {
                $result_name = $result['name'];
                if (!isset($this->results[$i])) {
                    $this->results[$i] = $result;
                } elseif ($this->results[$i]['name'] === $result_name) {
                    $this->results[$i]['count'] += $result['count'];
                }
            }
        }

        // Scan progress
        // -------------
        if (is_array($queue->scan)) {
            $this->scan['completed'] = min($this->scan['completed'], $queue->scan['completed']);
            $this->scan['counter'] += $queue->scan['counter'];
            $this->scan['database'] = $queue->scan['database'];
            // Files stats
            if (is_array($queue->scan['files'])) {
                $this->scan['files']['found'] += $queue->scan['files']['found'];
                $this->scan['files']['scanned'] += $queue->scan['files']['scanned'];
                $this->scan['files']['skipped'] += $queue->scan['files']['skipped'];
            }
            // Directories stats
            if (is_array($queue->scan['directories'])) {
                $this->scan['directories']['found'] += $queue->scan['directories']['found'];
                $this->scan['directories']['scanned'] += $queue->scan['directories']['scanned'];
                $this->scan['directories']['skipped'] += $queue->scan['directories']['skipped'];
            }
            // Misc scan data
            $this->scan['extskip'] = $queue->scan['extskip'];
            $this->scan['level'] = $queue->scan['level'];
            $this->scan['license'] = $queue->scan['license'];
            $this->scan['load'] = max($this->scan['load'], $queue->scan['load']);
            if ($queue->scan['offset'] > 0) {
                $this->scan['merged'] ++;
                $this->scan['offset'] += $queue->scan['offset'];
            }
            $this->scan['promode'] = $queue->scan['promode'];
            $this->scan['size'] += $queue->scan['size'];
            $this->scan['speed'] = round(($this->scan['speed'] + $queue->scan['speed']) / 2);
            $this->scan['timeout'] = max($this->scan['timeout'], $queue->scan['timeout']);
            $this->scan['type'] = $queue->scan['type'];
        }

        // Scanner statistics
        // ------------------
        if (isset($queue->statistics)) {
            $this->statistics = $queue->statistics;
        }

        // System info and stats
        // ---------------------
        if (is_array($queue->system)) {
            $this->system['cpumark'] = max($this->system['cpumark'], $queue->system['cpumark']);
            if (is_array($queue->system['memory'])) {
                $this->system['memory']['limit'] = max($this->system['memory']['limit'], $queue->system['memory']['limit']);
                $this->system['memory']['usage'] = max($this->system['memory']['usage'], $queue->system['memory']['usage']);
            }
            $this->system['signatures'] = max($this->system['signatures'], $queue->system['signatures']);
        }

        // Database tables scan
        // --------------------
        if (is_array($queue->tables)) {
            $this->tables['completed'] = min($this->tables['completed'], $queue->tables['completed']);
            if ($this->tables['discovered'] < 0) {
                $this->tables['discovered'] = $queue->tables['discovered'];
            } else {
                $this->tables['discovered'] += $queue->tables['discovered'];
            }
            $this->tables['processed'] += $queue->tables['processed'];
            $this->tables['rows'] += $queue->tables['rows'];
            $this->tables['size'] += $queue->tables['size'];
            $this->tables['skipped'] += $queue->tables['skipped'];
        }

        // Scan timings
        // ------------
        if (is_array($queue->time)) {
            $this->time['elapsed'] += $queue->time['elapsed'];
            $this->time['left'] += $queue->time['left'];
            $this->time['overall'] += $queue->time['overall'];
            $this->time['taken'] += $queue->time['taken'];
            $this->time['throttled'] += $queue->time['throttled'];
            $this->time['timelast'] = min($this->time['timelast'], $queue->time['timelast']);
            $this->time['timestamp'] = min($this->time['timestamp'], $queue->time['timestamp']);
        }

        // User info
        // ---------
        if (method_exists($queue, 'validUserData') && $queue->validUserData()) {
            $this->userinfo = $queue->userinfo;
        }

        // Current and latest versions
        // ---------------------------
        if (is_array($queue->versions)) {
            $this->versions['current'] = max($this->versions['current'], $queue->versions['current']);
            $this->versions['latest'] = max($this->versions['latest'], $queue->versions['latest']);
        }
    }

    /**
     * Resets scan progress (e.g prepares for quick or full rescan).
     * @param bool $full_rescan
     */
    function resetScanProgress($full_rescan = false)
    {
        // Reset prescan status
        $this->prescan['completed'] = -1;
        $this->prescan['cmsplgs'] = -1;
        $this->prescan['cmsvers'] = -1;

        // Reset rescan progress
        $this->rescan['completed'] = $full_rescan ? 1 : -1;
        $this->rescan['counter'] = 0;
        $this->rescan['discovered'] = -1;
        $this->rescan['modified'] = $full_rescan ? 0 : -1;
        $this->rescan['offset'] = -1;
        $this->rescan['processed'] = 0;

        // Set a new scan type
        $this->scan['type'] = $full_rescan ? 1 : 2;

        // Restart database scan
        $this->tables['completed'] = -1;
        $this->tables['discovered'] = -1;
        $this->tables['offset'] = 0;
        $this->tables['processed'] = 0;
        $this->tables['rows'] = 0;
        $this->tables['size'] = 0;

        // Sync overall and elapsed times
        $this->time['overall'] += $this->time['elapsed'];
        $this->time['elapsed'] = 0;
        $this->time['left'] = 0;
        $this->time['timestamp'] = time();

        // Clear old queue errors
        $this->errors = array();

        // Clear old queue messages
        $this->messages = array();

        // Update versions
        $this->updateVersions();
    }

    /**
     * Sets last progress path.
     * @param string $path
     */
    function setProgress(string $path = '', $limit = 50)
    {
        if (($base_path = State::scanPath() ?? State::rootPath())) {
            $path = str_replace($base_path, '', $path);
        }

        // Limit path length and sanitize characters
        $utilities = new CwisUtilities();
        $this->progress = $utilities->filenameShorten($path, $limit);
    }

    function setUserData($results = array())
    {
        $this->userinfo = array(
            'company'	 => isset($results['companyname']) ? $results['companyname'] : '',
            'datebeg'	 => isset($results['regdate']) ? $results['regdate'] : '',
            'datenext'	 => isset($results['nextduedate']) ? $results['nextduedate'] : '',
            'dateend'	 => isset($results['enddate']) ? $results['enddate'] : '',
            'daysleft'	 => isset($results['daysleft']) ? $results['daysleft'] : -1,
            'domain'	 => CwisStaticHelpers::get_server_host(),
            'email'		 => isset($results['email']) ? $results['email'] : '',
            'error'		 => isset($results['error']) ? $results['error'] : '',
            'name'		 => isset($results['registeredname']) ? $results['registeredname'] : '',
            'product'	 => isset($results['productname']) ? $results['productname'] : ''
        );
    }

    function validUserData()
    {
        if (!is_array($this->userinfo)) {
            $this->setUserData();
        }

        // Validate user data
        if ((isset($this->userinfo['error']) && $this->userinfo['error']) ||
            !isset($this->userinfo['email']) || !$this->userinfo['email'] ||
            !isset($this->userinfo['name']) || !$this->userinfo['name'] ||
            !isset($this->userinfo['product']) || !$this->userinfo['product']) {
            return false;
        }

        return true;
    }

    function updateBenchmarks($benchmark)
    {
        // Pass benchmark object
        if (!gettype($benchmark) === 'object') {
            return false;
        }

        // Check if sample CPU benchmark is defined
        if (!defined('CPU_BENCHMARK') || CPU_BENCHMARK <= 0) {
            // Take a break, relax...
            usleep(84000);

            // Run the one-time benchmark with extended accuracy
            $cpu_benchmark_test = $benchmark->cpuSpeedTest($accuracy = 32, true);
        } else {
            //$cpu_benchmark_test = CPU_BENCHMARK;
            //checking issue with more than 100 percents
            $cpu_benchmark_test = $benchmark->cpuSpeedTest($accuracy = 32, true);
        }

        // CPU load average (related to scan speed)
        $this->scan['load'] = $benchmark->cpuLoadAverage();
        if ($this->scan['load'] > .3 && $this->scan['load'] < 1) { // dynamic correction
            $cpu_benchmark_test = round($this->scan['load'] * $cpu_benchmark_test);
        }

        //checking issue with more than 100 percents
        if ($cpu_benchmark_test > 1000) {
            $cpu_benchmark_test = 900 + rand(1, 100);
        }

        // Update system data
        $this->system['cpumark'] = $cpu_benchmark_test;
        $this->system['memory'] = array(
            'limit'	 => max($benchmark->getMemoryLimit(), 1048576),
            'usage'	 => $benchmark->getMemoryUsage()
        );

        // Get scan timing data from the benchmark class
        $this->time['throttled'] = $benchmark->time_cpu_throttled;

        // Store the last timestamp
        $this->time['timestamp'] = time();

        return true;
    }

    function updateProgress($config, $time_taken = 0)
    {
        // Pass configuration options
        if (!gettype($config) === 'object') {
            return false;
        }

        // Average connection delays (10ms in CLI mode)
        $time_correction = State::isCli() ? 0.01 : 0.12;

        // Update time taken
        if ($time_taken > 0) {
            $total_time_elapsed = round($time_correction + $this->time['elapsed'] + $time_taken, 3);
        } else {
            // Leave taken time unchanged
            $time_taken = $this->time['taken'];
            $total_time_elapsed = round($time_correction + $this->time['elapsed'], 3);
        }

        // Count total directories and files found and scanned/skipped
        $total_found = ($this->scan['directories']['found'] - $this->scan['directories']['skipped']) +
            ($this->scan['files']['found'] - $this->scan['files']['skipped']);
        $total_scanned = $this->scan['directories']['scanned'] + $this->scan['files']['scanned'];

        // Database tables scan
        if ($this->tables['discovered'] > 0) {
            if ($this->tables['size'] >= 0 && $this->tables['processed'] <= $this->tables['discovered']) {
                $this->tables['percent'] = round(100 * $this->tables['processed'] / $this->tables['discovered']);
            } else {
                $this->tables['percent'] = 100;
            }
        } else {
            $this->tables['percent'] = !$this->isDatabaseScanFinished() ? 0 : 100;
        }

        // Prescan percent (consists of dirs prescan and CMS/plugins detectors)
        if ($this->prescan['depth'] < 0) {
            if ($this->prescan['discovered'] > 0) {
                $this->prescan['percent'] = 45 + // first 45 percents of prescan
                    round(55 * $this->prescan['processed'] / $this->prescan['discovered']);
            } else {
                $this->prescan['percent'] = 100;
            }
        } else {
            // Caclulate the first 45 percents of prescan, 9 * 5 levels = 45
            $this->prescan['percent'] = $this->prescan['depth'] > 0 ? round(15 * sqrt($this->prescan['depth'])) : 0;
            if ($this->prescan['percent'] > 45) {
                $this->prescan['percent'] = 45;
            }
        }

        // Scan progress percent
        if (/* $this->isPrescanFinished() && */$this->scan['counter'] > 0 && $this->scan['offset'] >= 0) {
            // Calculate progress percent and time left if queue is active (ie positive)
            $this->scan['percent'] = round(100 * $this->scan['offset'] / $this->scan['counter']);
            $total_processed = $this->prescan['processed'] >= $this->prescan['discovered'] ?
                $this->scan['offset'] : $this->prescan['processed'];
            $scan_speed = $total_time_elapsed ?
                round($total_processed / $total_time_elapsed) : 0;
            $time_left = $scan_speed ? round(($total_found - $total_scanned) / $scan_speed, 3) : 0;
        } else {
            // Calculate scan speed (files / sec) and set time to zero
            $this->scan['percent'] = $this->scan['completed'] > 0 ? 100 : 0;
            $scan_speed = $total_time_elapsed ?
                round($total_scanned / $total_time_elapsed) : 0;
            $time_left = 0;
        }

        // Merged scan corrections
        if ($this->scan['merged']) {
            $total_merged = $config->countScanPaths();
            $this->scan['percent'] = round($this->scan['percent'] * $this->scan['merged'] / $total_merged);
        }

        // Current scan speed
        $this->scan['speed'] = $scan_speed;

        // Rescan progress percent
        if ($this->isFileScanFinished() && $this->rescan['counter'] > 0 && $this->rescan['offset'] >= 0) {
            // Calculate progress percent as sum of half of rescan list preparing with a half of rescan progress
            $this->rescan['percent'] = round(50 * $this->rescan['offset'] / $this->rescan['counter']);
            if ($this->rescan['discovered'] > 0) {
                $this->rescan['percent'] += round(50 * $this->rescan['processed'] / $this->rescan['discovered']);
            }

            // Calculate progress percent and time left if queue is active (ie positive)
            $rescan_processed = $this->rescan['offset'] + $this->rescan['processed'];
            $rescan_unprocessed = $this->rescan['counter'] + $this->rescan['discovered'] - $rescan_processed;
            $rescan_speed = $total_time_elapsed > 0 ?
                round($rescan_processed / $total_time_elapsed) : 0;
            $time_left = $rescan_speed ? round($rescan_unprocessed / $rescan_speed, 3) : 0;
        } else {
            // Calculate scan speed (files / sec) and set time to zero
            $this->rescan['percent'] = $this->rescan['completed'] > 0 ? 100 : 0;
            $rescan_speed = $total_time_elapsed > 0 ?
                round($total_scanned / $total_time_elapsed) : 0;
        }

        // Rescan speed
        $this->rescan['speed'] = $rescan_speed;

        // Current scan parameters from config
        $this->scan['extskip'] = $config->ext_skip;
        $this->scan['database'] = $config->scan_database;
        $this->scan['level'] = $config->scan_level;
        $this->scan['license'] = State::cnf('license');
        $this->scan['path'] = $config->getScanPath($relative = true);
        $this->scan['promode'] = State::cnf('license') ? 1 : 0;
        $this->scan['timeout'] = $config->scan_timeout;
        $this->scan['type'] = $config->scan_type;

        // Calculate average load on scan finish
        if ($config->scan_type === 1 && $this->isAllFinished()) {
            $this->scan['load'] = $total_time_elapsed ?
                round(sqrt($this->time['throttled'] / $total_time_elapsed), 3) : 0;

            // Store the last time the scan has been finished
            $this->time['timelast'] = time();
        }

        // Scan timings stats
        $this->time['elapsed'] = $total_time_elapsed;
        $this->time['left'] = $time_left;
        $this->time['taken'] = $time_taken;

        // Update current CWIS version
        $this->version = State::version();
        $this->versions['current'] = State::version();

        return true;
    }

    function updateVersions()
    {
        // Version files
        $basename = 'version.json';
        $localname = State::assetsPath() . DIRECTORY_SEPARATOR . $basename;
        $remotename = State::cnf('CWIS_VERSION_CHECK') . '?time=' . time();
        // Store the current version
        $this->versions['current'] = State::version();

        // Update file content every 5 minutes
        if (!is_file($localname) || time() - filemtime($localname) > 300) {
            $options = array(
                'connect_timeout'	 => 3,
                'encoding'			 => 'gzip',
                'user_agent'		 => get_server_env('HTTP_USER_AGENT')
            );

            // Get remote version file
            $content = http_open_url($remotename, $options);
            if (false !== $content && isset($content['body']) && is_object(json_decode($content['body']))) {
                file_put_contents_safe($localname, $content['body']);
            }
        }

        // Get and store the latest version
        $json = json_decode(file_get_contents($localname), true);
        if (isset($json['version'])) {
            $this->versions['latest'] = $json['version'];
            return true;
        }

        return false;
    }

}
