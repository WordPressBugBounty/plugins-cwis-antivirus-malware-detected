<?php

namespace App\Library;

use App\AdaptersTrait;
use App\State;

class CwisData
{
    use AdaptersTrait;

    public static function get_cwis_data($task)
    {
        $name = "\App\Actions\\" . self::snakeToCamel($task);
        return (new $name)();
    }

    public static function get_plugins_info($plugins_files = false)
    {
        return self::adapter()->getPluginsInfo($plugins_files);
    }

    public static function get_themes_info($themes_files = false)
    {
        return self::adapter()->getThemesInfo($themes_files);
    }

    public static function get_queues_data($scan_path_default)
    {
        $scan_path = normalize_path($scan_path_default);

        $dirsCreator = new CwisDirsCreator();
        $dirsCreator->setFilePathHash($scan_path);
        //$filepath = $dirsCreator->getResultsFilePath($fname);
        $resultdir = $dirsCreator->getPathToResultsSubdir();
        $queue_files = self::get_queue_files($resultdir);
        $result = array();
        foreach ($queue_files as $filepath) {
            $serialized_data = file_get_contents_safe($resultdir . "/" . $filepath);
            $lines = explode("\n", trim($serialized_data));
            foreach ($lines as $line) {
                $parts = explode("\t", trim($line));
                if (!isset($parts[1])) {
                    continue;
                }
                $path = $parts[0];
                $hash = $parts[1];

                if (stripos($path, '>/wp-content/themes/') === 0) {
                    $name_theme = explode('/', $path)[3];
                    $path_theme = str_replace(">/wp-content/themes/", "", $path);
                    $result['themes'][$name_theme][$path_theme] = $hash;
                    continue;
                }
                if (stripos($path, '>/wp-content/plugins/') === 0) {
                    $name_plugin = explode('/', $path)[3];
                    $path_plugin = str_replace(">/wp-content/plugins/", "", $path);
                    $result['plugins'][$name_plugin][$path_plugin] = $hash;
                    continue;
                }
                $path_core = str_replace(">/", "", $path);
                $result['core'][$path_core] = $hash;
            }
        }

        return $result;
    }

    public static function get_queue_files($dir)
    {
        $queueFiles = array();
        if (is_dir($dir)) {
            $files = scandir($dir);
            foreach ($files as $file) {
                if (strpos($file, "CWIS-QUEUE") === 0) {
                    $queueFiles[] = $file;
                }
            }
        } else {
            return $queueFiles;
        }
        return $queueFiles;
    }

    public static function get_log_guarder($log_lines = 0)
    {
        $upload_path = dirname(dirname(CWIS_PLUGIN_DIR_PATH)) . '/uploads/cwis/CWIS-GUARDER/';
        $file_guarder = $upload_path . 'cwsd-guarder.log';
        $file_contents = array();
        if (is_readable($file_guarder)) {
            $file = is_file($file_guarder) ? file($file_guarder) : array();
            $file_size = count($file);
            $file_start = ($log_lines > 0) ? max(0, $file_size - $log_lines) : 0;
            for ($i = $file_start; $i < $file_size; $i++) {
                $line = explode("\t", trim($file[$i]));
                $ip_reason = explode(" ", $line[1]);
                $line[1] = $ip_reason[1];
                $line[3] = implode(' ', array_slice($ip_reason, 2));
                $file_contents[] = $line;
            }
        }
        return $file_contents;
    }

    public static function snakeToCamel($str)
    {
        return str_replace('_', '', ucwords($str, '_'));
    }
}
