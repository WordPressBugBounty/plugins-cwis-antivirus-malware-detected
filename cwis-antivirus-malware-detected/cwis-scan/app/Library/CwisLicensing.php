<?php

namespace App\Library;

use App\State;

class CwisLicensing
{
    // Debugging mode
    var $debug = false;
    //
    // The URL to WHMCS installation.
    var $whmcs_ssl_enabled = false;
    var $whmcs_domain = 'clients.cobweb-security.com';
    //
    // Paths to WHMCS licensing scripts.
    var $whmcs_register = 'modules/servers/cwislicensing/register.php';
    var $whmcs_verify = 'modules/servers/cwislicensing/verify.php';
    //
    // Must match what is specified in the MD5 Hash Verification field
    // of the licensing product that will be used with this check.
    var $whmcs_secret_key = 'cwis-secret';
    //
    // Original local check date in format YYYYMMDD.
    var $local_check_date = '19700101';
    //
    // The number of days to wait between performing remote license checks.
    var $local_check_days_period = 15;
    //
    // The number of days to allow failover for after local key expiry.
    var $local_check_days_allow_fail = 1;
    //
    // Local parameters.
    var $local_domain = null;
    var $local_usersip = null;
    var $local_dirpath = null;
    //
    // Local results array.
    var $local_results = array();

    /**
     * Use this method as a class constructor.
     * @param null|string $domain
     * @param null|string $usersip
     * @param null|string $dirpath
     * @param bool $ssl_enabled
     */
    function construct($domain = null, $usersip = null, $dirpath = null, $ssl_enabled = false)
    {
        // Local domain's name (without WWW)
        $this->local_domain = strip_tags(!$domain ? CwisStaticHelpers::get_server_host() : $domain);
        if (substr($this->local_domain, 0, 4) === 'www.') {
            $this->local_domain = substr($this->local_domain, 4);
        }

        // Local server's IP
        $this->local_usersip = strip_tags(!$usersip ? get_server_ip() : $usersip);

        // Current path to local directory
        $this->local_dirpath = $dirpath; //dirname(__FILE__);
        //
        // Use SSL?
        $this->whmcs_ssl_enabled = (bool) $ssl_enabled;
    }

    /**
     * Checks a local key validity.
     * @param null|string $localkey
     * @param string $licensekey
     * @return array
     */
    function checkLocalKey($localkey = null, $licensekey = '')
    {
        if ($licensekey && strlen($licensekey) >= 10) {
            return $this->checkPremium($localkey, $licensekey);
        } elseif ($localkey) {
            return $this->checkTrial($localkey);
        }
        return $this->getResults();
    }

    /**
     * Checks a premium license validity.
     * @param null|string $localkey
     * @param string $licensekey
     * @return array
     */
    function checkPremium($localkey = null, $licensekey = '')
    {
        // Decode local key
        if ($localkey) {

            // Validate data and license key
            $data_is_valid = $this->dataDecode($localkey);
            $license_is_valid = $this->isLicenseKeyValid($licensekey);

            // Report data or license error
            if (!$data_is_valid || !$license_is_valid) {
                return $this->getResults();
            }
        }

        // Check original key hash validity
        if (!$localkey || !$this->isLocalCheckDateValid() || !$this->isLocalLicenseValid()) {
            // Request for a new data
            //$this->dataRequestVerify($licensekey, true);
        }

        return $this->getResults();
    }

    /**
     * Checks a trial license validity.
     * @param null|string $localkey
     * @param string $name
     * @param string $email
     * @return array
     */
    function checkTrial($localkey = null, $name = '', $email = '')
    {
        // Decode local key
        if ($localkey && $this->dataDecode($localkey)) {
            // Check original check date and key hash
            if ($this->isLocalCheckDateValid()) {
                $this->isLocalLicenseValid();
            } else {

            }
        }

        return $this->getResults();
    }

    function convertXmlToArray($data = '')
    {
        $results = $matches = array();
        preg_match_all('/<(.*?)>([^<]+)<\/\\1>/i', $data, $matches);
        foreach ($matches[1] AS $k => $v) {
            $results[$v] = $matches[2][$k];
        }

        return $results;
    }

    function dataDecode($results_encoded_wrapped = '')
    {
        if (!$results_encoded_wrapped) {
            $this->local_results = array('error' => 'Invalid Results Data');
            return false;
        }

        // Remove the line breaks, extract license data and first MD5 hash
        $results_encoded = str_replace(array("\n", "\r"), '', $results_encoded_wrapped);
        $results_srvrsd_md5_srlzd_encd = substr($results_encoded, 0, -32);
        $suffix_md5hash = substr($results_encoded, -32);

        // Check suffix MD5 hash validity
        if ($suffix_md5hash !== md5($results_srvrsd_md5_srlzd_encd . $this->whmcs_secret_key)) {
            $this->local_results = array('error' => 'Invalid Results Data');
            return false;
        }

        // Decode data, extract second MD5 hash and license data
        $results_md5_srlzd_encd = strrev($results_srvrsd_md5_srlzd_encd);
        $prefix_md5hash = substr($results_md5_srlzd_encd, 0, 32);
        $results_srlzd_encd = substr($results_md5_srlzd_encd, 32);
        $results_srlzd = base64_decode($results_srlzd_encd);
        $this->local_results = unserialize($results_srlzd);

        // Results validation
        if (!$this->local_results || !is_array($this->local_results)) {
            $this->local_results = array('error' => 'Invalid Results Data');
            return false;
        }

        // Check original data validity
        if (!$this->getResultsProp('checkdate') || $prefix_md5hash !== md5($this->getResultsProp('checkdate') . $this->whmcs_secret_key)) {
            $this->setResultsProp('error', 'Invalid local check date');
            return false;
        }

        return true;
    }

    function dataEncode($results = array())
    {
        if (!isset($results['checkdate'])) {
            return 'Invalid local check date';
        }

        // Serialize and encode data
        $check_date = $results['checkdate'];
        $results_srlzd = serialize($results);
        $results_srlzd_encd = base64_encode($results_srlzd);

        // Combine with MD5-hash (1st stage)
        $prefix_md5hash = md5($check_date . $this->whmcs_secret_key);
        $results_md5_srlzd_encd = $prefix_md5hash . $results_srlzd_encd;
        $results_srvrsd_md5_srlzd_encd = strrev($results_md5_srlzd_encd);

        // Combine with MD5-hash (2nd stage)
        $suffix_md5hash = md5($results_srvrsd_md5_srlzd_encd . $this->whmcs_secret_key);
        $results_encoded = $results_srvrsd_md5_srlzd_encd . $suffix_md5hash;
        $results_encoded_wrapped = wordwrap($results_encoded, 80, "\n", true);

        return $results_encoded_wrapped;
    }


    function dataRequestRegister($responseBody)
    {
        // Extract results from XML
        $results = $this->convertXmlToArray($responseBody);

        // Invalid response
        if (!$results || !is_array($results)) {
            $this->setResultsProp('error', 'Invalid license server response');
            return false;
        }

        // Set check date
        $results['checkdate'] = date("Ymd");

        // Check client ID and results status
        if (isset($results['clientid']) && $results['clientid'] && !isset($results['status'])) {
            $results['localkey'] = $this->dataEncode($results);
        } elseif (isset($results['status'])) {
            if ($results['status'] === 'Active' ||
                $results['status'] === 'Pending' ||
                $results['status'] === 'Reissued') {
                $results['localkey'] = $this->dataEncode($results);
            } else {
                $results['error'] = $results['status'] . ' license key';
            }
        } elseif (isset($results['message'])) {
            $results['error'] = $results['message'];
        } else {
            $results['error'] = 'Unknown license server response';
        }

        // Update local results
        $this->local_results = $results;
    }

    function dataRequestVerify($responseBody, $lkey)
    {
        // Extract results from XML
        $results = $this->convertXmlToArray($responseBody);

        // Invalid response
        if (!$results || !is_array($results)) {
            $this->setResultsProp('error', 'Invalid license server response');
            return false;
        }

        // POST fields
        $post_fields = array(
            'licensekey' => urlencode($lkey),
            'domain'	 => $this->local_domain,
            'ip'		 => $this->local_usersip,
            'dir'		 => $this->local_dirpath
        );

        // Check token
        $check_token = time() . md5(mt_rand(1000000000, 9999999999) . $lkey);

        // Validate MD5 checksum
        if (isset($results['md5hash']) && $results['md5hash'] !== md5($this->whmcs_secret_key . $check_token)) {
            $this->setResultsProp('error', 'MD5 checksum verification failed');
            return false;
        } else {
            // Generate fake hash
            $results['fkeyhash'] = $this->getLicenseKeyHash($check_token);
        }

        // Set check date
        $results['checkdate'] = $this->local_check_date;

        // Check results status
        $status = isset($results['status']) ? $results['status'] : null;
        if (!$status || $status === 'Active' || $status === 'Reissued') {
            $results['lkeyhash'] = $this->getLicenseKeyHash($lkey);
        } elseif (isset($results['message'])) {
            $results['error'] = $results['message'];
        } elseif ($status) {
            $results['error'] = $status . ' license key';
        } else {
            $results['error'] = 'Unknown license server response';
        }

        $results['lickey'] = $post_fields['licensekey'];
        // Update local results
        $results['localkey'] = $this->dataEncode($results);
        $this->local_results = $results;

        return true;
    }


    function decodeTrialLicenseKey($licensekey = '')
    {
        $matches = array();
        if ($licensekey && preg_match("#^I(?P<name>.+)IxoxI(?P<email>.+)I$#", $licensekey, $matches)) {
            // Get client name and email
            unset($matches[0], $matches[1], $matches[2]);
            return $matches;
        }

        return null;
    }

    function defineLicenseType()
    {
        $is_valid = !$this->getResultsProp('error');
        $is_premium = $this->getResultsProp('lkeyhash');
        $product = $this->getResultsProp('productname');
        $comment = $license = '';

        // Split product name
        $matches = array();
        if (preg_match("#([\w\s:\/-]+)\W*([\w\s:\/-]*)\W*#", $product, $matches)) {
            $product = trim($matches[1]);
            $comment = trim($matches[2]);
        }

        // Define the license type according to subscription plans:
        // Free <- Trial <- Bisiness <- Professional <- Premium
        switch ($product) {
            case 'CWIS Antivirus Trial':
            case 'FREE CWIS':
                $license = $is_valid ? 'Trial' : 'Free';
                break;

            case 'Business CWIS':
            case 'Business WebDefender':
            case 'NEW WEBSITE Protection':
                $license = $is_valid && $is_premium ? 'Business' : 'Free'; //deprecated
                break;

            case 'Professional CWIS':
            case 'Professional WebDefender':
                $license = $is_valid && $is_premium ? 'Professional' : 'Free';
                break;

            case 'CWIS Antivirus':
            case 'WebDefender Antivirus':
            case 'Premium CWIS':
            case 'Premium WebDefender':
                $license = $is_valid && $is_premium ? 'Premium' : 'Free';
                break;

            case 'CWIS VPS':
            case 'WebDefender VPS':
            case 'VPS - Virtual Private Server':
                $license = stripos($comment, 'services included') ? 'Premium' : 'Professional';
                break;
        }

        $this->setResultsProp('license', $license);

        if ($license) {
            $valid = $this->isLicenseActive() && $is_valid;
            $this->setResultsProp('valid', $valid);

            $this->setResultsProp('label', $valid ? 'valid' : 'isEmpty');
        }
        return $license;
    }

    /**
     * Enables HTTP Secure (HTTPS).
     * @param bool $ssl_enabled
     */
    function detectSSL()
    {
        // Determine if OpenSSL and mod_ssl are installed and PHP 5 >= 5.2.9
        $this->whmcs_ssl_enabled = State::phpVersion() >= 50209 && functions_exists(array('extension_loaded', 'openssl_verify')) && extension_loaded('openssl');
    }

    /**
     * Submits POST request to a specific WHMCS module.
     * @param type $whmcs_path
     * @param type $post_fields
     * @return type
     */
    function httpRequest($whmcs_path, $post_fields)
    {
        // WHMCS domain URL
        $whmcs_base_url = ($this->whmcs_ssl_enabled ? 'https://' : 'http://') . $this->whmcs_domain;

        // Set POST request
        $options = array(
            'connect_timeout'	 => 5,
            'encoding'			 => 'gzip',
            'http_header'		 => array(
                'Connection'	 => 'close',
                'Content-Type'	 => 'application/x-www-form-urlencoded',
                'Cache-Control'	 => 'no-cache',
                'Pragma'		 => 'no-cache'
            ),
            'post_fields'		 => $post_fields,
            'referer'			 => $whmcs_base_url,
            'request_method'	 => 'POST'
        );

        // Get HTTP response
        $response = http_open_url($whmcs_base_url . '/' . $whmcs_path, $options);

        return $response;
    }

    function getLicenseKeyHash($licensekey = '')
    {
        $hex = md5($this->whmcs_secret_key . strrev($licensekey));
        $senary = base_convert($hex, 16, 36); // may contain up to 25 chars
        $encoded = base64_encode($senary . strrev($senary)); // up to 68 chars
        return substr('$2y$12$' . $encoded, 0, 60);
    }

    function getLicenseDate($strdate = '')
    {
        // returns date in format YYYYMMDD, for example: 20160321
        return substr(preg_replace("/\D+/", '', $strdate), 0, 8);
    }

    function getLicenseTime($date = '')
    {
        // converts date in format YYYYMMDD, for example: 20160321
        return mktime(0, 0, 0, +substr($date, 4, 2), +substr($date, 6, 2), +substr($date, 0, 4));
    }

    function getResults()
    {
        // Define the license type
        $this->defineLicenseType();
        return $this->local_results;
    }

    function getResultsProp($property = '')
    {
        return isset($this->local_results[$property]) ?
            $this->local_results[$property] : null;
    }

    function setResultsProp($property = '', $value = '')
    {
        if (!is_array($this->local_results)) {
            $this->local_results = array();
        }

        $this->local_results[$property] = $value;
    }

    function isLicenseActive()
    {
        // Check results status
        $status = $this->getResultsProp('status');
        if ($status && $status !== 'Active' && $status !== 'Pending' && $status !== 'Reissued') {
            if ($this->getResultsProp('message')) {
                $this->setResultsProp('error', $this->getResultsProp('message'));
            } elseif ($status) {
                $this->setResultsProp('error', $status . ' license key');
            } else {
                $this->setResultsProp('error', 'Unknown license server response');
            }
        }

        $datebegin = (int) $this->getLicenseDate($this->getResultsProp('regdate'));
        $dateend = (int) $this->getLicenseDate($this->getResultsProp('enddate'));
        $datenext = (int) $this->getLicenseDate($this->getResultsProp('nextduedate'));
        $tzoffset = (int) $this->getLicenseDate($this->getResultsProp('tzoffset'));

        // Total days remaining in license expiry
        $this->setResultsProp('daysleft', -1);

        // Validation: begin-date should be less than end- and next-date
        if ($datebegin && (($dateend && $datebegin > $dateend) || ($datenext && $datebegin > $datenext))) {
            $this->setResultsProp('error', 'Invalid license validity period ' . $datebegin . '-' . $datenext);
            return false;
        }

        // Time today
        $timetoday = time() + $tzoffset;
        $datetoday = date("Ymd", $timetoday);

        // License validation failed: message...
        if ($datebegin && $datetoday < $datebegin) {
            $this->setResultsProp('error', 'License validity period has not yet started');
            return false;
        }

        // License validation failed: message...
        if ($dateend) {
            $timeend = $this->getLicenseTime($dateend);
            $this->setResultsProp('daysleft', floor(1 + ($timeend - $timetoday) / 86400));
            if ($datetoday > $dateend) {
                $this->setResultsProp('error', 'License validity period has expired');
                return false;
            }
        }

        // License validation failed: message...
        if ($datenext) {
            $timenext = $this->getLicenseTime($datenext);
            $this->setResultsProp('daysleft', floor(1 + ($timenext - $timetoday) / 86400));
            if ($datetoday > $datenext) {
                $this->setResultsProp('error', 'License validity period has expired');
                return false;
            }
        }

        return true;
    }

    function isLicenseKeyValid($licensekey = '')
    {
        // Decode license key
        $trial_key_decoded = ($this->defineLicenseType() === 'Trial') ?
            $this->decodeTrialLicenseKey($licensekey) : null;

        // Validate trial key
        if ($trial_key_decoded) {

            $regname = $this->getResultsProp('registeredname');

            $is_valid_name = false;
            if (strcmp($trial_key_decoded['name'], $regname) !== 0){
                $is_valid_name = true;
            }
            $is_valid_email = ($trial_key_decoded['email'] === $this->getResultsProp('email'));
            if (!$is_valid_name) {
                $this->setResultsProp('error', 'Invalid trial license name');
                return false;
            } elseif (!$is_valid_email) {
                $this->setResultsProp('error', 'Invalid trial license email');
                return false;
            } elseif (!$is_valid_name && !$is_valid_email) {
                $this->setResultsProp('error', 'Invalid trial license data');
                return false;
            }
        } else {
            // Validate a license key hash
            if (!$this->getResultsProp('lkeyhash')) {
                //$this->setResultsProp('error', 'Empty local license key');
                //return false;
            } elseif ($this->getResultsProp('lkeyhash') !== $this->getLicenseKeyHash($licensekey)) {
                //$this->setResultsProp('error', 'Invalid local license key');
                //return false;
            }
        }

        return true;
    }

    function isLocalCheckDateValid()
    {
        // Read original local date check
        $this->local_check_date = $this->getResultsProp('checkdate');
        $localexpiry = date("Ymd", mktime(0, 0, 0, date("m"), date("d") - $this->local_check_days_period, date("Y")));

        // License validation failed: message...
        return (bool) ($this->local_check_date > $localexpiry);
    }

    function isLocalLicenseValid()
    {
        if (!$this->isResultsValueValid('validdomain', $this->local_domain)) {
            $this->setResultsProp('error', 'Unlicensed domain name');
            return false;
        } elseif (!$this->isResultsValueValid('validip', $this->local_usersip)) {
            $this->setResultsProp('error', 'Unlicensed IP address');
            return false;
        } elseif (!$this->isResultsValueValid('validdirectory', $this->local_dirpath)) {
            $this->setResultsProp('error', 'Unlicensed directory');
            return false;
        }

        return true;
    }

    function isResultsValueValid($prop = '', $val = '')
    {
        if (isset($this->local_results[$prop]) && is_string($this->local_results[$prop])) {
            $validvals = array_map('trim', explode(',', $this->local_results[$prop]));
            return in_array($val, $validvals);
        }

        return true;
    }

    // --- MAIN METHOD ---

    /**
     * Returns an array with auth/check results (on NULL on error), the only parameter is a path to the license file.
     * @param string $license_filepath
     * @return null|array
     */
    function getAuthCheckResults($license_filepath = '')
    {

        // Init licensing, detect SSL
        $this->construct();
        $this->detectSSL();

        // Check local key
        $localkey = $results = null;
        $localkey = file_get_contents_safe($license_filepath);
        $results = $this->checkLocalKey($localkey);
        $modified = false;
        // Store generated local key
        /*if (!$localkey && isset($results['localkey'])) {
            if(is_file($license_filepath)) {
              $localtest = file_get_contents_safe($license_filepath);
              $test = $this->checkLocalKey($localtest);
              if(isset($test['license']) && isset($results['license']) && $test['license'] != $results['license']) {
                $modified = true;
              }
            } else {
              $modified = true;
            }
            file_put_contents_safe($license_filepath, $results['localkey']);
        }*/

        if($modified) {
          if(isset($results['license'])) {
            switch($results['license']) {
              case 'Business':
                $conf = State::cnf("CWIS_DEFENDER");
                if($conf && isset($conf['rc']) && $conf['rc'] != -1) {
                  $conf['rc'] = -1;
                  State::setCnf("CWIS_DEFENDER", $conf);
                }
              break;
            }
          }
        }

        // Check if license is active
        if (!$this->isLicenseActive() || !isset($results['error'])) {
            $results = $this->getResults();
        }

        // Access forbidden
        if (isset($results['error'])) {
            // Debug mode
            if ($this->debug) {
                print_r($results);
            }
        }

        return $results;
    }

}
