<?php

namespace App\Library;

use App\State;

class CwisManager
{

    var $error_message = '';
    var $managed_path, $managed_type;

    function getLastError()
    {
        return $this->error_message;
    }

    function whiteFile()
    {
        $this->managed_path = State::whiteFilePath();
        $this->managed_type = 'whitefile';
    }

    function getPathManagedFileList()
    {
        $path_to_managed_filelist = $this->managed_path . DIRECTORY_SEPARATOR . '.filelist.db';

        return $path_to_managed_filelist;
    }

    function getPathManagedFile($file_name = '')
    {
        $utilities = new \App\Library\CwisUtilities();
        $managed_basename = $utilities->filenameSanitize(basename($file_name)) . '-' . md5($file_name);
        $path_to_managed_file = $this->managed_path . DIRECTORY_SEPARATOR . $managed_basename;

        return $path_to_managed_file;
    }

    /**
     * Manages and optimizes the managed filelist content.
     * @param null|string $task
     * @param string $file_name
     * @return mixed
     */
    function manageFileList($task = null, $file_name = '')
    {
        $path_to_managed_filelist = $this->getPathManagedFileList();
        $managed_filelist = file_get_array($path_to_managed_filelist);

        // Take an action
        switch ($task) {
            case 'append':
                $managed_filelist[] = $file_name;
                break;

            case 'delete':
                if (($key = array_search($file_name, $managed_filelist)) !== false) {
                    unset($managed_filelist[$key]);
                }
                break;

            case 'is_exist':
                if (($key = array_search($file_name, $managed_filelist)) !== false) {
                    return true;
                } else {
                    return false;
                }
                break;
        }

        // Optimize by leaving unique values only
        $managed_filelist_optimized = !empty($managed_filelist) ?
            array_keys(array_flip($managed_filelist)) : array();

        // Save updated filelist
        return file_put_contents_safe($path_to_managed_filelist, implode("\n", $managed_filelist_optimized));
    }

    /**
     * Moves file to managed or restores from the managed.
     * @param null|string $task
     * @param null|string $file_name
     * @return bool
     */
    function manageFile($task = null, $file_name = '')
    {
        // Create the managed directory
        if (!is_dir($this->managed_path) && !@mkdir($this->managed_path)) {
            $this->error_message = 'Cannot create ' . $this->managed_type . ' directory.';
            return false;
        }

        // Is managed directory writeable?
        if (!is_writeable($this->managed_path)) {
            $this->error_message = ucfirst($this->managed_type) . ' directory is not writable.';
            return false;
        }

        // Get path to file in managed
        $path_to_managed_file = $this->getPathManagedFile($file_name);

        // Take an action
        switch ($task) {
            case 'copy':
                // Copy file to managed
                if (is_file($file_name) && copy($file_name, $path_to_managed_file)) {
                    $this->manageFileList('append', $file_name);
                    return true;
                } else {
                    $this->error_message = 'Error copying file, either file does not exist or there are permission problems.';
                }
                break;

            case 'delete':
                // Remove file from managed
                if (is_file($file_name) && file_exists($path_to_managed_file) && unlink($path_to_managed_file)) {
                    $this->manageFileList('delete', $file_name);
                    return true;
                } else {
                    $this->error_message = 'Error removing file, either file does not exist or there are permission problems.';
                }
                break;

            case 'move':
            case 'rename':
                // Move file to managed
                if (is_file($file_name) && rename($file_name, $path_to_managed_file)) {
                    $this->manageFileList('append', $file_name);
                    return true;
                } else {
                    $this->error_message = 'Error renaming file, either file does not exist or there are permission problems.';
                }
                break;

            case 'restore':
                // Restore file from managed
                if (is_file($path_to_managed_file) && rename($path_to_managed_file, $file_name)) {
                    $this->manageFileList('delete', $file_name);
                    return true;
                } else {
                    $this->error_message = 'Error restoring file, either file does not exist or there are permission problems.';
                }
                break;
        }

        return false;
    }

}
