<?php

namespace App\Library;

use App\State;

class Cwis_Defender_Settings
{

    // Defender options
    private $cwsd_options = array();
    private $cwsd_defaults = array(
        'rc'         => 0,
        'asn'        => 0,
        'geo_not'    => 0,
        'geo'        => '',
        'remote'     => 0,
        'report'     => 0,
        'bots'       => '',
        'lists'      => 0,
        'smartwaf'   => 0,
        'antibot'    => 0,
        'antispam'   => 0,
        'bruteforce' => 0,
        'hidefunc'   => 0,
        'ipfilter'   => array(
            'allow' => '',
            'block' => ''
        ),
        'countries_filter' => '',
        'bitmask' => 1,
    );

    /**
     * Initializes settings.
     *
     * @since   4.1.4
     * @access  public
     */
    public function __construct()
    {
        if($encodedOptions = State::cnf('CWIS_DEFENDER')){
            $this->merge($encodedOptions);
        }
    }

    /**
     * Returns an array with Defender options.
     *
     * @since   4.1.4
     * @access  public
     *
     * @return  array
     */
    public function all()
    {
        return $this->cwsd_options;
    }

    /**
     * Returns value of a specific Defender option.
     *
     * @since   4.1.4
     * @access  public
     *
     * @param   string $option
     * @param   mixed $default
     * @return  mixed
     */
    public function get($option = '', $default = null)
    {
        return strlen($option) && isset($this->cwsd_options[$option]) ?
            $this->cwsd_options[$option] : $default;
    }

    /**
     * Merges an array of options with Defender options.
     *
     * @since   4.1.4
     * @access  public
     *
     * @param   array $options
     * @return  void
     */
    public function merge($options = array())
    {
        if (is_array($options)) {
            foreach ($options as $key => $value) {
                if (isset($this->cwsd_defaults[$key])) {
                    $this->cwsd_options[$key] = $value;
                }
            }
        }
    }

    /**
     * Sets Defender options.
     *
     * @since   4.1.4
     * @access  public
     *
     * @param   string $option
     * @param   mixed $value
     * @return  void
     */
    public function set($option = '', $value = null)
    {
        if (strlen($option)) {
            $this->cwsd_options[$option] = $value;
        }
    }

    /**
     * Updates Defender options.
     *
     * @since   4.1.4
     * @access  public
     *
     * @param   array $options
     * @return  array
     */
    public function update($options = array())
    {
        $this->cwsd_options = array_merge($this->all(), (array) $options);
        $this->cwsd_options['bitmask'] = 0;
        foreach($this->cwsd_options as $k => $v) {
            if($v and strpos($k, 'mask') === 0) {
                $this->cwsd_options['bitmask'] += pow(2, (int)str_replace('mask','', $k) - 1);
            }
        }

        State::setCnf('CWIS_DEFENDER', $this->cwsd_options);

        $cwis_defender_guarder = new Cwis_Defender_Guarder();
        $cwis_defender_guarder->save_ipfilter_entries($this->get('ipfilter'));

        return $this->cwsd_options;
    }

}
