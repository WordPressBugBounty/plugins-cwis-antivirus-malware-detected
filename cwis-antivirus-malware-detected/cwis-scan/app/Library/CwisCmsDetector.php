<?php

namespace App\Library;

use App\State;

class CwisCmsDetector
{
    use Definitions;

    // Detected CMS parameters
    var $paths, $types, $versions;
    //
    // Private strings
    var $cms_path, $cms_version;

    /**
     * Use this method as a class constructor.
     * @param mixed $config
     * @param array $dir_list
     */
    function construct($config = null)
    {
        // CMS characteristics
        $this->paths = array();
        $this->types = array();
        $this->versions = array();

        // Instantiate the core classes
        $this->logger = new CwisLogger();
        $this->utilities = new CwisUtilities();

        // Use configuration options
        if (gettype($config) === 'object') {
            $this->logger->setScanPath($config->getScanPath());
        }
    }

    /**
     * Checks the directories list.
     * @param array $dir_list
     */
    function checkDirectories($dir_list = array())
    {
        $this->logger->debugMessage('$cms->checkDirectories()');
        foreach ($dir_list as $dir_packed) {
            $dir = $this->utilities->filenameExpand($dir_packed);
            $this->checkDirectory($dir);
        }
    }

    /**
     * Checks the directory.
     * @param array $dir
     */
    function checkDirectory($dir = '')
    {
        // Pack the path
        $this->cms_path = $this->utilities->filenameShrink($dir);

        if (State::cnf('CWIS_DEBUG') >= 2) {
            $this->logger->debugMessage('CwisCmsDetector("' . $this->cms_path . '")');
        }

        // Cycle through CMS list
        foreach (State::cnf('CWIS_CMS_LIST') ?? [] as $cms_id => $cms_data) {
            if (is_array($cms_data) && isset($cms_data['path'])) {
                $cms_path = $cms_data['path'];
                $cms_regex = isset($cms_data['regex']) ? $cms_data['regex'] : array();

                // Check for CMS in directory "dir" using trigger path "cms_path"
                if ($this->checkCms($dir, $cms_path, $cms_regex)) {
                    $cms_name = isset($cms_data['name']) ? $cms_data['name'] : $cms_id;
                    $this->addCms($cms_name);
                }
            }
        }
    }

    function getDirList($target = '')
    {
        return $this->utilities->recursiveDirectoryScan($target, 1);
    }

    function isCms($name, $version)
    {
        for ($i = 0; $i < count($this->types); $i++) {
            if ((strpos($this->types[$i], $name) !== false) &&
                (strpos($this->versions[$i], $version) !== false)) {
                return true;
            }
        }

        return false;
    }

    function getCmsList()
    {
        return $this->types;
    }

    function getCmsVersions()
    {
        return $this->versions;
    }

    function getCmsNumber()
    {
        return count($this->types);
    }

    function getCmsName($index = 0)
    {
        return $this->types[$index];
    }

    function getCmsPath($index = 0)
    {
        return $this->paths[$index];
    }

    function getCmsVersion($index = 0)
    {
        return $this->versions[$index];
    }

    // --- PRIVATE METHODS ---

    function addCms($type)
    {
        $this->paths[] = $this->cms_path;
        $this->types[] = $type;
        $this->versions[] = $this->cms_version;
    }

    function checkCms($dir, $path = '', $params = array())
    {
        $this->cms_version = '?.?';

        // Check the path to the CMS
        if (false === ($result = file_exists($dir . $path))) {
            return false;
        }

        // Validate CMS params
        if (!is_array($params) || !count($params)) {
            return $result;
        }

        // Process additional parameters
        foreach ($params as $file_name => $regexps) {

            // Filename may not be optional!
            if ($file_name && is_file($dir . $file_name) && is_readable($dir . $file_name)) {
                $content = file_get_contents_safe($dir . $file_name);

                // Convert to standard format (version number MAJOR.MINOR.PATCH)
                if (!is_array($regexps)) {
                    $regexps = array(
                        'MAJOR'		 => null,
                        'MINOR'		 => null,
                        'PATCH'		 => null,
                        'VERSION'	 => $regexps
                    );
                }

                // Check regExps
                $matches = $scheme = array();
                foreach ($regexps as $version_type => $regexp) {
                    if (preg_match('#' . $regexp . '#smi', $content, $matches)) {
                        $scheme[$version_type] = $matches[1];
                    }

                    if (State::cnf('CWIS_DEBUG') >= 2) {
                        $this->logger->debugMessage('checkCms("' . $file_name . '", ' . $version_type . ' = ' .
                            (!empty($matches) ? $matches[1] : '"#' . $regexp . '#smi"') . ')');
                    }
                }

                // No matches, continue...
                if (empty($scheme)) {
                    continue;
                }

                // Build version number as MAJOR.MINOR.PATCH or MAJOR.MINOR.REVISION.PATCH
                if (isset($scheme['VERSION'])) {
                    $cms_version = $scheme['VERSION'];
                } else {
                    $cms_version = (isset($scheme['MAJOR']) ? $scheme['MAJOR'] : 0) . '.'
                        . (isset($scheme['MINOR']) ? $scheme['MINOR'] : 0);
                }

                // Vrsion revision (used in Magento)
                if (isset($scheme['REVISION'])) {
                    $cms_version .= '.' . $scheme['REVISION'];
                }

                // Version patch (DEV-level in Joomla!)
                if (isset($scheme['PATCH'])) {
                    $cms_version .= '.' . $scheme['PATCH'];
                }

                // Version stability and number (optional, as -STABILITYNUMBER)
                if (isset($scheme['STABILITY']) || isset($scheme['NUMBER'])) {
                    $cms_version .= '-'
                        . (isset($scheme['STABILITY']) ? $scheme['STABILITY'] : '')
                        . (isset($scheme['NUMBER']) ? $scheme['NUMBER'] : '');
                }

                // Sanitize number and limit the length
                $cms_version = substr(preg_replace("/[^a-z0-9\.-]+/si", ' ', $cms_version), 0, 21);

                // Check CMS version number for validity
                if (version_compare($cms_version, '0.0.0') > 0) {
                    $this->cms_version = $cms_version;
                    return true;
                }
            }
        }

        return false;
    }

}
