<?php

namespace App\Library;

use App\State;

class CwisResults
{

    /**
     * Holds the last error message.
     * @var string
     */
    var $last_error = '';

    /**
     * All results.
     * @var array
     */
    var $results = array();

    /**
     * Results by name.
     * @var array
     */
    var $result = null;

    /**
     * Result's name.
     * @var string
     */
    var $var_name = '';

    /**
     * Adds a key-value pair to a result entries array.
     * @param mixed $key
     * @param mixed $result
     * @return bool
     */
    function add($key = null, $result = null)
    {
        // Validate name, results array and array key
        if ($this->isValidName($this->var_name) && $this->isValidKey($key)) {
            // Directly adds a result entry directly
            $this->results[$this->var_name][$key] = $result;
        }

        return $this;
    }

    /**
     * Gets all results.
     * @return array
     */
    function all()
    {
        return $this->results;
    }

    /**
     * Builds a valid result from an array with entry data (possible array
     * keys are: 'id', 'name', 'fragment', 'sig', 'stat' and 'crc').
     * @param array $entry_data
     * @return $this
     */
    function buildEntry($entry_data = array())
    {
        $this->result = array();

        // Entry index (or row number of a record)
        if (isset($entry_data['id'])) {
            $this->result['id'] = $entry_data['id'];
        }

        // String entry name
        if (isset($entry_data['name'])) {
            $this->result['name'] = $entry_data['name'];
        }

        // Code fragment (or an array of)
        if (isset($entry_data['fragment'])) {
            $this->result['fragment'] = $entry_data['fragment'];
        }

        // Code fragment line (or an array of)
        if (isset($entry_data['lines'])) {
            $this->result['lines'] = $entry_data['lines'];
        }


        // Signature ID (CRC)
        if (isset($entry_data['sig'])) {
            $this->result['sig'] = $entry_data['sig'];
        }

        // Pack entry stat (size, ctime and mtime)
        if (isset($entry_data['stat'])) {
            $entry_stat = $entry_data['stat'];
            if (is_array($entry_stat)) {
                $entry_stat = pack("I3", isset($entry_stat['size']) ? (int) $entry_stat['size'] : 0,
                    isset($entry_stat['ctime']) ? (int) $entry_stat['ctime'] : 0,
                    isset($entry_stat['mtime']) ? (int) $entry_stat['mtime'] : 0);
            }

            $this->result['stat'] = $entry_stat;
        }

        // Pack entry CRC (SHA1 hash)
        if (isset($entry_data['crc'])) {
            $entry_crc = $entry_data['crc'];

            // Pack the 40-character hexadecimal number or save 20 bytes
            $this->result['crc'] = strlen($entry_crc) === 40 && ctype_xdigit($entry_crc) ?
                pack("H*", $entry_crc) : substr($entry_crc, 0, 20);
        }

        return $this;
    }

    /**
     * Copies a key-value pair to another result entries array.
     * @param string $var_name_to
     * @param mixed $key_from
     * @param mixed $key_to
     * @return bool
     */
    function copyTo($var_name_to = '', $key_from = null, $key_to = null)
    {
        // Validate a second results name
        if ($this->isValidName($var_name_to)) {

            // Get a result entry value by key
            $result = $this->find($key_from);
            if (null !== $result) {

                // Save an original var_name and select another one
                $var_name_from = $this->var_name;
                $this->select($var_name_to);

                // Add a new result entry directly
                if (null !== $key_to && $this->isValidKey($key_to)) {
                    $this->add($key_to, $result);
                } else {
                    $this->push($result);
                }

                // Restore an original var_name
                $this->select($var_name_from);
                return true;
            }
        }

        return false;
    }

    /**
     * Counts the results selected by var name.
     * @return array
     */
    function count()
    {
        return count($this->get());
    }

    /**
     * Deletes a key-value pair from a result entries array.
     * @param int|string $key
     * @return bool
     */
    function delete($key = null)
    {
        // Validate name, results array and array key
        if ($this->isValidName($this->var_name) && $this->isValidKey($key)) {
            // Directly deletes a result entry directly
            unset($this->results[$this->var_name][$key]);
        }

        return $this;
    }

    /**
     * Converts string entry index (looks as VAR_NAME[KEY]) to VAR_NAME and KEY or backward.
     * @param string $entry_index
     * @param string $var_name
     * @param string $key
     * @return bool
     */
    function convertEntryIndex(&$entry_index, &$var_name, &$key)
    {
        $var_name = (string) $var_name;
        $key = (string) $key;

        // Extract entry index
        if ($entry_index) {
            $bracket_pos = strpos($entry_index, '[');
            if (false !== $bracket_pos) {
                $var_name = substr($entry_index, 0, $bracket_pos);
                $key = substr($entry_index, $bracket_pos + 1, -1);
                return true;
            }
        } else {
            // Build entry index
            $entry_index = $var_name . '[' . $key . ']';
            return true;
        }

        return false;
    }

    /**
     * Set empty results with report vars.
     */
    function emptyResults()
    {
        $this->results = array();
        foreach (State::cnf('CWIS_REPORT_VARS') as $report_vars) {
            foreach ($report_vars as $var => $name) {
                if (!$var || !$name) {
                    continue;
                }

                // Set the result
                $this->results[$var] = array();
            }
        }
    }

    /**
     * Returns an array of entries filtered by key ('id', 'name', 'fragment', 'sig', 'stat' or 'crc').
     * @param string $entry_key
     * @return type
     */
    function filterByKey($entry_key = '')
    {
        $entries = array();

        // Filter result entries by key
        foreach ($this->results as $var_name => $array) {
            if (!$entry_key || !is_array($array)) {
                continue;
            }

            // Filter entries by key
            foreach ($array as $key => $entry_data) {
                if (is_array($entry_data) && array_key_exists($entry_key, $entry_data)) {
                    $entry_index = ''; // initialize string entry index (looks as VAR_NAME[KEY])
                    if ($this->convertEntryIndex($entry_index, $var_name, $key)) {
                        $entries[$entry_index] = $entry_data[$entry_key];
                    }
                }
            }
        }

        return $entries;
    }

    /**
     * Gets the result selected by var name and key or NULL on error.
     * @param int|string $key
     * @return null|array
     */
    function find($key = null)
    {
        // Validate name, results array and array key
        if ($this->isValidName($this->var_name) && $this->isValidKey($key) &&
            isset($this->results[$this->var_name][$key])) {
            // Directly returns a result entry
            return $this->results[$this->var_name][$key];
        }

        return null;
    }

    /**
     * Gets the results selected by var name.
     * @return array
     */
    function get()
    {
        // Validate name and result
        if ($this->isValidName($this->var_name)) {
            return $this->results[$this->var_name];
        }

        return array();
    }

    /**
     * Returns the last error message.
     * @return string
     */
    function getLastError()
    {
        return $this->last_error;
    }

    /**
     * Checks for duplicate result entries.
     * @param mixed $result
     * @return bool
     */
    function isUnique($result = null)
    {
        if (null === $result) {
            $result = $this->result;
        }

        if (!empty($result)) {
            // Prevent duplicate result entries
            foreach ($this->get() as $result_value) {
                if ($result_value == $result) {
                    return false;
                }
            }
        }

        return true;
    }

    /**
     * Validates results variable name and result.
     * @param string $var_name
     * @return bool
     */
    function isValidName($var_name = '')
    {
        // Process string names only
        if (!is_string($var_name) || !strlen($var_name)) {
            $this->last_error = 'Incorrect result name type "' . gettype($var_name) . '".';
            return false;
        }

        // Process previously defined variables only
        if (!isset($this->results[$var_name])) {
            $this->last_error = 'Undefined results by name "' . $var_name . '".';
            return false;
        }

        // Process result arrays only
        if (!is_array($this->results[$var_name])) {
            $this->last_error = 'Incorrect results by name "' . $var_name . '".';
            return false;
        }

        return true;
    }

    /**
     * Validates result key type.
     * @param int|string $key
     * @return bool
     */
    function isValidKey($key = null)
    {
        // Validate as an array key
        if (is_integer($key) || is_string($key)) {
            return true;
        }

        $this->last_error = 'Incorrect result key type "' . gettype($key) . '".';
        return false;
    }

    /**
     * Merges scan results (raw report data)
     * @param mixed $config
     * @param array $results
     * @return array
     */
    function mergeScanResults($results)
    {
        if (empty($this->results)) {
            $this->emptyResults();
        }

        // Merge scan results by var name (raw report data)
        foreach ($this->results as $var_name => $array) {
            if ($var_name && isset($results[$var_name]) && is_array($results[$var_name])) {
                $this->results[$var_name] = array_merge($this->results[$var_name], $results[$var_name]);
            }
        }

        return $this->results;
    }

    /**
     * Moves a key-value pair to another result entries array.
     * @param string $var_name_to
     * @param mixed $key_from
     * @param mixed $key_to
     * @return bool
     */
    function moveTo($var_name_to = '', $key_from = null, $key_to = null)
    {
        // Validate a second results name
        if ($this->copyTo($var_name_to, $key_from, $key_to)) {

            // Delete a result entry by key
            if (in_array($var_name_to, ['Heuristic'])) {
                $this->delete($key_from);
            }

            return true;
        }

        return false;
    }

    /**
     * Removes duplicate result entries.
     * @param string $var_name
     * @param bool $strict
     * @return $this
     */
    function unique($var_name = '', $strict = false)
    {
        // Validate results name
        if ($this->isValidName($var_name)) {
            if ($strict) {
                // Strict object serializing
                $results = array_map("serialize", $this->results[$var_name]);
            } else {
                // Optimized method
                $results = array();
                foreach ($this->results[$var_name] as $key => $value) {

                    // Array format support
                    if (is_array($value)) {
                        $file_name = isset($value['name']) ? $value['name'] : 'N';
                        $file_fragment = isset($value['fragment']) ? serialize($value['fragment']) : 'F';
                    } else {
                        $file_name = 'N';
                        $file_fragment = 'F';
                    }

                    // Add a compact result
                    $results[$key] = '_' . $file_name . $file_fragment;
                }
            }

            // Get keys difference (duplicates)
            $key_duplicates = array_diff(array_keys($results), array_flip($results));
            foreach ($key_duplicates as $key) {
                unset($this->results[$var_name][$key]);
            }
        }

        return $this;
    }

    /**
     * Optimizes results array values.
     * @param string $var_name
     */
    function optimize($var_name = '')
    {
        // Validate results name
        if ($this->isValidName($var_name)) {
            $this->results[$var_name] = array_values($this->results[$var_name]);
        }

        return $this;
    }

    /**
     * Pushs the result.
     * @param mixed $result
     * @return $this
     */
    function push($result = null)
    {
        // Validate and prevent duplicate result entries
        if ($this->isValidName($this->var_name) && $this->isUnique($result)) {

            // Push result
            array_push($this->results[$this->var_name], (null !== $result ? $result : $this->result));
        }

        return $this;
    }

    /**
     * Resets the last error message.
     * @return $this
     */
    function resetLastError()
    {
        $this->last_error = '';

        return $this;
    }

    /**
     * Selects current results var name, optionally resets result entries.
     * @param string $var_name
     * @param bool $reset
     * @return bool
     */
    function select($var_name = '', $reset = false)
    {
        $this->var_name = (string) $var_name;

        // Reset result entries (optionally)
        if ($reset && $this->var_name) {
            $this->results[$this->var_name] = array();
        }

        return $this;
    }

    /**
     * Sets the results selected by var name.
     * @param array $results
     * @return $this
     */
    function set($results = array())
    {
        // Validate name and set result
        if (true === $this->isValidName($this->var_name)) {
            $this->results[$this->var_name] = $results;
        }

        return $this;
    }

    /**
     * Sets the results.
     * @param array $results
     * @return $this
     */
    function setResults(& $results)
    {
        // Set result
        if (is_array($results)) {
            $this->results = & $results;
        } elseif (isset($results->results)) {
            $this->results = & $results->results;
        } else {
            header('HTTP/1.0 500 Internal Server Error');
            die('Cannot set the results!');
        }

        return $this;
    }

    /**
     * Removes blank, empty or commented lines from results.
     * @return $this
     */
    function stripComments()
    {
        $ml_comment = false;
        foreach ($this->get() as $key => $result_value) {
            $result = trim($result_value);

            // Blank or empty line
            if (!$result) {
                $this->delete($key);
                continue;
            }

            // Analyse first character
            $first_char = $result[0];

            // PHP multi line comment's opening tag
            if (!$ml_comment && $first_char === '/' && preg_match("#^/\*#", $result)) {
                $ml_comment = true;
            }

            // PHP multi line comment's closing tag
            if ($ml_comment && preg_match("#\*/$#", $result)) {
                $ml_comment = false;
                $this->delete($key);
                continue;
            }

            // Remove multi-line or single line comment
            if ($ml_comment || $first_char === '#' || $first_char === ';') {
                $this->delete($key);
            }
        }

        return $this;
    }

    /**
     * Prepends the result.
     * @param mixed $result
     * @return $this
     */
    function unshift($result = null)
    {
        // Validate and prevent duplicate result entries
        if ($this->isValidName($this->var_name) && $this->isUnique($result)) {

            // Prepend result
            array_unshift($this->results[$this->var_name], (null !== $result ? $result : $this->result));
        }

        return $this;
    }

    /**
     * Add parameter
     * @param int|string $key
     * @param int|string $param
     * @param int|string $val
     * @return bool
     */
    function add_param($key, $param, $val)
    {
        // Validate name, results array and array key
        if ($this->isValidName($this->var_name) && $this->isValidKey($key)) {
            //add quarantine parameter
            $this->results[$this->var_name][$key][$param]=$val;
            if(isset($this->results[$this->var_name][$key][$param])) {
                return true;
            }
        }
        return false;
    }

    /**
     * Delete parameter
     * @param int|string $key
     * @param int|string $param
     * @return bool
     */
    function delete_param($key, $param)
    {
        // Validate name, results array and array key
        if ($this->isValidName($this->var_name) && $this->isValidKey($key)) {
            //add quarantine parameter
            unset($this->results[$this->var_name][$key][$param]);
            if(!array_key_exists($param,$this->results[$this->var_name][$key])) {
                return true;
            }
        }
        return false;
    }

    function getIdByFilename($file_name = '')
    {
        if (!is_array($this->results)) {
            return false;
        }

        // Analyse results
        foreach ($this->results as $var_name => $scan_results_list) {
            if (!is_array($scan_results_list)) {
                continue;
            }

            foreach ($scan_results_list as $entry_details) {
                $entry_name_packed = null;

                // Validate and unpack entry data
                if ($var_name === 'EntryDetails') {
                    $entry_separator_pos = strpos($entry_details, "\t");
                    if (false === $entry_separator_pos) {
                        $entry_name_packed = $entry_details;
                    } else {
                        $entry_name_packed = substr($entry_details, 0, $entry_separator_pos);
                    }
                }
                // Array format support
                elseif (isset($entry_details['name'])) {
                    $entry_name_packed = $entry_details['name'];
                }

                // Unpack filename or PDO entry
                $entry_name_unpacked = $this->utilities->filenameExpand($entry_name_packed);
                if ($file_name === $entry_name_unpacked) {
                    return $entry_details;
                }
            }
        }

        return false;
    }

}
