<?php

namespace App\Library;

use App\State;

class CwisTranslations
{

    /**
     * Known languages and they plural rules in CLDR format
     * http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html
     */
    var $langs = array(
        'en' => array(
            'name'	 => 'English',
            'rules'	 => array(
                'one'	 => '$n == 1', // 1
                'other'	 => 'everything else' // 0, 2-999; 1.2, 2.07...
            )
        ),
    );
    //
    // Constants prefix
    var $prefix = '_CWIS_';

    /**
     * Validates language selected by user.
     * @param string $lang
     * @return string
     */
    function validateLang($lang = 'en')
    {
        if (strlen($lang) >= 2 && isset($this->langs[$lang])) {
            return $lang;
        }

        return 'en';
    }

    // --- PUBLIC METHODS ---

    /**
     * Defines translation strings as constants.
     * @param string $lang
     */
    function defineConstants($lang = 'en')
    {
        $translations = $this->read($lang);
        //State::setTranslations($translations);
        //TODO remove
        if ($translations && is_array($translations)) {
            foreach ($translations as $key => $value) {
                $constant = $this->prefix . $key;
                if (!defined($constant)) {
                    define($constant, $value);
                }
            }

            unset($translations);
        }
    }

    /**
     * Replaces defined translation constant names with they values.
     * @param string $string
     */
    function replaceConstants($string = '')
    {
        $matches = array();
        if (preg_match_all('/' . $this->prefix . '\w+/', $string, $matches)) {
            foreach ($matches[0] as $match) {
                if (defined($match)) {
                    $string = str_replace($match, constant($match), $string);
                }
            }
        }

        // Remove control characters from string
        return preg_replace('/[\x00-\x1F\x7F]+(?:\s+)/', ' ', $string);
    }

    /**
     * Pluralizes using CLDR rules and sprintf (plural categories taken from expression).
     * @param string $expression
     * @param integer|float $n
     * @param string $lang
     * @return string
     */
    function pluralize($expression = '', $n = 0, $lang = null)
    {
        $lang = $this->validateLang($lang);

        $plural_forms = explode('|', $expression);

        // Handle language plural rules
        if (!empty($this->langs[$lang]['rules'])) {
            $i = 0;
            foreach ($this->langs[$lang]['rules'] as $rule) {
                if (false !== strpos($rule, 'everything') ||
                    false !== strpos($rule, 'else') ||
                    true === eval('return (' . $rule . ');')) {
                    return sprintf($plural_forms[$i], $n);
                }

                $i++;
            }
        }

        // Return the first plural form
        return sprintf($plural_forms[0], $n);
    }

    /**
     * Reads translations from a "cwis-lang" file.
     * @param string $lang
     * @return array
     */
    function read($lang = null)
    {
        $language = $this->validateLang($lang);
        $translations = State::loadTranslations($language);

        // Define current language code
        $translations['LANGUAGE_CODE'] = $lang;

        return $translations;
    }

}
