<?php

namespace App\Library;

class CwisSecSecuring
{

    // securing functions in if-clause
    // list not used, all if clause dependencies detected anyway
    static $F_SECURING_BOOL = array(
        'is_bool',
        'is_double',
        'is_float',
        'is_real',
        'is_long',
        'is_int',
        'is_integer',
        'is_null',
        'is_numeric',
        'is_finite',
        'is_infinite',
        'ctype_alnum',
        'ctype_alpha',
        'ctype_cntrl',
        'ctype_digit',
        'ctype_xdigit',
        'ctype_upper',
        'ctype_lower',
        'ctype_space',
        'in_array',
        'preg_match',
        'preg_match_all',
        'fnmatch',
        'ereg',
        'eregi'
    );
    // securing functions for every vulnerability
    static $F_SECURING_STRING = array(
        'intval',
        'floatval',
        'doubleval',
        'filter_input',
        'urlencode',
        'rawurlencode',
        'round',
        'floor',
        'strlen',
        'strrpos',
        'strpos',
        'strftime',
        'strtotime',
        'md5',
        'md5_file',
        'sha1',
        'sha1_file',
        'crypt',
        'crc32',
        'hash',
        'mhash',
        'hash_hmac',
        'password_hash',
        'mcrypt_encrypt',
        'mcrypt_generic',
        'base64_encode',
        'ord',
        'sizeof',
        'count',
        'bin2hex',
        'levenshtein',
        'abs',
        'bindec',
        'decbin',
        'dechex',
        'decoct',
        'hexdec',
        'rand',
        'max',
        'min',
        'metaphone',
        'tempnam',
        'soundex',
        'money_format',
        'number_format',
        'date_format',
        'filetype',
        'nl_langinfo',
        'bzcompress',
        'convert_uuencode',
        'gzdeflate',
        'gzencode',
        'gzcompress',
        'http_build_query',
        'lzf_compress',
        'zlib_encode',
        'imap_binary',
        'iconv_mime_encode',
        'bson_encode',
        'sqlite_udf_encode_binary',
        'session_name',
        'readlink',
        'getservbyport',
        'getprotobynumber',
        'gethostname',
        'gethostbynamel',
        'gethostbyname',
    );
    // functions that insecures the string again
    static $F_INSECURING_STRING = array(
        'base64_decode',
        'htmlspecialchars_decode',
        'html_entity_decode',
        'bzdecompress',
        'chr',
        'convert_uudecode',
        'gzdecode',
        'gzinflate',
        'gzuncompress',
        'lzf_decompress',
        'rawurldecode',
        'urldecode',
        'zlib_decode',
        'imap_base64',
        'imap_utf7_decode',
        'imap_mime_header_decode',
        'iconv_mime_decode',
        'iconv_mime_decode_headers',
        'hex2bin',
        'quoted_printable_decode',
        'imap_qprint',
        'mb_decode_mimeheader',
        'bson_decode',
        'sqlite_udf_decode_binary',
        'utf8_decode',
        'recode_string',
        'recode'
    );
    // securing functions for XSS
    static $F_SECURING_XSS = array(
        'esc_attr',
        'esc_html',
        'esc_js',
        'esc_textarea',
        'esc_url',
        'esc_url_raw',
        'highlight_string',
        'htmlentities',
        'htmlspecialchars',
        'sanitize_email',
        'sanitize_file_name',
        'sanitize_html_class',
        'sanitize_key',
        'sanitize_meta',
        'sanitize_option',
        'sanitize_text_field',
        'sanitize_textarea_field',
        'sanitize_title',
        'wp_filter_nohtml_kses',
        'wp_filter_post_kses',
        'wp_kses',
        'wp_parse_args'
    );
    // securing functions for SQLi
    static $F_SECURING_SQL = array(
        'addslashes',
        'dbx_escape_string',
        'db2_escape_string',
        'ingres_escape_string',
        'maxdb_escape_string',
        'maxdb_real_escape_string',
        'mysql_escape_string',
        'mysql_real_escape_string',
        'mysqli_escape_string',
        'mysqli_real_escape_string',
        'pg_escape_string',
        'pg_escape_bytea',
        'sqlite_escape_string',
        'sqlite_udf_encode_binary',
        'cubrid_real_escape_string',
    );
    // securing functions for RCE with e-modifier in preg_**
    static $F_SECURING_PREG = array(
        'preg_quote'
    );
    // securing functions for file handling
    static $F_SECURING_FILE = array(
        'basename',
        'dirname',
        'pathinfo'
    );
    // securing functions for OS command execution
    static $F_SECURING_SYSTEM = array(
        'escapeshellarg',
        'escapeshellcmd'
    );
    // securing XPath injection
    static $F_SECURING_XPATH = array(
        'addslashes'
    );
    // securing LDAP injection
    static $F_SECURING_LDAP = array(
    );

    // securing functions that work only when embedded in quotes
    //static $F_QUOTE_ANALYSIS = $F_SECURING_SQL;
    //
    // returns property value by its name
    static function get_prop($property)
    {
        if (is_string($property) && isset(CwisSecSecuring::${$property})) {
            $property = self::${$property};
        }
        return $property;
    }

    // all specific securings (formely $F_SECURES_ALL)
    static function secures_all()
    {
        return array_merge(
            self::$F_SECURING_XSS, self::$F_SECURING_SQL, self::$F_SECURING_PREG, self::$F_SECURING_FILE,
            self::$F_SECURING_SYSTEM, self::$F_SECURING_XPATH
        );
    }

}
