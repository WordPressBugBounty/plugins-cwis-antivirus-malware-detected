<?php

namespace App\Library;

use App\State;

class CwisDirsCreator
{

    // Last error message.
    var $error_message = '';
    //
    // File path hash (results subdirectory name).
    var $file_path_hash = '';
    //
    // Default contents of index files.
    var $index_files_contents = array(
        '.htaccess'	 => "Order Deny,Allow\nDeny from all",
        'index.html' => "<!DOCTYPE html><title></title>",
        'index.php'	 => "<?php\n// Silence is golden"
    );

    /**
     * Creates an empty directory index file.
     * @param string $directory
     * @param string $filename
     * @param null|string $contents
     */
    function createBlankDirIndex($directory = '', $filename = 'index.html', $contents = null)
    {
        if (!is_file($directory . DIRECTORY_SEPARATOR . $filename) && is_dir($directory)) {
            if (null === $contents && isset($this->index_files_contents[$filename])) {
                $contents = $this->index_files_contents[$filename];
            }

            // Put directory index file's content
            file_put_contents_safe($directory . DIRECTORY_SEPARATOR . $filename, $contents);
        }
    }

    /**
     * Creates temporary files and/or scan results directory.
     * @return bool
     */
    function createResultsDir()
    {
        // Create temporary files directory
        if (!is_dir(State::tempPath()) && !@mkdir(State::tempPath())) {
            $this->error_message = 'Cannot create temporary files directory ::' . State::tempPath();
            return false;
        }

        // Create scan results directory
        if (!is_dir(State::resultsPath()) && !@mkdir(State::resultsPath())) {
            $this->error_message = 'Cannot create scan results directory :: ' . State::resultsPath();
            return false;
        }

        // If work and temp dirs is not identical...
        if (State::workPath() !== State::tempPath()) {

            // Create quarantine directory
            if (!is_dir(State::quarantinePath()) && @mkdir(State::quarantinePath())) {
                $this->createBlankDirIndex(State::quarantinePath());
            }

            // Create lists directory
            if (!is_dir(State::listsPath()) && @mkdir(State::listsPath())) {
                $this->createBlankDirIndex(State::listsPath());
            }

            // Create scheduler tasks directory
            if (!is_dir(State::tasksPath()) && @mkdir(State::tasksPath())) {
                $this->createBlankDirIndex(State::tasksPath());
            }

            // Create assets directory
            if (!is_dir(State::assetsPath()) && @mkdir(State::assetsPath())) {
                $this->createBlankDirIndex(State::assetsPath());
            }

            // Create all types of known index files
            foreach ($this->index_files_contents as $filename => $contents) {
                $this->createBlankDirIndex(State::tempPath(), $filename, $contents);
            }
        } else {
            // Create only blank index.html
            $this->createBlankDirIndex(State::tempPath());
        }

        // Create an empty index file in results directory
        $this->createBlankDirIndex(State::resultsPath());

        // Create whitelisted directory
        if (State::cwisDebug()) {
            if (!is_dir(State::whiteFilePath()) && @mkdir(State::whiteFilePath())) {
                $this->createBlankDirIndex(State::whiteFilePath());
            }
        }

        return true;
    }

    /**
     * Creates scan results subdirectory (using path's MD5 hash).
     * @string $subdirectory
     * @return bool
     */
    function createResultsSubdir()
    {
        // Create scan results directory (if not exists)
        if (!is_dir(State::resultsPath()) && !$this->createResultsDir()) {
            return false;
        }

        // Create a subdirectory (by path hash)
        if ($this->file_path_hash) {
            $path_to_subdirectory = $this->getPathToResultsSubdir();

            if (!is_dir($path_to_subdirectory) && !@mkdir($path_to_subdirectory)) {
                $this->error_message = 'Cannot create scan results subdirectory.';
                return false;
            }

            // Protect results subdirectory with an empty index file
            $this->createBlankDirIndex($path_to_subdirectory);
        }
        return true;
    }

    /**
     * Generates scan path's hash (MD5-based)
     * @param string $scan_path
     * @return string
     */
    function generateFilePathHash($scan_path = '')
    {
        return md5('PREFIX|' . $scan_path . '|SUFFIX');
    }

    /**
     * Returns last error message.
     * @return string
     */
    function getLastError()
    {
        return $this->error_message;
    }

    /**
     * Returns path to scan results subdirectory (using path's MD5 hash).
     * @return string
     */
    function getPathToResultsSubdir()
    {
      return State::resultsPath();
        //return $this->file_path_hash ? State::resultsPath() . DIRECTORY_SEPARATOR . $this->file_path_hash : State::resultsPath();
    }

    /**
     * Builds absolute path to results file (used for DEBUG, PRESCAN, PROGRESS, QUEUE...).
     * @param string $basename
     * @param string $extension
     * @return string
     */
    function getResultsFilePath($basename = '', $extension = '.dat')
    {
        // Filter file basename parameter
        $basename_filtered = strtoupper(preg_replace("#\W+#s", '', $basename));

        // Filter file extension parameter
        $extension_filtered = preg_replace("#[^\.\w\_\-]+#s", '', $extension);

        // Concate a filtered filename
        $filename_filtered = 'CWIS-' . $basename_filtered . $extension_filtered;

        // Return an absolute path to the file
        return $this->getPathToResultsSubdir() . DIRECTORY_SEPARATOR . $filename_filtered;
    }

    /**
     * Sets scan path's hash (MD5-based) used as name of results subdirectory.
     * @param string $scan_path
     */
    function setFilePathHash($scan_path = '')
    {
        $this->file_path_hash = $scan_path ? $this->generateFilePathHash($scan_path) : '';
    }

}
