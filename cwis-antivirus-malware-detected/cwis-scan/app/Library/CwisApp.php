<?php

namespace App\Library;

use App\State;

class CwisApp
{
    use Definitions;

    public $progress_data;

    public $prescan;

    /**
     * Use this method as a class constructor.
     * @param integer $debug_mode
     * @param null|string $scan_path_default
     */
    function construct($debug_mode = 0, $scan_path_default = null, $params = []) {
        // Firstly, define i18n constants.
        $this->constructTranslations();

        // Secondly, instantiate classes.
        $this->constructClassesInstances();

        // Make results directory.
        $this->utilities->createResultsDirectory();

        // Parse configuration options.
        $this->config->getPostedOptions($params);

    }

    /**
     * Class constructor for the child classes.
     * @param CwisApp $app Reference to parent
     */
    function constructApp(&$app)
    {
        // Gets the properties of the app
        $vars = array_keys(get_object_vars($app));

        // Pointers to the properties
        foreach ($vars as $prop) {
            $this->{$prop} = & $app->{$prop};
        }
    }

    function constructAuth()
    {
        // CLI support
        if (State::isCli()) {
            State::setCnf('license', 'Premium');
            return null;
        }

        // Undefined queue?
        if (null === $this->queue) {
            $this->queue = new CwisQueue();
            throw new \Exception("Undefined CwisQueue, can't set license type.", 403);
        }

        // Get path to the license file
        $utilities = new CwisUtilities();
        if(State::cnf('CWIS_PLATFORM_TYPE') == 'cpanel') {
            $utilities->setScanPath($this->config->getScanPath());
        }
        $license_filepath = $utilities->defineFilePath('license');

        // Check a license key and/or local key
        $results = $this->licensing->getAuthCheckResults($license_filepath);
        $this->queue->setUserData($results);

        // Display error as system message
        if (isset($results['error']) && $results['error']) {
            $this->queue->addError($results['error']);
        }
        // Set license type
        elseif (isset($results['license']) && $this->queue->validUserData()) {
            if(in_array($results['license'], ['Free', 'Trial', 'Professional', 'Premium', 'Business'])){
                State::setCnf('license', $results['license']);
            }
        } else {
            State::setCnf('license', '');
        }
        $this->config->validateScanSettings();
    }

    function constructClassesInstances()
    {
        // Instantiate main classes
        $this->benchmark = new CwisBenchmark();
        $this->licensing = new CwisLicensing();
        $this->logger = new CwisLogger();
        $this->progress = new CwisProgress();
        //$this->response = new CwisResponse();
        $this->utilities = new CwisUtilities();

        // Initialize configuration
        $this->config = new CwisConfig();

        // Initialize progress queue object
        $this->queue = new CwisQueue();
    }

    function constructTranslations()
    {
        // Scanner language (english by default)
        $scan_lang = 'en';
        // Initialize translations constants
        $this->translations = new CwisTranslations();
        $this->translations->defineConstants($scan_lang);
    }

    function initScanCoreMethods()
    {
        if (!empty($this->prescan)) {
            return false;
        }

        $this->prescan = new CwisPrescan();

        return true;
    }

    function initScannerMethods()
    {
        if (!empty($this->scanner)) {
            return false;
        }

        // Initialize scanner
        $this->scanner = new CwisScanner();
        $this->scanner->construct($this, $this->progress->results);

        // Preload ignored files
        $this->scanner->loadIgnoreLists();

        return true;
    }

    function initSchedulerMethods() {
        return true;
    }

    // --- Progress data manipulations ---

    function initProgressData(&$config)
    {
        ///////////////////////////////////////////////////////////////
        // 2. Create the config file, as a plain-file storage (if not exists)
        // 3. Load text config file and get queue pointer (if exists)
        $this->utilities->setScanPath($config->getScanPath());

        // Remove old DEBUG and SCANLOG files
        if (!State::cwisDebug() && !State::cnf('license')) {
            $this->removeDebugScanlogFiles();
        }

        // Reload in active modes "type 1/2/3", only if a prescan file isn't exists (triggers on fatal errors)
        if ($config->scan_type >= 1 && (!$this->queue->isPrescanFinished() && !$this->prescan->isExists())) {

            // Restarting a full scan
            $this->queue->addMessage(State::msg('_CWIS_MESSAGE_RESTARTING_FULL_SCAN'));

            // Create progress data object and save it (update time taken)
            $this->progress_data = $this->progress->save();
            $config->scan_type = 1;

            // Delete old DEBUG/QUEUE/SCANLOG files
            $this->removeDebugScanlogFiles();
            $this->removeQueueVolumesFiles();

            // Log Scan:Reloaded event
            $this->logger->debugMemoryUsage('--- Scan:Reloaded ---');
            error_log("CWIS " . State::version() . " | Scan:Reloaded");
        }

        // Restart in mode "type 3" or create the progress file, if not exists
        if ($config->scan_type === 3 || ($config->scan_type <= 1 && !$this->progress->isExists())) {

            // Reset and prepare for full rescan
            if ($this->config->scan_type === 3) {
                $this->prescan->delete();
                $this->queue->resetScanProgress($full_rescan = true);
                $this->queue->addMessage(State::msg('_CWIS_MESSAGE_RUNNING_FULL_RESCAN'));
            } else {
                // Running a full system scan
                $this->queue->addMessage(State::msg('_CWIS_MESSAGE_RUNNING_FULL_SCAN'));
            }

            // Create progress data object without saving
            $this->progress_data = $this->progress->createData();

            if ($config->scan_type > 0) {

                // Delete old DEBUG/QUEUE/SCANLOG files
                $this->removeDebugScanlogFiles();
                $this->removeQueueVolumesFiles();

                // Log Scan:Started event
                $event = $config->scan_type === 3 ? 'Restarted' : 'Started';
                $this->logger->debugMemoryUsage('--- Scan:' . $event . ' ---');
                //error_log('CWIS ' . CWIS_VERSION . ' | Scan:' . $event);
            }
        } else {

            // Restore progress data object
            $this->progress_data = $this->progress->load($config->scan_type === 0);
            if (!$this->progress_data) {

                // Delete prescan and progress data (eg "reload")
                $this->prescan->delete();
                $this->progress->delete();

                // Delete old DEBUG/QUEUE/SCANLOG files
                $this->removeDebugScanlogFiles();
                $this->removeQueueVolumesFiles();

                // Log Scan:Reloaded event
                $this->logger->debugMemoryUsage('--- Scan:Reloaded ---');
                error_log("CWIS " . State::version() . " | Scan:Reloaded");
                $this->response->jsonError("The progress data is corrupted.");
            } else
                // Start a new rescan (only if previous rescan is finished)
                if ($config->scan_type === 2 && $this->queue->isFileScanFinished()) {

                    // Reset and prepare for quick rescan
                    $this->queue->resetScanProgress($full_rescan = false);
                    $this->queue->addMessage(State::msg('_CWIS_MESSAGE_RUNNING_QUICK_RESCAN'));

                    // Log Rescan:Started event
                    $this->logger->debugMemoryUsage('--- Rescan:Started ---');
                    //error_log('CWIS ' . CWIS_VERSION . ' | Rescan:Started');
                }
        }

        if (!$this->progress_data) {
            $this->response->jsonError("Cannot continue, check permissions.");
        }
    }

    function removeDebugScanlogFiles()
    {
        // Delete old DEBUG file (if exists)
        $debug_filepath = $this->utilities->defineFilePath('debug');
        if (is_file($debug_filepath)) {
            unlink($debug_filepath);
        }

        // Delete old SCANLOG file (if exists)
        $scanlog_filepath = $this->utilities->defineFilePath('scanlog');
        if (is_file($scanlog_filepath)) {
            unlink($scanlog_filepath);
        }

        // Delete old SCANSPEED file (if exists)
        $scanspeed_filepath = $this->utilities->defineFilePath('scanspeed');
        if (is_file($scanspeed_filepath)) {
            unlink($scanspeed_filepath);
        }
    }

    function removeQueueVolumesFiles()
    {

        // Remove old QUEUE files (volumes)
        for ($volume_index = 0; $volume_index < 1000; $volume_index++) {
            $queue_filepath = $this->utilities->defineFilePath('queue' . ($volume_index ? $volume_index : ''));
            if (is_file($queue_filepath)) {
                unlink($queue_filepath);
            }
        }
    }

    /**
     * Selects progress data from different scan paths.
     * @param string $scan_path_original
     * @return bool
     */
    function selectProgressData($scan_path_original = '')
    {
        $scan_paths = $this->utilities->splitScanPath($scan_path_original);
        if (count($scan_paths) <= 1) {
            if (($scan_path = reset($scan_paths))) { // resolve scan path
                $this->config->setScanPath($scan_path, $realpath = true);
            }
            return false; // exit
        }

        // Shuffle scan paths?
        if ($this->config->scan_shuffle) {
            shuffle($scan_paths);
        }

        // Select the scan path
        foreach ($scan_paths as $scan_path) {
            // Init config and queue
            $config = $this->config;
            $this->queue = new CwisQueue();

            // Set scan path, update to the real path
            $config->setScanPath($scan_path, $realpath = true);
            $scan_path_real = $config->getScanPath();

            // Init the progress data
            $this->progress->construct($config, $this->queue, $this->benchmark);

            // Create, update or load the progress data
            if ($this->config->scan_type > 1) {
                $this->initScanCoreMethods();
                $this->prescan->construct($config, $this->queue);
                $this->logger->setScanPath($scan_path_real);
                $this->initProgressData($config);
                $this->progress->save();
            } else {
                // Break the loop if scan is not finished
                $this->progress_data = $this->progress->load();
                if (!$this->progress->queue->isAllFinished()) {
                    $this->config->setScanPath($scan_path_real);
                    break;
                }
            }
        }

        return true;
    }

    function filterScanResults()
    {
        if (strlen(trim($this->config->filter)) > 0) {
            // Match regular expression
            $pattern = '~(' . $this->config->filter . ')~u';

            // Filter progress data
            foreach ($this->progress->results as $var_name => $array) {
                foreach ($array as $key => $entry_data) {
                    if (!is_array($entry_data)) {
                        continue;
                    }

                    // Match literal or regular expression?
                    $subject = $entry_data['name'] . PHP_EOL . $entry_data['fragment'];
                    $is_matched = $this->config->filter_exp ?
                        @preg_match($pattern, $subject) : (false !== stripos($subject, $this->config->filter));

                    // Inverse matches (exclude)?
                    if (($this->config->filter_inv && $is_matched) || (!$this->config->filter_inv && !$is_matched)) {
                        unset($this->progress->results[$var_name][$key]);
                    }
                }
            }

            // Update filtered progress data and scan results
            $this->progress_data = $this->progress->createData(false);
        }
    }

    /**
     * Merges progress data from different scan paths.
     * @param string $scan_path_original
     * @return bool
     */
    function mergeProgressData($scan_path_original = '')
    {
        $scan_paths = $this->utilities->splitScanPath($scan_path_original);
        if (count($scan_paths) <= 1) {
            return false; // exit
        }

        // Init progress class and get merged progress data
        $this->progress->construct($this->config, $this->queue, $this->benchmark);
        $this->progress_data = $this->progress->mergeProgressData($scan_path_original);

        // Set scan queue and results
        $this->queue = $this->progress_data['queue'];
        $this->progress->results = $this->progress_data['results'];

        return true;
    }

    // --- Base method: start() ---

    /**
     * Aplication workflow
     * ----------------------------------------------------------------------
     * 1. Restart if a prescan file isn't exists
     * 2. Create the config file, as a plain-file storage (if not exists)
     * 3. Load text config file and get queue pointer (if exists)
     * 4. Prescan root directory recursively and save the list
     * 5. Detect version of CMS and run the plugins detector
     * 6. Load the known signatures and ignore lists
     * 7. Recursively build a list of files for scanning
     * 8. Discover database tables (prescan)
     * 9. Continuous database scan
     * 10. Update the config file and the queue pointer
     * 11. The progress data loaded and restored from a config file
     * 12. Continue the scanning process and stop on timeout
     * 13. Save pointer to currently scanning file
     * 14. Build HTML/NG/JS scan report
     * 15. Print the report
     */
    function start()
    {
        // Basic application configuration.
        $this->config->basicConfiguration();

        // Split scan paths and pick a random path.
        $scan_path_original = $this->config->getScanPath();
        $this->selectProgressData($scan_path_original);

        // Define constants used by application.
        $this->config->defineConstants();

        // Authentication methods.
        $this->constructAuth();

        // Init app core.
        $appCore = new CwisAppCore();
        $appCore->constructApp($this);
        $appCore->initCoreScanPath($this);

        // Run app core.
        $appCore->initialise();
        $appCore->route();
        $appCore->dispatch();

        // Merge progress data.
        $this->mergeProgressData($scan_path_original);

        // Filter scan results.
        $this->filterScanResults();

        // Final core action.
        $appCore->finalise();


        $keys_results = array_keys($this->progress_data["results"]);
        $results = array();

        $config = new CwisConfig();
        foreach (State::cnf('CWIS_REPORT_VARS') as $report_type => $report_vars) {
            foreach ($report_vars as $var => $name) {
                if (!$var || !$name) {
                    continue;
                }
                $count=0;
                foreach($this->progress_data["results"][$var] as $item) {
                    if(!array_key_exists('qt',$item)) {
                        $count++;
                    }
                }
                // Set the result
                $result = ["count" => $count,
                    "name" => $name,
                    "type" => $report_type];
                $results[]=$result;
            }
        }

        $this->progress_data['queue']->results = $results;

        return $this->progress_data;

    }


}
