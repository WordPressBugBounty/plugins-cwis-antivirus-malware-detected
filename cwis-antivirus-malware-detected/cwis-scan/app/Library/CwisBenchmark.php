<?php

namespace App\Library;

use App\State;

class CwisBenchmark
{

    // CPU bench, load and throttle
    var $cpu_load_averages = array();
    var $last_cpu_benchmark = 0;
    var $time_cpu_throttled = 0;
    var $time_taken_last = 0;
    //
    // Memory limit
    var $cached_memory_limit = 0;

    function calculateRushHourFactor($hour = 0)
    {
        // Return percent of day's traffic
        switch ((int) $hour) {
            default:
            case 0:
                return 2.6;

            case 1:
            case 2:
            case 3:
                return 2.3;

            case 4:
                return 2.4;

            case 5:
                return 2.7;

            case 6:
                return 3.3;

            case 7:
                return 4;

            case 8:
                return 5;

            case 9:
                return 5.6;

            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
                return 6;

            case 16:
                return 5.3;

            case 17:
                return 4.7;

            case 18:
                return 4.3;

            case 19:
            case 20:
            case 21:
                return 3.6;

            case 22:
                return 3.3;

            case 23:
                return 2.7;
        }
    }

    function calculateTimeTaken($precision = 3, $calculate_from_start = true)
    {
        // Calculate from start or from the last call
        if ($calculate_from_start) {
            $time_taken_last = State::cnf('CWIS_START_TIME');
        } else {
            $time_taken_last = $this->time_taken_last ?: State::cnf('CWIS_START_TIME');
            $this->time_taken_last = microtime_float();
        }

        return round(microtime_float() - $time_taken_last, $precision);
    }

    function cpuLoadAverage()
    {
        $cpu_load_average = 1;
        $cpu_load_count = 1;
        foreach ($this->cpu_load_averages as $cpu_load_change) {
            $cpu_load_average += pow($cpu_load_change, 2);
            $cpu_load_count++;
        }

        $root_mean_square = sqrt($cpu_load_average / $cpu_load_count);
        return round($root_mean_square - 1, 3);
    }

    function cpuSpeedTest($accuracy = 10, $recalc = false)
    {
        // Recalculate or use cached data?
        if ($recalc || !$this->last_cpu_benchmark) {
            $start_time = microtime_float();

            // Default test accuracy is 10 (takes ~0.7ms on i5-6200U with score 680)
            $test_accuracy = ($accuracy < 1) ? 1 : (int) $accuracy;
            for ($k = 1; $k <= $test_accuracy; $k++) {
                for ($i = 1; $i <= 42; $i++) {
                    serialize(log($i / ($i + $k)));
                }
            }

            // Calculate CPU benchmark as a number of microseconds elapsed (2*3*5*7*11*13*17*19=9699690)
            $cpu_benchmark = round((9699690 / $test_accuracy) * (microtime_float() - $start_time));
            $this->last_cpu_benchmark = $cpu_benchmark > 1 ? $cpu_benchmark : 1;
        }

        return $this->last_cpu_benchmark;
    }

    function cpuThrottle($sleep_time = 0)
    {
        if (($sleep_time = (int) $sleep_time) <= 0) {
            return null;
        }

        // Go to sleep (time in microseconds)
        if (!State::cnf('CWIS_DEBUG')) {
            usleep($sleep_time);

            // Count total CPU throttling in seconds
            $this->time_cpu_throttled = round($this->time_cpu_throttled + $sleep_time / 1000000, 3);
        }
    }

    function getMemoryAvailable()
    {
        if (!$this->cached_memory_limit) {
            $this->cached_memory_limit = $this->getMemoryLimit();
        }

        return $this->cached_memory_limit - $this->getMemoryUsage();
    }

    function getMemoryLimit()
    {
        // Determine current PHP memory limit and convert to bytes
        $memory_limit = functions_exists('ini_get') ? ini_get('memory_limit') : '128M';
        return shorthand_to_bytes($memory_limit > 0 ? $memory_limit : '1536M');
    }

    function getMemoryUsage()
    {
        $memory_usage = 0;
        if (State::phpVersion() >= 50200) {
            $memory_usage = memory_get_peak_usage();
        } elseif (State::phpVersion() >= 40302) {
            $memory_usage = memory_get_usage();
        }

        // Return the real usage or an estimate basing on the size of serialized object
        return $memory_usage;
    }

    function virtualLoadBalancing($max_sleep_time = 500000)
    {
        // Check if sample CPU benchmark is defined
        if (!State::cnf('CPU_BENCHMARK')) {
            return null;
        }

        /* // Reducing load in CLI mode (~0.01 sec)
          if (CWIS_IS_CLI && !CWIS_IS_CGI) {
          $this->cpuThrottle($max_sleep_time >> 6);
          } */

        // Get current CPU benchmark (more means higher CPU load)
        $cpu_benchmark = $this->cpuSpeedTest($accuracy = 10, true);

        // Calculate CPU load change
        $cpu_load_change = $cpu_benchmark / State::cnf('CPU_BENCHMARK');
        $this->cpu_load_averages[] = $cpu_load_change;

        // For throttling, CPU load should be > 1
        if ($cpu_benchmark <= State::cnf('CPU_BENCHMARK')) {
            $this->cpuThrottle(5000); # sleep for a while
            return null;
        }

        // Take in account server traffic by hour of day
        if (!State::cnf('CWIS_LOCAL_HOUR')) {
            $sleep_time_mcs = 10000; # default sleep time in microseconds
        } else {
            $sleep_time_mcs = 5000 * $this->calculateRushHourFactor(State::cnf('CWIS_LOCAL_HOUR')); # from 0.012 to 0.03 sec
        }

        // Go to sleep for 0.03 sec on 2x load, 0.08 sec on 3x load and 0.24 sec on 5x load.
        $sleep_time = round($sleep_time_mcs * ($cpu_load_change * $cpu_load_change - 1));

        // Sleep and count total CPU throttling in seconds
        $this->cpuThrottle($sleep_time < $max_sleep_time ? $sleep_time : $max_sleep_time);
    }

}
