<?php

namespace App\Library;

use App\State;

class CwisApi {

  public function __construct() {

  }

  public static function license_verify($data) {
    $url  = State::cnf('CWIS_HOST_API') . '/license/verify';
    return self::curl_post($url, $data, [], 30);
  }

  public static function license_register($data) {
    $url  = State::cnf('CWIS_HOST_API') . '/license/register';
    return self::curl_post($url, $data, [], 30);
  }

  public static function register($data) {
    $url  = State::cnf('CWIS_HOST_API') . '/registration';
    return self::curl_post($url, $data, [], 10);
  }

    public static function unregister() {
        $url  = self::base_url() . '/uninstall';
        return self::curl_patch($url, [], [], 5);
    }

    public static function deactivate() {
        $url  = self::base_url() . '/disable';
        return self::curl_patch($url, [], [], 5);
    }

    public static function deactivateFeedback($msg) {
        $url  = self::base_url() . '/feedback';
        $data = [ 'comment' => $msg ];
        return self::curl_post($url, $data, [], 5);
    }

  public static function scheduler_get() {
    $url  = self::base_url() . '/scheduler';
    return self::curl_post($url, false, [], 5);
  }

  public static function scheduler_set($config) {
    $url  = self::base_url() . '/scheduler';
    $data = [ 'config' => $config ];
    return self::curl_post($url, $data, [], 10);
  }

  public static function send_report($json, $emails) {
    $url  = self::base_url() . '/scan_report';
    $data = [ 'json' => $json, 'emails' => $emails ];
    return self::curl_post($url, $data);
  }

  public static function whitelist_fetch($fn) {

    // Reuse file if modified within last half hour
    if (is_readable($fn) && time() - filemtime($fn) > 0) {
        return null;
    }

    $url  = self::base_url() . '/whitelist/get';
    $data = self::curl_post($url, false);

    if($data) {
      file_put_contents($fn, $data);
      return true;
    }

  }

  public static function whitelist_add($files) {
    $url  = self::base_url() . '/whitelist/add';
    $data = [ 'data' => $files ];
    return self::curl_post($url, $data);
  }

  public static function whitelist_remove($files) {
    $url  = self::base_url() . '/whitelist/remove';
    $data = [ 'data' => $files ];
    return self::curl_post($url, $data);
  }

  public static function base_url() {
    return State::cnf('CWIS_HOST_API') . '/site_api/' . State::cnf('CWIS_REST_NONCE');
  }

  public static function curl_auth($headers, $data = false) {
    $url = State::cnf('CWIS_HOST_CHECK') . 'check';
    return self::curl_post($url, $data, $headers, 1);
  }

    private static function curl_patch($url, $data = [], $headers = [], $timeout = 5)
    {
        $ch  = curl_init();

        $headers[] = "Content-type: application/json";
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));

        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');

        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);

        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_URL, $url);

        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 3);

        $res = curl_exec($ch);
        curl_close($ch);
        return $res;
    }

    private static function curl_post($url, $data = false, $headers = [], $timeout = 5)
    {
        $ch  = curl_init();

        if ($data) {
            $headers[] = "Content-type: application/json";
            curl_setopt($ch, CURLOPT_POST, 1);
            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        }

        if (count($headers)) {
            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        }

        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);

        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_URL, $url);

        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 3);

        $res = curl_exec($ch);
        curl_close($ch);
        return $res;
    }

  public static function sync_settings($sent) {

    $url  = self::base_url() . '/sync/settings';
    $data = [ 'data' => $sent ];
    return self::curl_post($url, $data);

  }

  public static function sync_step($step) {
    $url      = self::base_url() . '/sync/' . $step;
    $response = http_open_url($url);
    return isset($response['body']) ? $response['body'] : null;
  }

  public static function upload_archive($fn, $extra) {
    $curlFile = new \CURLFile($fn, 'application/zip', basename($fn));
    $ch   = curl_init();
    $url  = self::base_url() . '/upload';
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, [ 'file' => $curlFile, 'extra' => $extra ]);
    $result = curl_exec($ch);
    if ($result === false) {
        echo 'upload - FAILED' . PHP_EOL;
    }
  }

    public static function fetch_news()
    {
        $url = self::base_url() . '/news';
        $news = [
            /*[
                'category' => "security/wordpress",
                'description' => "description",
                'guid' => "guid",
                'link' => "https://wordpress.org/plugins/cwis-antivirus-malware-detected/#developers",
                'pubDate' => "Wed, 31 January 2023 12:00:00 GMT",
                'title' => "WebDefender Security 5.0.0.70",
            ]*/
        ];
        $res = json_decode(self::curl_post($url, false, [], 10), true);
        if (isset($res['success']) && $res['success']) {
            $news = $res['data'];
        }

        if ($news) {
            $values = array_column($news, "pubDate");
            $values = array_map(function($value): int {
                return strtotime($value);
            }, $values);
            array_multisort($news, SORT_DESC, $values);
        }

        return $news;
    }

    public static function fetch_single($file)
    {
        $url  = self::base_url() . '/files/original';
        return json_decode(self::curl_post($url, [ 'file' => $file ], [], 5));
    }

    public static function fetch_archive($files, $folders, $zipfile = false)
    {
        $url  = self::base_url() . '/hashes/patch';

        if (!$zipfile) {
            $zipfile = State::resultsPath() . DIRECTORY_SEPARATOR . 'patch.zip';
        }

        $patch = fopen($zipfile, 'w+b');
        $ch  = curl_init();
        $data = [ 'files' => $files, 'folders' => $folders ];
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);
        curl_setopt($ch, CURLOPT_POST, true);
        // curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));
        curl_setopt($ch, CURLOPT_URL, $url);
        //curl_setopt($ch, CURLOPT_FILE, $patch);
        $res = curl_exec($ch);

        if ($res === false) {
            (new CwisLogger())->debugMessage('fetch_archive - '.curl_error($ch));
        } else {
            (new CwisLogger())->debugMessage('fetch_archive - '.json_encode($res));
        }

        curl_close($ch);

        return $res;
    }

  public static function fetch_sitecheck() {

      $server_host = CwisStaticHelpers::get_server_host();
      $url = self::base_url() . '/sitecheck?url=' . urlencode($server_host);
      return self::curl_post($url, false, [], 10);

  }

  public static function fetch_patch($zipfile) {

    $file  = self::base_url() . '/hashes/archive';
    $rh = fopen($file, 'rb');
    $wh = fopen($zipfile, 'w+b');
    if (!$rh || !$wh) { return false; }
    while (!feof($rh)) {
        if (fwrite($wh, fread($rh, 4096)) === FALSE) { return false; }
    }
    fclose($rh);
    fclose($wh);

  }

  public static function fetch_hashes($skip_cached = false) {

    $scan_path = State::scanPath();
    $dirsCreator = new CwisDirsCreator();
    $dirsCreator->setFilePathHash($scan_path);
    $filepath = $dirsCreator->getResultsFilePath('results');
    $filename = dirname($filepath) . '/CWIS-REMOTE.dat';

    if(file_exists($filename) && !$skip_cached) {
      return json_decode(file_get_contents($filename), true);
    } else {
      $url = self::base_url() . '/hashes/all';
      $ch  = curl_init();
      curl_setopt($ch, CURLOPT_TIMEOUT, 3);
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
      curl_setopt($ch, CURLOPT_URL, $url);
      $result = curl_exec($ch);
      curl_close($ch);

      if($result) {
          $result = json_decode($result, true);
          if(isset($result['success']) && $result['success'] && isset($result['data'])) {
            file_put_contents($filename, json_encode($result['data']));
            return $result['data'];
          }
        }
      return [];

    }
  }

  public static function fetch_emerging($datatable = false) {

    $emerging_filename_db   = 'cwsd-emerging.db';
    $emerging_filename_json = 'cwsd-emerging.json';
    $temp_dir_path = State::tempPath();

    $cwis_defender_filesystem = new Cwis_Defender_Filesystem();

    $path_to_emerging_db   = $temp_dir_path . '/' . $emerging_filename_db;
    $path_to_emerging_json = $temp_dir_path . '/' . $emerging_filename_json;
    $packed_entries = array_values((array) $cwis_defender_filesystem->load_cache_file_contents($path_to_emerging_db, false, 3600));

    if(!$packed_entries) {

      $url = self::base_url() . '/emerging';
      $ch  = curl_init();
      curl_setopt($ch, CURLOPT_TIMEOUT, 3);
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
      curl_setopt($ch, CURLOPT_URL, $url);
      $result = curl_exec($ch);
      curl_close($ch);

      if($result) {
        $result = json_decode($result, true);
        if(isset($result['success']) && $result['success'] && isset($result['data'])) {
          $packed_entries = array_column($result['data'], 'ip');
          file_put_contents($path_to_emerging_json, json_encode($result['data']));
          $cwis_defender_filesystem->save_cache_file_contents($path_to_emerging_db, $packed_entries);
        }
      } else {
        $cwis_defender_filesystem->save_cache_file_contents($path_to_emerging_db, []);
      }
    }

    if($datatable && file_exists($path_to_emerging_json)) {
      return json_decode(file_get_contents($path_to_emerging_json), true);
    }

    return $packed_entries;

  }

}
