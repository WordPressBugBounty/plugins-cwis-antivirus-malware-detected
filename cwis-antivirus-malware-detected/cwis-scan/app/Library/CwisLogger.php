<?php

namespace App\Library;

use App\State;

class CwisLogger
{

    // Valid debug filenames
    var $debug_filepath, $scanlog_filepath, $scanspeed_filepath;
    var $scan_path = '';

    /**
     * Outputs memory usage in separated line and debug message with (optional) datetime prepended.
     * @param string $message
     * @param bool $datetime
     */
    function debugMemoryUsage($message = '', $datetime = true)
    {
        $utilities = new CwisUtilities();
        $memory_usage = 'Memory usage: ' . $utilities->formatBytes(memory_get_usage(), 2);
        if (function_exists('memory_get_peak_usage')) {
            $memory_usage .= ' (peak is ' . $utilities->formatBytes(memory_get_peak_usage(), 2) . ')';
        }

        // Insert carriage return twice
        $this->debugMessage($message . "\n" . $memory_usage, $datetime);
    }

    /**
     * Writes a standard DEBUG message with (optional) datetime prepended.
     * @param string $message
     * @param bool $datetime
     * @param bool $newline
     */
    function debugMessage($message = '', $datetime = true, $newline = false)
    {
        if (!State::cwisDebug()) {
            return null;
        }

        return $this->writeIntoLogFile('debug', $message, $datetime, $newline);
    }

    /**
     * Writes a SCANLOG debug message with (optional) datetime prepended.
     * @param string $message
     * @param bool $datetime
     * @param bool $newline
     */
    function scanlogMessage($message = '', $datetime = true, $newline = false)
    {
        if (State::cwisDebug() < 2) {
            return null;
        }

        return $this->writeIntoLogFile('scanlog', $message, $datetime, $newline);
    }

    /**
     * Writes a SCANSPEED debug message with file name, size and the time elapsed for scan.
     * @param string $file_name
     * @param integer $file_size
     * @param float $time_elapsed
     */
    function scanspeedMessage($file_name = '', $file_size = 0, $time_elapsed = 0)
    {
        $firstline = '"Filename","File size (bytes)","Time elapsed (secs)"'; //CSV's header row
        $message = '"' . $file_name . '",' . $file_size . ',' . $time_elapsed;
        return $this->writeIntoLogFile('scanspeed', $message, false, false, $firstline);
    }

    /**
     * Writes debug message into the selected log file.
     * @param string $logname
     * @param string $message
     * @param bool $datetime
     * @param bool $newline
     * @param string $firstline
     * @return mixed
     */
    function writeIntoLogFile($logname = 'debug', $message = '', $datetime = true, $newline = false, $firstline = '')
    {
        if (!State::cwisDebug() || ($logname !== 'debug' && $logname !== 'scanlog' && $logname !== 'scanspeed')) {
            return null;
        }

        // Check a debug file name
        if (!$this->{$logname . '_filepath'}) {
            $utilities = new CwisUtilities();
            $utilities->setScanPath($this->scan_path);
            $this->{$logname . '_filepath'} = $utilities->defineFilePath($logname);
        }

        // Get absolute path to debug file
        if (!$this->{$logname . '_filepath'}) {
            $path_to_logfile = State::resultsPath() . DIRECTORY_SEPARATOR . 'CWIS-' . strtoupper($logname) . '.dat';
        } else {
            $path_to_logfile = $this->{$logname . '_filepath'};
        }

        // Prepend a timestamp
        if ($datetime) {
            $message = '[' . date('Y-m-d H:i:s') . '] ' . $message;
        }

        // Prepend a new line
        if ($newline) {
            $message = "\n" . $message;
        }

        // Prefend the "firstline" (ie header row), if defined
        if (strlen($firstline) && !is_file($path_to_logfile)) {
            $message = $firstline . "\r\n" . $message;
        }

        // Write debug message into file
        return @file_put_contents_safe($path_to_logfile, $message . "\r\n", FILE_APPEND | LOCK_EX);
    }

    /**
     * Sets scan path.
     * @param string $scan_path
     * @return string
     */
    function setScanPath($scan_path = '')
    {
        $this->scan_path = $scan_path;
    }

}
