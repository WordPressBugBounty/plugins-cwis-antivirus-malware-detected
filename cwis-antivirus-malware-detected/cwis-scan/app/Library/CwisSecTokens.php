<?php

namespace App\Library;

class CwisSecTokens
{

    // tokens to ignore while scanning
    static $T_IGNORE = array(
        //T_BAD_CHARACTER,
        T_DOC_COMMENT,
        T_COMMENT,
        //T_ML_COMMENT,
        T_INLINE_HTML,
        T_WHITESPACE,
        T_OPEN_TAG,
        //T_CLOSE_TAG
    );
    // code blocks that should be ignored as requirement
    static $T_LOOP_CONTROL = array(
        //T_DO, // removed, because DO..WHILE is rewritten to WHILE
        T_WHILE,
        T_FOR,
        T_FOREACH
    );
    // control structures
    static $T_FLOW_CONTROL = array(
        T_IF,
        T_SWITCH,
        T_CASE,
        T_ELSE,
        T_ELSEIF
    );
    // variable assignment tokens
    static $T_ASSIGNMENT = array(
        T_AND_EQUAL,
        T_CONCAT_EQUAL,
        T_DIV_EQUAL,
        T_MINUS_EQUAL,
        T_MOD_EQUAL,
        T_MUL_EQUAL,
        T_OR_EQUAL,
        T_PLUS_EQUAL,
        T_SL_EQUAL,
        T_SR_EQUAL,
        T_XOR_EQUAL
    );
    // variable assignment tokens that prevent tainting
    static $T_ASSIGNMENT_SECURE = array(
        T_DIV_EQUAL,
        T_MINUS_EQUAL,
        T_MOD_EQUAL,
        T_MUL_EQUAL,
        T_OR_EQUAL,
        T_PLUS_EQUAL,
        T_SL_EQUAL,
        T_SR_EQUAL,
        T_XOR_EQUAL
    );
    // condition operators
    static $T_OPERATOR = array(
        T_IS_EQUAL,
        T_IS_GREATER_OR_EQUAL,
        T_IS_IDENTICAL,
        T_IS_NOT_EQUAL,
        T_IS_NOT_IDENTICAL,
        T_IS_SMALLER_OR_EQUAL
    );
    // all function call tokens
    static $T_FUNCTIONS = array(
        T_STRING, // all functions
        T_EVAL,
        T_INCLUDE,
        T_INCLUDE_ONCE,
        T_REQUIRE,
        T_REQUIRE_ONCE
    );
    // including operation tokens
    static $T_INCLUDES = array(
        T_INCLUDE,
        T_INCLUDE_ONCE,
        T_REQUIRE,
        T_REQUIRE_ONCE
    );
    // XSS affected operation tokens
    static $T_XSS = array(
        T_PRINT,
        T_ECHO,
        T_OPEN_TAG_WITH_ECHO,
        T_EXIT
    );
    // securing operation tokens
    static $T_CASTS = array(
        T_BOOL_CAST,
        T_DOUBLE_CAST,
        T_INT_CAST,
        T_UNSET_CAST,
        T_UNSET
    );
    // tokens that will have a space before and after in the output, besides $T_OPERATOR and $T_ASSIGNMENT
    static $T_SPACE_WRAP = array(
        T_AS,
        T_BOOLEAN_AND,
        T_BOOLEAN_OR,
        T_LOGICAL_AND,
        T_LOGICAL_OR,
        T_LOGICAL_XOR,
        T_SL,
        T_SR,
        T_CASE,
        T_ELSE,
        T_GLOBAL,
        T_NEW
    );
    // arithmetical operators to detect automatic typecasts
    static $T_ARITHMETIC = array(
        T_INC,
        T_DEC
    );
    // arithmetical operators to detect automatic typecasts
    static $S_ARITHMETIC = array(
        '+',
        '-',
        '*',
        '/',
        '%'
    );
    // strings that will have a space before and after in the output besides $S_ARITHMETIC
    static $S_SPACE_WRAP = array(
        '.',
        '=',
        '>',
        '<',
        ':',
        '?'
    );

}
