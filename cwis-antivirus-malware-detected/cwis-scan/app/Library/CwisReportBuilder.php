<?php

namespace App\Library;

use App\State;

class CwisReportBuilder
{

    var $utilities;
    //
    var $report_context, $report_count, $report_label, $report_message, $report_name, $report_result_entries;
    var $show_offer = false;
    //
    var $entry_details_replacements = array(
        '...'		 => '&hellip;',
        '~'			 => '&middot;',
        '[_MARKER_]' => '<code class="marker btn btn-danger" title="Marker">&nbsp;</code>',
        '[_BEGIN_]'	 => '<span class="line_no label label-success">',
        '[_END_]'	 => '</span> ',
    );
    //
    var $ignore_list = array();
    //
    // Supported report types
    var $report_types = array(
        // Vulnerabilities
        'vuln'	 => array(
            'VulnerCMS'	 => array(
                'label'		 => 'VULNERABLE CMS',
                'name'		 => _CWIS_RESULT_VULNERABLE_CMS, // Vulnerable CMS
                'message'	 => _CWIS_VULNERABLE_CMS_DETECTED // Outdated content management system (CMS) potentially vulnerable to attack.
            ),
            'Vulnerable' => array(
                'label'		 => 'VULNERABLE SCRIPTS',
                'name'		 => _CWIS_RESULT_VULNERABLE_SCRIPTS, // Vulnerable scripts and plugins
                'message'	 => _CWIS_VULNERABLE_SCRIPTS_DETECTED // Scripts possibly vulnerable to cross-site scripting (XSS), SQL injections or other potential exploits.
            ),
        ),
        // Critical reports
        'crit'	 => array(
            'CriticalJS'	 => array(
                'label'		 => 'CLIENT/JS MALWARE',
                'name'		 => _CWIS_RESULT_JS_VIRUSES, // Javascript malware/virus
                'message'	 => _CWIS_JS_VIRUS_SIGNATURES_DETECTED // Javascript virus signatures detected.
            ),
            'CriticalPHP'	 => array(
                'label'		 => 'SERVER/PHP MALWARE',
                'name'		 => _CWIS_RESULT_SERVER_MALWARE, // Server malware
                'message'	 => _CWIS_SERVER_MALWARE_SIGNATURES_DETECTED // Shell script signatures detected. Might be a malicious or hacker's scripts.
            ),
            'HashChanged'	 => array(
                'label'		 => 'Hash changed',
                'name'		 => 'Hash changed',
                'message'	 => 'Files have different hashes'
            ),
            'HashNotFound'	 => array(
                'label'		 => 'Hash not found',
                'name'		 => 'Hash not found',
                'message'	 => 'File with this hash not found'
            ),
            'Htaccess'		 => array(
                'label'		 => 'HTACCESS',
                'name'		 => _CWIS_RESULT_HTACCESS_REDIRECTS, // Malicious code in .htaccess
                'message'	 => _CWIS_MALICIOUS_HTACCESS_DETECTED // Malicious .htaccess (redirect to external server, extension handler replacement or malicious code auto-append).
            ),
            'Phishing'		 => array(
                'label'		 => 'PHISHING',
                'name'		 => _CWIS_RESULT_PHISHING_PAGES, // Phishing pages
                'message'	 => _CWIS_PHISHING_PAGES_DETECTED // Phishing pages detected.
            ),
            'WebShells'		 => array(
                'label'		 => 'WEBSHELLS',
                'name'		 => _CWIS_RESULT_BACKDOOR_WEB_SHELLS, // Web shell scripts
                'message'	 => _CWIS_WEB_SHELL_SIGNATURES_DETECTED // Shell script signatures detected.
            ),
        ),
        // Info reports
        'info'	 => array(
            'BigFiles'		 => array(
                'label'		 => 'BIG FILES / SKIPPED',
                'name'		 => _CWIS_RESULT_SKIPPED_BIG_FILES, // Large files
                'message'	 => _CWIS_LARGE_FILES_SKIPPED // Large files skipped (greater than 1Mb by default).
            ),
            'GitFiles'		 => array(
                'label'		 => 'GIT FILES / SKIPPED',
                'name'		 => _CWIS_RESULT_SKIPPED_GIT_FILES, // Git files
                'message'	 => _CWIS_GIT_FILES_SKIPPED // Git files skipped (content objects).
            ),
            'HiddenFiles'	 => array(
                'label'		 => 'HIDDEN FILES',
                'name'		 => _CWIS_RESULT_HIDDEN_FILES, // Hidden Linux files
                'message'	 => _CWIS_HIDDEN_FILES_DETECTED // Hidden files (Unix dot-files).
            ),
            'NotRead'		 => array(
                'label'		 => 'READ ERRORS / SKIPPED',
                'name'		 => _CWIS_RESULT_READING_ERRORS, // Read/scan errors
                'message'	 => _CWIS_READING_ERROR_SKIPPED // Reading errors (skipped files).
            ),
            'PrivateIP'		 => array(
                'label'		 => 'PRIVATE IP',
                'name'		 => _CWIS_RESULT_PRIVATE_IP_ADDRESSES, // Suspicious IP (private address or loopback)
                'message'	 => _CWIS_SUSPICIOUS_PRIVATE_IP // Suspicious private IP addresses detected.
            ),
            'SkippedDirs'	 => array(
                'label'		 => 'IGNORED DIRS / SKIPPED',
                'name'		 => _CWIS_RESULT_SKIPPED_DIRECTORIES, // Skipped directories
                'message'	 => _CWIS_SKIPPED_DIRECTORIES // Excluded from scanning directories matched by ignore lists.
            ),
            'SymLinks'		 => array(
                'label'		 => 'SYMLINKS',
                'name'		 => _CWIS_RESULT_SYMLINKS, // Symbolic links
                'message'	 => _CWIS_SYMBOLIC_LINKS // Symbolic links (soft links).
            ),
            'Whitelisted'	 => array(
                'label'		 => 'WHITELISTED',
                'name'		 => _CWIS_RESULT_WHITELISTED_FILES, // Whitelisted files (matched by SHA1 hash)
                'message'	 => _CWIS_WHITELISTED_FILES // Excluded from scanning results, as were found in file whitelists.
            ),
        ),
        // Warning reports
        'warn'	 => array(
            'AdwareList' => array(
                'label'		 => 'ADWARE LINKS',
                'name'		 => _CWIS_RESULT_ADWARE_AND_SPAM_LINKS, // Adware and spam links
                'message'	 => _CWIS_ADWARE_LINKS_OR_LINKFARM // This script has black-SEO links or linkfarm. Check if it was installed by yourself.
            ),
            'Doorways'	 => array(
                'label'		 => 'DOORWAYS',
                'name'		 => _CWIS_RESULT_DOORWAYS, // Might be the doorway pages
                'message'	 => _CWIS_MIGHT_BE_DOORWAY_PAGES // Directories contained too many .php or .html files. Files might be a part of doorway pages.
            ),
            'EmptyLinks' => array(
                'label'		 => 'SEO LINKS',
                'name'		 => _CWIS_RESULT_EMPTY_LINKS, // Empty links (with no anchor text)
                'message'	 => _CWIS_INVISIBLE_LINKS_DETECTED // These files have invisible links, might be black-SEO stuff.
            ),
        ),
        // Suspicious (PRO)
        'susp'	 => array(
            'Heuristic'		 => array(
                'label'		 => 'HEURISTICS', // Heuristic analyzer (suspicious files)
                'name'		 => _CWIS_RESULT_SUSPICIOUS_HEURISTICS, // Heuristic analyzer (suspicious files)
                'message'	 => _CWIS_SUSPICIOUS_HEURISTICS_DETECTED // Heuristic Analyzer has detected suspicious files. Check if they are malware.
            ),
            'Iframer'		 => array(
                'label'		 => 'IFRAMES',
                'name'		 => _CWIS_RESULT_IFRAME_INJECTIONS, // iFrame injection attack
                'message'	 => _CWIS_IFRAME_INJECTIONS_DETECTED // Might be a malicious or hacker's script.
            ),
            'MaliciousCode'	 => array(
                'label'		 => 'SUSPICIOUS',
                'name'		 => _CWIS_RESULT_POTENTIALLY_MALICIOUS, // Potentially malicious (if scan_level >= 3)
                'message'	 => _CWIS_POTENTIALLY_MALICIOUS_CODE // Suspicious code detected. It's usually used in malicious scrips.
            ),
            'PHPCodeInside'	 => array(
                'label'		 => 'SUSP PHP CODE',
                'name'		 => _CWIS_RESULT_PHP_CODE_INSIDE, // PHP code inside non-PHP files
                'message'	 => _CWIS_PHP_CODE_INSIDE_NON_PHP_FILE // Non-PHP file has PHP signature. Check for malicious code
            ),
            'UnixExec'		 => array(
                'label'		 => 'UNIX EXECS',
                'name'		 => _CWIS_RESULT_UNIX_EXECUTABLES, // Unix executables signatures and odd scripts
                'message'	 => _CWIS_UNIX_EXECUTABLES_DETECTED // Unix executables signatures and odd scripts detected. They might be a malicious binaries or rootkits.
            ),
            'VulnerCode'	 => array(
                'label'		 => 'VULNERABLE CODE',
                'name'		 => _CWIS_RESULT_POTENTIALLY_VULNERABLE, // PHP code potentially vulnerable
                'message'	 => _CWIS_POTENTIALLY_VULNERABLE_DETECTED // PHP code potentially vulnerable to cross-site scripting (XSS), SQL injection, HTTP header injection and other potential exploits.
            )
        )
    );

    /**
     * Use this method as a class constructor.
     */
    function construct($results = array())
    {
        // Instantiate utilities and pass results object
        $this->utilities = new \App\Library\CwisUtilities();
        foreach($results as $name => $result) {
            $res[$name]=array();
            foreach($result as $item) {
                if(!is_array($item)){
                    if(is_array($result)) {
                        if(count($result)>0) {
                            $res[$name]=$result;
                        }
                    }
                    break;
                }
                if(!array_key_exists('qt',$item)) {
                    $res[$name][]=$item;
                }
            }
            $this->results[$name]=$res[$name];
        }
    }


    ////////////////////
    // --- HELPERS ---//
    ////////////////////

    /**
     * Gets scan result context by report.
     * @param string $type
     * @return string
     */
    function getScanResultBackground($type = 'info')
    {
        // Validate result type and define context
        switch ($type) {
            case 'info':
                $color = '40a0c0';
                break;

            case 'success':
                $color = '60a000';

            case 'warn':
            case 'susp':
            case 'warning':
                $color = 'c0a020';
                break;

            case 'vuln':
            case 'crit':
            case 'danger':
                $color = 'c04020';
                break;

            case 'primary':
            default:
                $color = '20a080';
        }

        return $color;
    }

    /**
     * Gets scan result by report var name.
     * @param string $var_name
     * @return string
     */
    function getScanResultByVar($var_name = null)
    {
        if (!is_string($var_name) || !strlen($var_name) || !isset($this->results) ||
            !array_key_exists($var_name, $this->results)) {
            return array();
        }

        return $this->results[$var_name];
    }

    /**
     * Gets scan result context by report.
     * @param string $type
     * @return string
     */
    function getScanResultContext($type = 'info')
    {
        // Validate result type and define context
        switch ($type) {
            case 'vuln':
            case 'crit':
                $context = 'danger';
                break;

            case 'info':
                $context = 'info';
                break;

            case 'warn':
            case 'susp':
                $context = 'warning';
                break;

            default:
                $context = 'default';
        }

        return $context;
    }

    /**
     * Returns scan results as a standardized object, accepts an optional
     * parameters allowing overriding of entry data.
     * @param string $var_name
     * @param null|array $entry_details
     * @return type
     */
    function getScanResultEntriesObject($var_name = '', $entry_details = null)
    {
        // Process string names only
        if (!is_string($var_name) || !isset($this->results[$var_name])) {
            $response = new \App\Library\CwisResponse();
            $response->jsonError('Undefined result name "' . $var_name . '".');
        }

        // Array of scan results
        $scan_results_list = $this->getScanResultByVar($var_name);

        if (!is_array($entry_details)) {
            $entry_details = array();
        }

        // Reset results array
        $this->report_result_entries = array();

        // Build object body
        foreach ($scan_results_list as $i => $entry) {
            $entry_index = $entry_name = $entry_fragment = $entry_sig_id = null;
            $entry_size = $entry_ctime = $entry_mtime = $entry_crc = null;

            // Array format support
            if (is_array($entry)) {
                $entry_index = isset($entry['file']) ? $entry['file'] : null; // deprecated, use 'id' instead
                $entry_name = isset($entry['name']) ? $this->utilities->filenameExpand($entry['name']) : null;

                // Optional override of entry details
                if (isset($entry_details[$i])) {
                    $entry_fragment = $entry_details[$i];
                } else {
                    $entry_fragment = isset($entry['fragment']) ? $entry['fragment'] : null;
                }

                // Optional signature IDs (hashes)
                $entry_sig_id = isset($entry['sig']) ? $entry['sig'] : null;

                // Get and unpack file stat
                $entry_stat_packed = isset($entry['stat']) ? $entry['stat'] : null;
                if (strlen($entry_stat_packed) === 12) {
                    $entry_stat_unpacked = unpack('I1entry_size/I1entry_ctime/I1entry_mtime', $entry_stat_packed);
                    extract($entry_stat_unpacked); // comply PHP 5.2 strict standards
                }

                // Get entry CRC
                $entry_crc = isset($entry['crc']) ? $entry['crc'] : null;
            } else {
                // Get file index (deprecated)
                $entry_index = $entry;
            }
            unset($entry);

            // Validate and unpack entry data (DEPRECATED)
            if (is_int($entry_index)) {
                if (isset($this->results['EntryDetails'][$entry_index])) {
                    $entry_details = $this->results['EntryDetails'][$entry_index];
                    $entry_separator_pos = strpos($entry_details, "\t");
                    if (false === $entry_separator_pos) {
                        $entry_name_packed = $entry_details;
                    } else {
                        $entry_name_packed = substr($entry_details, 0, $entry_separator_pos);
                        $entry_details_packed = substr($entry_details, $entry_separator_pos + 1);

                        // Unpack file details
                        if (strlen($entry_details_packed) === 12) {
                            $entry_details_unpacked = unpack('I1entry_size/I1entry_ctime/I1entry_mtime', $entry_details_packed);
                            extract($entry_details_unpacked); // PHP 5.2 strict standards
                        }
                    }

                    // Unpack filename or PDO entry
                    $entry_name = $this->utilities->filenameExpand($entry_name_packed);
                }

                // Get entry CRC
                $entry_crc = isset($this->results['EntryCRC'][$entry_index]) ? $this->results['EntryCRC'][$entry_index] : null;
            }

            // Ignore this filename (duplicated entry)?
            if (null !== $entry_name && $this->needIgnore($entry_name, $entry_crc)) {
                continue;
            }

            // Process file details (code preview)
            if ($entry_fragment && is_string($entry_fragment)) {

                // Prepare a "line/row number" prefix
                $line_no_prefix = (false !== strpos($entry_name, ' ')) ? 'Row ' : 'Line ';
                $html_entry_details = str_replace('[_BEGIN_]', '[_BEGIN_]' . $line_no_prefix, $entry_fragment);

                // File details replacements
                foreach ($this->entry_details_replacements as $search => $replace) {
                    $html_entry_details = str_replace($search, $replace, $html_entry_details);
                }

                // Output only valid byte sequences filtered by utf8_sanitize
                $entry_details_content = utf8_sanitize($html_entry_details);
            } else {
                $entry_details_content = '';
            }

            // Add a new result
            $this->report_result_entries[] = array(
                'id'		 => (int) $entry_index, // entry index (PDO row number)
                'name'		 => $entry_name, // entry name (PDO record or file)
                'content'	 => $entry_details_content, // sanitized entry details (code fragment)
                'changed'	 => (int) $entry_ctime, // entry changed (timestamp)
                'modified'	 => (int) $entry_mtime, // entry modified (timestamp)
                'size'		 => (int) $entry_size, // entry size (in bytes)
                'sig'		 => (int) $entry_sig_id, // entry sig id (CRC32)
            );
        }

        return $this->report_result_entries;
    }

    function needIgnore($file_name = '', $file_crc = '')
    {
        for ($i = 0; $i < count($this->ignore_list); $i++) {
            if (strpos($file_name, $this->ignore_list[$i][0]) !== false) {
                if ($file_crc == $this->ignore_list[$i][1]) {
                    return true;
                }
            }
        }

        return false;
    }

    function processGetHashes($type) {
    }

    ///////////////////
    // --- PUBLIC ---//
    ///////////////////

    function getResultsCounter($var_name) {

        switch($var_name) {
          default:
            return count($this->getScanResultByVar($var_name));
          break;
        }

    }

    /**
     * Initialize new report's properties.
     * @param string $var_name
     */
    function process($var_name = '')
    {
        $report_data = array();
        foreach ($this->report_types as $threat_type => $report_vars) {
            if (isset($report_vars[$var_name])) {
                $report_data = $report_vars[$var_name];
                $report_data['type'] = $threat_type;
                break;
            }
        }

        // Set report params
        $this->report_var_name = $var_name;
        $this->report_count = $this->getResultsCounter($var_name);
        $this->report_name = $report_data['name'];
        $this->report_label = $report_data['label'];

        // Set default values
        $this->report_context = 'success';
        $this->report_message = State::msg('_CWIS_NO_DATA_AVAILABLE');
        $this->report_result_entries = array();

        // On threats detected
        if ($this->report_count > 0) {
            $this->report_context = $this->getScanResultContext($report_data['type']);

            switch ($var_name) {
                case 'BigFiles':
                    // Max size to scan (default is 1MiB)
                    $max_size_to_scan = State::cnf('MAX_SIZE_TO_SCAN_BYTES') ?? 1048576;

                    // Large files skipped (greater than %s)
                    $this->report_message = sprintf($report_data['message'], $this->utilities->formatBytes($max_size_to_scan));
                    $this->getScanResultEntriesObject($var_name);
                    break;

                case 'Heuristic':
                    // Heuristic descriptions
                    $heuristicDescriptions = array();
                    foreach ($this->results['Heuristic'] as $i => $array) {
                        $type = isset($array['fragment']) ? $array['fragment'] : '-';
                        if(in_array($type, ['_CWIS_SUSP_FILE_MTIME','CWIS_SUSP_FILE_PERM','CWIS_SUSP_PHP_IN_UPLOAD'])){
                            $heuristicDescriptions[$i] = State::cnf($type);
                        } else {
                            $heuristicDescriptions[$i] = $type;
                        }
                    }

                    // Heuristic Analyzer has detected suspicious files. Check if they are malware.
                    $this->report_message = $report_data['message'];
                    $this->getScanResultEntriesObject($var_name, $heuristicDescriptions);
                    break;

                case 'EmptyLinks':
                    // Process empty link sources
                    $emptyLinkDetails = array();
                    foreach ($this->results['EmptyLinks'] as $i => $array) {
                        $sources = isset($array['fragment']) ? $array['fragment'] : array();
                        $details = htmlspecialchars(implode(', ', $sources));
                        if (count($sources) >= State::cnf('CWIS_MAX_EXTERNAL_LINKS')) {
                            $details .= '... (' . State::msg('_CWIS_DISPLAYED_FIRST') . State::cnf('CWIS_MAX_EXTERNAL_LINKS') . ')';
                        }

                        $emptyLinkDetails[$i] = State::msg('_CWIS_INVISIBLE_LINKS_LIST') . ': ' . $details;
                    }

                    // These files have invisible links, might be black-SEO stuff.
                    $this->report_message = $report_data['message'];
                    $this->getScanResultEntriesObject($var_name, $emptyLinkDetails);
                    break;

                case 'Doorways':
                    if ((State::cnf('CWIS_RMASK_FULL') & State::cnf('CWIS_RMASK_DOORWAYS')) === State::cnf('CWIS_RMASK_DOORWAYS')) {
                        // Directories contained too many .php or .html files. Files might be a part of doorway pages.
                        $this->report_message = $report_data['message'];
                        $this->getScanResultEntriesObject($var_name);
                    } else {
                        $this->report_context = 'success';
                    }
                    break;

                case 'MaliciousCode':
                    if ((State::cnf('CWIS_RMASK_FULL') & State::cnf('CWIS_RMASK_SUSP')) === State::cnf('CWIS_RMASK_SUSP')) {
                        // Suspicious code detected. It's usually used in malicious scrips.
                        $this->report_message = $report_data['message'];
                        $this->getScanResultEntriesObject($var_name);
                    } else {
                        $this->report_context = 'success';
                    }
                    break;

                case 'PHPCodeInside':
                    if ((State::cnf('CWIS_RMASK_FULL') & State::cnf('CWIS_RMASK_PHPSIGN')) == State::cnf('CWIS_RMASK_PHPSIGN')) {
                        // Non-PHP file has PHP signature. Check for malicious code
                        $this->report_message = $report_data['message'];
                        $this->getScanResultEntriesObject($var_name);
                    } else {
                        $this->report_context = 'success';
                    }
                    break;

                default:
                    $this->report_message = $report_data['message'];
                    $this->getScanResultEntriesObject($var_name);
            }

            // Display a company's services offer?
            if ($this->report_context === 'danger' || $var_name === 'Iframer' || $var_name === 'NotRead') {
                $this->show_offer = true;
            }
        }

        return $this->report_result_entries;
    }

}
