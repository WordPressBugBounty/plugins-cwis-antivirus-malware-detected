<?php

namespace App\Library;

use App\State;

class CwisServerEnvInfo
{

    // Configuration options
    var $config;
    //
    var $php_funcs = array(
        'apache_child_terminate', 'chdir', 'chgrp', 'chmod', 'chown', 'dl', 'escapeshellarg',
        'escapeshellcmd', 'exec', 'extension_loaded', 'fsockopen', 'ftp_exec', 'get_current_user',
        'getmygid', 'getmyid', 'getmyuid', 'ini_restore', 'ini_set', 'leak', 'mysql_list_dbs',
        'passthru', 'pclose', 'pcntl_exec', 'pfsockopen', 'phpinfo', 'popen', 'posix_kill',
        'posix_setpgid', 'posix_setsid', 'posix_setuid', 'proc_close', 'proc_get_status',
        'proc_getstatus', 'proc_nice', 'proc_open', 'proc_terminate', 'putenv', 'safe_dir',
        'shell_exec', 'show_source', 'shown_source', 'symlink', 'system', 'virtual',
    );
    var $ini_get_enabled, $php_info = '';
    var $result = array();
    var $result_descriptions = array(
        'info'		 => _CWIS_PHPI_SYSTEM_INFO,
        'php_fail'	 => _CWIS_PHPI_SECURITY_WARNINGS,
        'php_pass'	 => _CWIS_PHPI_CONFIGURED_CORRECTLY,
        'func_on'	 => _CWIS_PHPI_ENABLED_FUNCTIONS,
        'func_off'	 => _CWIS_PHPI_DISABLED_FUNCTIONS,
        'server'	 => _CWIS_PHPI_SERVER_ENVIRONMENT,
        'cms'		 => _CWIS_PHPI_CMS_DETECTED,
        'plugins'	 => _CWIS_PHPI_PLUGINS_DETECTED,
    );

    /**
     * Use this method as a class constructor.
     * @param mixed $config
     */
    function construct($config = null)
    {
        // Pass configuration options
        if (gettype($config) === 'object') {
            $this->config = $config;
        }
    }

    function compareValues($value_1, $value_2, $operator)
    {
        switch ($operator) {
            case '==':
                return $value_1 == $value_2;

            case '===':
                return $value_1 === $value_2;

            case '!=':
            case '<>':
                return $value_1 != $value_2;

            case '!==':
                return $value_1 !== $value_2;

            case '<':
                return $value_1 < $value_2;

            case '>':
                return $value_1 > $value_2;

            case '<=':
                return $value_1 <= $value_2;

            case '>=':
                return $value_1 >= $value_2;
        }

        return null;
    }

    function extractResult($type = '', $key = '', $is_safe_if = '', $placeholder = '-?-')
    {
        // Use config data
        if ($key === 'memory_limit' && $this->config && $this->config->memory_limit_default) {
            $value = $this->config->memory_limit_default;
        }
        // Extract from phpinfo()
        elseif ($this->php_info) {
            $value = $this->extractValue($this->php_info, $key);
        }
        // Extract using ini_get()
        elseif ($this->ini_get_enabled) {
            if ('1' === ($value = ini_get($key))) {
                $value = 'On';
            }
        }
        // Insert empty result
        else {
            return $this->insertResult($type, $key, '');
        }

        // Set default PHP type to "test passed"
        if (substr($type, 0, 3) === 'php' && $type !== 'php_fail') {
            $type = 'php_pass';
        }

        // Process a conditional parameter
        if ($is_safe_if && substr($type, 0, 3) === 'php') {
            $matches = array();
            if (preg_match("#([\!\<\>\=]+)\s*(.*)#", $is_safe_if, $matches)) {
                $compare_operator = trim($matches[1]);
                $compare_value = $matches[2];

                // Compare values
                $type = $this->compareValues($value, $compare_value, $compare_operator) ? 'php_pass' : 'php_fail';
            }
        }

        return $this->insertResult($type, $key, $value ? $value : $placeholder);
    }

    function extractValue(& $str, $name)
    {
        $result = array();
        if (preg_match('|<tr><td class="e">\s*' . $name . '\s*</td><td class="v">(.+?)</td>|sm', $str, $result)) {
            return str_replace('no value', '', strip_tags($result[1]));
        }
    }

    function getPhpInfo()
    {
        $php_info = '';

        // Get and parse PHP-info
        if (functions_exists('phpinfo')) {
            ob_start();
            phpinfo();
            $php_info_raw = str_replace('border: 1px', '', ob_get_contents());
            ob_end_clean();

            $php_info_body = array();
            if ($php_info_raw && preg_match('#<body>(.*)</body>#smiu', $php_info_raw, $php_info_body)) {
                $php_info = $php_info_body[1];
            }
        }

        return $php_info;
    }

    function getServerEnvironment()
    {
        return array(
            'Admin Email'			 => $this->getServerVar('SERVER_ADMIN'),
            'HTTP Host'				 => $this->getServerVar('HTTP_HOST'),
            'Server Addr'			 => $this->getServerVar('SERVER_ADDR'),
            'Server Software'		 => $this->getServerVar('SERVER_SOFTWARE'),
            'Server Gateway'		 => $this->getServerVar('GATEWAY_INTERFACE'),
            'Server Signature'		 => $this->getServerVar('SERVER_SIGNATURE'),
            'Server Hostname'		 => @php_uname('n'),
            'Server Platform'		 => @php_uname('s') . ' ' . @php_uname('r') . ' ' . @php_uname('v'),
            'Server Architecture'	 => @php_uname('m'),
            //'User Name'				 => 'uid: ' . @getmyuid() . ', gid: ' . @getmygid(),
        );
    }

    function getServerVar($name = '')
    {
        $serverVar =  !empty($_SERVER[$name]) ? $_SERVER[$name] : 'None';

        return str_replace(['<address>', '</address>'], '', $serverVar);
    }

    function insertResult($type = '', $key = '', $value = '')
    {
        if (!isset($this->result[$type])) {
            return false;
        }

        if ($key) {
            if (is_array($key)) {
                // Parse pairs $key => $value
                foreach ($key as $i => $val) {
                    // Optional arrays support
                    $key[$i] = is_array($val) ? implode(', ', $val) : $val;
                }

                $this->result[$type] = array_merge($this->result[$type], $key);
            } else {
                $this->result[$type][$key] = $value;
            }
        } elseif ($value) {
            $this->result[$type][] = $value;
        }

        return true;
    }

    function parseResultInfo($report_format = 'html')
    {
        // Reset a result array
        $this->result = array();
        foreach ($this->result_descriptions as $type => $description) {
            $this->result[$type] = array();
        }

        // PHP OS
        $this->insertResult('info', 'PHP OS', PHP_OS);

        // PHP version
        $this->insertResult('info', 'PHP Version', PHP_VERSION);

        // Check if ini_get() is enabled
        $this->ini_get_enabled = functions_exists('ini_get');

        // Get and parse PHP info
        $this->php_info = $this->getPhpInfo();
        if ($this->php_info) {
            // Basic system info
            $this->extractResult('info', 'System');
            $this->extractResult('info', 'Server API');

            // Ini-file path
            if ($report_format === 'ng') {
                $this->extractResult('info', 'Loaded Configuration File');
            }
        } else {
            // phpinfo (and ini_get) is/are disabled
            $message = $this->ini_get_enabled ?
                'phpinfo() is disabled' : 'phpinfo() and ini_get() are disabled';
            $this->insertResult('info', State::msg('_CWIS_RESULT_PHP_INFO'), $message);
        }

        // Test sensitive PHP.ini values
        /////////////////////////////////////////////////////////////////
        //
        // HIGH: Function fopen() is allowed to open URLs.
        $this->extractResult('php', 'allow_url_fopen', '!= On');

        // HIGH: Functions include/require() can include URLs.
        $this->extractResult('php', 'allow_url_include', '!= On');

        // MEDIUM: No functions disabled.
        $this->extractResult('php', 'disable_functions', '!= ');

        // MEDIUM: Display_errors is on.
        $this->extractResult('php', 'display_errors', '!= On');
        $this->extractResult('php', 'display_startup_errors', '!= On');

        // HIGH: PHP can load extensions during runtime.
        $this->extractResult('php', 'enable_dl', '!= On');

        // LOW: Error reporting is off.
        $this->extractResult('php', 'error_reporting', '!= ');

        // LOW: PHP is exposed by HTTP headers.
        $this->extractResult('php', 'expose_php', '!= On');

        // You are not logging errors.
        $this->extractResult('php', 'log_errors', '== On');

        // How to find a script sending SPAM?
        // http://wiki.vds64.com/index.php/Find_Spam_Script
        $this->extractResult('php', 'mail.add_x_header', '== On');

        // HIGH: Magic quotes activated.
        $this->extractResult('php', 'magic_quotes_gpc', '!= On');
        $this->extractResult('php', 'magic_quotes_runtime', '!= On');
        $this->extractResult('php', 'magic_quotes_sybase', '!= On');

        // HIGH: Memory limit deactivated.
        $this->extractResult('php', 'memory_limit', '!=');

        // LOW: Option open_basedir not set.
        $this->extractResult('php', 'open_basedir', '!= ');

        // CRITICAL: Option register_globals is on.
        $this->extractResult('php', 'register_globals', '!= On');

        // HIGH: Security and Safe Mode check
        if (State::phpVersion() >= 50300) {
            $this->extractResult('php', 'safe_mode', '== On');
        }

        // Checking list of sensitive functions
        sort($this->php_funcs);
        foreach ($this->php_funcs as $php_func_name => $php_func_description) {
            // Raplace array index with variable name
            $php_func_name = is_numeric($php_func_name) ? $php_func_description : $php_func_name;

            // Check function status
            $php_func_on = (functions_exists($php_func_name));
            $this->insertResult('func_' . ($php_func_on ? 'on' : 'off'), $php_func_name, $php_func_description);
        }

        /////////////////////////////////////////////////////////////////////
        // Server environment
        $this->result['server'] = $this->getServerEnvironment();

        // Return result array
        return $this->result;
    }

    function printHtmlReport($report_format = 'html')
    {
        if ($report_format === 'json') {
            $output = array();

            foreach ($this->result as $type => $results) {
                if (empty($results)) {
                    continue;
                }

                // Define context
                switch ($type) {
                    case 'php_fail':
                        $context = 'danger';
                        break;

                    case 'func_on':
                        $context = 'warning';
                        break;

                    case 'php_pass':
                    case 'func_off':
                        $context = 'success';
                        break;

                    case 'cms':
                    case 'plugins':
                        $context = 'info';
                        break;

                    default:
                        $context = 'default';
                }

                // Result description
                $description = isset($this->result_descriptions[$type]) ?
                    $this->result_descriptions[$type] : $type;

                // Build the report content
                if ($type === 'func_on' || $type === 'func_off') {
                    $output[] = array(
                        'type'		 => $type,
                        'name'		 => $description,
                        'context'	 => $context,
                        'results'	 => array_values($results),
                        'count'		 => count($results)
                    );
                } else {
                    $output[] = array(
                        'type'		 => $type,
                        'name'		 => $description,
                        'context'	 => $context !== 'default' ? $context : 'muted',
                        'results'	 => $results, // key => values
                        'count'		 => count($results)
                    );
                }
            }

            return $output;
        } else {
                ob_start();
                ?>
                <div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true">
                    <?php
                    foreach ($this->result as $type => $results) {
                        if (empty($results)) {
                            continue;
                        }

                        // Define context
                        switch ($type) {
                            case 'php_fail':
                                $context = 'danger';
                                break;

                            case 'func_on':
                                $context = 'warning';
                                break;

                            case 'php_pass':
                            case 'func_off':
                                $context = 'success';
                                break;

                            case 'cms':
                            case 'plugins':
                                $context = 'info';
                                break;

                            default:
                                $context = 'default';
                        }

                        // Result description
                        $description = isset($this->result_descriptions[$type]) ? $this->result_descriptions[$type] : $type;

                        // Build the report content
                        if ($type === 'func_on' || $type === 'func_off') {
                            $content = '<span class="text-' . $context . '">'
                                . implode(', ', $results) . '</span>';
                        } else {
                            $content = '';
                            foreach ($results as $key => $value) {
                                $content .= htmlspecialchars($key, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') . ': <b class="text-'
                                    . ($context !== 'default' ? $context : 'muted') . '">'
                                    . htmlspecialchars($value, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') . '</b><br />';
                            }
                        }
                        ?>
                        <div class="panel panel-<?php echo $context; ?>">
                            <div class="panel-heading" role="tab" id="heading<?php echo ucfirst($type); ?>">
                                <h4 class="panel-title">
                                    <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion"
                                       href="#collapse<?php echo ucfirst($type); ?>" aria-controls="collapseThree"
                                       aria-expanded="<?php echo $type === 'info' ? 'true' : 'false'; ?>">
                                        <b><?php echo $description; ?></b>
                                        <?php echo $context !== 'default' ? ' (' . count($results) . ')' : ''; ?>
                                    </a>
                                </h4>
                            </div>
                            <div id="collapse<?php echo ucfirst($type); ?>" role="tabpanel"
                                 class="panel-collapse collapse<?php echo $type === 'info' ? ' in' : ''; ?>"
                                 aria-labelledby="heading<?php echo ucfirst($type); ?>">
                                <div class="panel-body">
                                    <?php echo $content; ?>
                                </div>
                            </div>
                        </div>

                        <?php
                    }
                    ?>
                </div>

                <?php
                $html = ob_get_contents();
                ob_end_clean();
            }

        return $html;
    }

}
