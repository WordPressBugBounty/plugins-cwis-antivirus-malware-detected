<?php

namespace App;

use App\Library\CwisApp;

class State
{

    protected static $config = [];
    protected static $translations = [];
    protected static $signatures = [];
    protected static $rootPath = '';

    public static function set_auth($config) {
      if($config && isset($config['config'])) {
        State::setCnf('CWIS_AUTH', $config['config']);
      }
    }

    public static function get_auth()
    {
        $routing = State::getRouting();
        $auth    = State::cnf('CWIS_AUTH');

        if (!$auth) {
            return $routing;
        }

        foreach ($routing['routes'] as &$val) {
            foreach($auth as $key => $enabled) {
                $skey = $val['params']['subaction'];
                if (isset($val['params']['cwis_task'])) {
                    $skey .= '-'.$val['params']['cwis_task'];
                }

                if ($skey == $key) {
                    if ($enabled) {
                        $val['enabled'] = 1;
                    } else {
                        $val['enabled'] = 0;
                    }
                    break;
                }
            }
        }
        return $routing;
    }

    public static function getRouting()
    {

      if (isset($settings['CWIS_ROUTING'])) {
        return $settings['CWIS_ROUTING'];
      }

      $q = file_get_contents(__DIR__  . '/../config/routing.json');
      $settings['CWIS_ROUTING'] = json_decode($q, true);
      return $settings['CWIS_ROUTING'];

    }

    public static function cnf(string $key)
    {
        return self::$config[$key] ?? null;
    }

    public static function setCnf(string $key, $value)
    {
        $currentConfig = read_custom_config();

        $isSet = isset($currentConfig[$key]);
        $diffVal = $isSet && $currentConfig[$key] !== $value;

        $currentConfig[$key] = $value;

        //if (!$isSet || $diffVal) {
            put_to_custom_config($currentConfig);
        //}

        return self::$config[$key] = $value;
    }

    public static function msg(string $key) : ?string
    {
        return self::$translations[$key] ?? null;
    }

    public static function isCli() : bool
    {
        return (self::cnf('CWIS_IS_CLI') && !self::cnf('CWIS_IS_CGI'));
    }

    public static function isCron() : bool
    {
        return self::cnf('CWIS_IS_CRON') ?? false;
    }

    public static function version() : ?string
    {
        return self::cnf('CWIS_VERSION');
    }

    public static function pluginVersion() : ?string
    {
        return self::cnf('CWIS_PLUGIN_VERSION');
    }

    public static function phpVersion() : int
    {
        return PHP_VERSION_ID;
    }

    public static function makePath(array $parts) : ?string
    {
        return implode(DIRECTORY_SEPARATOR, $parts);
    }

    public static function scanPath() : ?string
    {
        if(self::cnf('CWIS_SCAN_PATH')){
            return self::cnf('CWIS_SCAN_PATH');
        }

        if(defined('ABSPATH')){
            return substr(ABSPATH, 0, -1);
        }

        if(isset($_SERVER['DOCUMENT_ROOT'])) {
          return realpath($_SERVER['DOCUMENT_ROOT']);
        }

        return null;
    }

    public static function rootPath() : ?string
    {
        return self::cnf('CWIS_ROOT_PATH');
    }

    public static function workPath() : ?string
    {
        return self::cnf('CWIS_WORK_PATH');
    }

    public static function tempPath() : ?string
    {

        // TODO:: Better debug, this option works best on testing servers
        if(defined('ABSPATH')) {
          return substr(ABSPATH, 0, -1) . '/wp-content/uploads/cwis';
        }

        if(self::cnf('CWIS_TEMP_PATH')){
            return self::cnf('CWIS_TEMP_PATH');
        }
        if(functions_exists('wp_upload_dir')){
            return wp_upload_dir()['basedir'] . '/cwis';
        }

        if ($path = realpath(__DIR__ . '/../../../../uploads/cwis')) {
            return $path;
        }

        return null;
    }

    public static function abspath() : ?string {
       return self::cnf('ABSPATH') ?? (defined('ABSPATH') ?  ABSPATH :  null);
   }

   public static function getContentRoot() {
       return defined('FS_CHMOD_DIR') ? FS_CHMOD_DIR : (defined('WP_CONTENT_DIR') ? WP_CONTENT_DIR : self::rootPath());
   }

   public static function isAdmin() : bool {
       if(functions_exists('is_admin')){
           return is_admin();
       }

       return false;
   }

    public static function listsPath() : ?string
    {
        return self::cnf('CWIS_LISTS_PATH') ?? self::tempPath(). DIRECTORY_SEPARATOR . 'CWIS-LISTS';
    }

    public static function tasksPath() : ?string
    {
        return self::cnf('CWIS_TASKS_PATH') ?? self::tempPath(). DIRECTORY_SEPARATOR . 'CWIS-TASKS';
    }

    public static function assetsPath() : string
    {
        return self::cnf('CWIS_ASSETS_PATH') ?? self::tempPath(). DIRECTORY_SEPARATOR . 'CWIS-ASSETS';
    }

    public static function quarantinePath() : ?string
    {
        return self::cnf('CWIS_QUARANTINE_PATH') ?? self::tempPath(). DIRECTORY_SEPARATOR . 'CWIS-QUARANTINE';
    }

    public static function whiteFilePath() : ?string
    {
        return self::cnf('CWIS_WHITEFILE_PATH') ?? self::tempPath(). DIRECTORY_SEPARATOR . 'CWIS-WHITEFILE';
    }

    public static function resultsPath() : ?string
    {
        return self::cnf('CWIS_RESULTS_PATH') ?? self::tempPath(). DIRECTORY_SEPARATOR . 'CWIS-RESULTS';
    }

    public static function cwisAjaxId() : ?string
    {
        return self::cnf('CWIS_AJAX_ID');
    }

    public static function cwisAjaxPass() : ?string
    {
        return self::cnf('CWIS_AJAX_PASS');
    }

    public static function cwisRestNonce() : ?string
    {
        return self::cnf('CWIS_REST_NONCE');
    }

    public static function cwisRestTotp() : ?string
    {
        return self::cnf('CWIS_TOTP_KEY');
    }

    public static function cwisDebug() : ?string
    {
        return self::cnf('CWIS_DEBUG');
    }

    public static function loadTranslations($language) : array
    {
        if(!self::$translations){
            self::$translations = slimapp_load_translations($language);

            foreach (self::$translations as $key => $value) {
                self::$translations['_CWIS_'.$key] = $value;
            }
        }

        return self::$translations;
    }

    /**
     * @param string $platformType
     * @return array
     */
    public static function loadConfig(string $platformType) : array
    {
        if(!self::$config){

            self::$config = slimapp_load_config($platformType);

            foreach (self::$config as $k => $v) {
                if (!defined($k)) {
                    define($k, $v);
                }
            }
        }

        return self::$config;
    }

    public static function loadSignatures() : array
    {
        return slimapp_load_signatures();
    }

    public static function detectLang() : string
    {
        return 'en';
    }

    public static function cwisApp(int $debug_mode = 0) : CwisApp
    {
        // Start cron job
        $app = new CwisApp();
        $app->construct($debug_mode, self::cnf('CWIS_SCAN_PATH'));

        return $app;
    }
}
