<?php

namespace App\Actions;

use App\Actions\Quarantine;
use App\Actions\Explorer;
use App\State;
use App\Library\CwisApp;
use App\Library\CwisApi;

class Scanner extends BaseAction
{
    public function __invoke($params): array
    {
        $op = isset($params['cwis_task']) ? $params['cwis_task'] : '-';
        $res = [];
        switch ($op) {
            case 'is_signatures_loaded':
                $res = ['loaded' => can_load_signatures()];
                break;
        }

        if ($res) {
            return $res;
        }

        if (!is_readable(State::workPath())) {
            throw new \Exception('Working directory is not readable. Please change permission for <b>rwxr-xr-x</b> or using command line <b>chmod +r directory_name</b>!', 500);
        }

        if (!State::isCli() && !get_server_env('HTTP_USER_AGENT')) {
            throw new \Exception("Cannot run on PHP-CGI. Requires PHP as CLI!");
        }

        $app = new CwisApp();
        $app->construct(0, State::scanPath(), $params);
        $progress_data = $app->start();

        unset($progress_data['queue']->statistics);

        $result = (array) $progress_data['queue'];
        if (isset($result['results'])) {
            $result['results'][] = [ 'count' => Quarantine::quarantine_run(['subaction' => 'quarantine_count']), 'name' => "Quarantine", 'type' => "info" ];
            $basedir = State::scanPath();
            self::append_hashes($basedir, $result['results']);
        }

        $result['params'] = $params;

        return $result;

    }

    private static function append_hashes($basedir, &$results)
    {
        $remote_db = CwisApi::fetch_hashes();

        $mismatch = 0;
        $missing  = 0;
        $matching = 0;

        foreach($remote_db as $remote) {
            if ($remote['is_match'] === false) {
              $mismatch++;
            }
            if ($remote['is_match'] === true) {
              $matching++;
            }
            if ($remote['is_missing'] === true) {
              $missing++;
            }
        }

        $results[] = [ 'count' => $matching, 'name' => "Hash Matched", 'type' => "info" ];
        $results[] = [ 'count' => $mismatch, 'name' => "Hash Changed", 'type' => "vuln" ];
        $results[] = [ 'count' => $missing, 'name' => "Hash Not Found", 'type' => "susp" ];
    }

}
