<?php

namespace App\Actions;

use App\Library\CwisApp;
use App\Library\CwisData;
use App\Library\CwisResponse;
use App\Library\CwisManageQuarantine;
use App\Library\CwisApi;
use App\Library\CwisFS;
use App\State;

class Archive extends BaseAction
{
    public function __invoke($params): ?array
    {
        return self::archive_run($params);
    }

    public static function recursive_add($quarantine, $dir, &$result)
    {
        foreach (scandir($dir) as $file) {
            $fileOrDir=$dir.DIRECTORY_SEPARATOR.$file;
            if ($file != '.' && $file != '..') {
                if (is_dir($fileOrDir)) {
                    Archive::recursive_add($quarantine, $fileOrDir, $result);
                } else {
                    $result['data'][] = [ $fileOrDir, $quarantine->manageFile('move', $fileOrDir) ];
                }
            }
        }
    }

    public static function archive_run($params)
    {
        if (!isset($params['subaction'])) {
            return ['success' => false, 'error' => 'missing_action'];
        }

        $type = 'application/json';
        $result = [ 'success' => true, 'data' => [], 'root' => State::scanPath(), 'op' => $op ];
        $zipfile = State::resultsPath() . DIRECTORY_SEPARATOR . 'patch.zip';
        $cwis = new CwisApp();
        $cwis->construct(0, State::scanPath());
        $cwis->initScanCoreMethods();

        $files = $params['files'] ?? [];
        $folders = $params['folders'] ?? [];

        $quarantine = new CwisManageQuarantine();

        $op = $params['subaction'];

        switch ($op) {
            case 'archive_local_rm':
                $sync    = $params['sync'] == true;
                $code    = json_encode(['files' => $files, 'folders' => $folders]);
                $zipfn   = 'export-' . md5($code) . '.zip';
                $zipfile = State::scanPath() . DIRECTORY_SEPARATOR . $zipfn;

                if ($sync) {
                    CwisApi::upload_archive($zipfile, $code);
                }

                return [ 'success' => true ];
            break;

            case 'archive_local':
                $code    = json_encode(['files' => $files, 'folders' => $folders]);
                $zipfn   = 'export-' . md5($code) . '.zip';

                CwisFS::archive($files, $folders, $zipfn);

                return [ 'success' => true, 'archive' => $zipfn ];
            break;

            case 'archive_remote':
                if (($files && count($files)) || ($folders && count($folders))) {
                    $res = CwisApi::fetch_archive($files, $folders);
                    try {
                        $decRes = json_decode($res, true);
                        if ($decRes['success']) {
                            return [ 'success' => true, 'archive' =>
                                State::cnf('CWIS_HOST_API') . '/site_api/' .
                                State::cwisRestNonce() . '/hashes/archive' ];
                        } else {
                            return [ 'success' => false, 'error' => $res ];
                        }
                    } catch (\Exception $e) {
                        return [ 'success' => false, 'error' => $e->getMessage() ];
                    }
                }
            break;

            case 'archive_check':
                CwisApi::fetch_patch($zipfile);

                $zip = new \ZipArchive;
                if ($zip->open($zipfile) === true) {
                    for ($i = 0; $i < $zip->numFiles; $i++) {
                        $RETVAL = false;
                        $filename = $zip->getNameIndex($i);
                        $result['data'][] = [ 'unzip' => $filename ];
                    }
                    $zip->close();
                }
            break;
            case 'archive_reset':
                $reset = CwisFS::reset($files, $folders, $zipfile);
                if ($reset) {
                    $result['data'] = $reset;
                } else {
                    $result['zip']     = '';
                    $result['success'] = false;
                    $result['error']   = 'bad_zip';
                }
            break;
        }

        return $result;
    }
}
