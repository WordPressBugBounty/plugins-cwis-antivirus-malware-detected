<?php

namespace App\Actions;

use App\State;
use App\Library\CwisUtilities;
use App\Library\CwisResponse;


class LogViewer extends BaseAction
{
    public function __invoke($params): ?string {

        $file_lines = isset($params['cwis_log_lines']) ? $params['cwis_log_lines'] : 100;
        $log_type = isset($params['cwis_log_type']) ? $params['cwis_log_type'] : 'debug';
        $file_contents  = '';
        
        $utilities = new CwisUtilities();
        // Set scan path in utilities class
        $utilities->setScanPath(State::scanPath());
        switch ($log_type) {

            case 'debug': //Debug Log
                $file_name = $utilities->defineFilePath('debug');
            break;

          case 'errors': //PHP Error Log
              if (!functions_exists('ini_get') || !($file_name = ini_get('error_log'))) {
                  $file_name = State::tempPath() . DIRECTORY_SEPARATOR . "CWIS-PHP-ERROR.php";
              }
              break;

          case 'prescan': //Prescan Log
              $file_name = $utilities->defineFilePath('prescan');
              break;

          case 'rescan': //Rescan Log
              $file_name = $utilities->defineFilePath('rescan');
              break;
        }

        if (@is_readable($file_name)) {
            $file = @file_get_array($file_name);
            $file_size = count($file);
            $file_start = $file_lines >= 0 ? max(0, $file_size - $file_lines) : 0;

            for ($i = $file_start; $i < $file_size; $i++) {
                $file_contents .= strtok($file[$i], "\t") . "\n";
            }
            return $file_contents;
        } else {
          return '';
        }


    }

}
