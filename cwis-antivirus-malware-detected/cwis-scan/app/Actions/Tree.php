<?php

namespace App\Actions;
use App\Library\CwisApp;
use App\Library\CwisData;
use App\Library\CwisDirsCreator;
use App\Library\CwisManageQuarantine;
use App\Library\Cwis_Defender_Guarder;
use App\Library\CwisApi;
use App\Library\CwisFS;
use App\Library\CwisUtilities;
use App\State;
use Exception;

class Tree extends BaseAction
{
    public function __invoke($params): ?array
    {
        try {
            $basedir = State::scanPath();

            $parent  = isset($params['node']) && isset($params['node']['id']) && $params['node']['id'] !== '#' ?
                base64_decode($params['node']['id']) : '';

            $files = array_diff(scandir($basedir . '/' . $parent), array('..', '.'));

            $filters = isset($params['filters']) ? $params['filters'] : [ 'types' => [] ];
            // Filter out based on ext
            $this->ext_filter = [];
            if (isset($filters) && isset($filters['ext']) && count($filters['ext'])) {
                $this->ext_filter = array_values($filters['ext']);
            }
            $out   = [];

            foreach ($files as $file) {
                $fn = $basedir . DIRECTORY_SEPARATOR . $parent . DIRECTORY_SEPARATOR . $file;
                $is_dir = is_dir($fn);
                $stat = false;

                if (!$is_dir) {
                    $ext = strtolower(pathinfo($file, PATHINFO_EXTENSION));
                    if (in_array($ext, $this->ext_filter)) {
                        continue;
                    }
                }

                $stat = ($is_dir || is_file($fn)) ? stat($fn) : false;
                if ($stat) {
                    $stat['perm'] = substr(sprintf("%o",fileperms($fn)),-4);
                }

                $item = [
                    'id' => base64_encode($parent . DIRECTORY_SEPARATOR . $file),
                    'parent' => $parent ?  base64_encode($parent) : '#',
                    'children' => $is_dir,
                    'text' => $file,
                    'type' => $is_dir ? 'dir' : 'file',
                    'data' => [
                        'tags' => [ 'real' => 1 ],
                        'stat' => $stat
                    ]
                ];

                if ($is_dir) {
                    $item['data']['tags']['dir'] = 1;
                } else {
                    $item['data']['tags']['file'] = 1;
                }

                $out[] = $item;
            }

            // Augment data with
            // 1. Scanner results
            // 2. Hashes
            // 3. Quarantine

            $out = $this->append_quarantine($basedir, $parent, $out, $filters);
            $out = $this->append_vulnerable($basedir, $parent, $out, $filters);
            $out = $this->append_hashes($basedir, $parent, $out, $filters);

            $out = $this->apply_filters($out, $filters['types']);

            $type  = array_column($out, 'type');
            $text = array_column($out, 'text');
            array_multisort($type, SORT_ASC, $text, SORT_ASC, $out);

            return $out;
        } catch (Exception $ex) {
            return ['error' => $ex->getMessage()];
        }
    }

    private function apply_filters($out, $filters)
    {
        foreach ($out as $id => $data) {
            foreach ($data['data']['tags'] as $tag => $count) {
                if (in_array($tag, $filters)) {
                    if ($data['type'] == 'dir') {
                        unset($out[$id]['data']['tags'][$tag]);
                    } else {
                        unset($out[$id]);
                    }
                }
            }
            // If we don't have other tags -- remove result (file + real == 2)
            if (isset($out[$id]) && count($out[$id]['data']['tags']) <= 2 && count($filters)) {
                unset($out[$id]);
            }
        }

        return $out;
    }

    private function append_hashes($basedir, $parent, $tree, $filters)
    {
        $remote_db = CwisApi::fetch_hashes();

        foreach($remote_db as $remote) {

            if (false && count($this->ext_filter)) {
                $ext = strtolower(pathinfo($remote['name'], PATHINFO_EXTENSION));

                if (in_array($ext, $this->ext_filter)) {
                    continue;
                }
            }

            foreach ($tree as &$node) {

                $dec = base64_decode($node['id']);

                if ($node['type'] == 'dir') {
                    if (str_starts_with($remote['path'], $dec)) {
                        if ($remote['is_missing']) {
                            if (!isset($node['data']['tags']['missing'])) {
                                $node['data']['tags']['missing'] = 0;
                            }
                            $node['data']['tags']['missing']++;
                        }
                        if ($remote['is_match'] === true) {
                            if(!isset($node['data']['tags']['match'])) {
                                $node['data']['tags']['match'] = 0;
                            }
                            $node['data']['tags']['match']++;
                        }
                        //print_r($remote);
                        if ($remote['is_match'] === false) {
                            if (!isset($node['data']['tags']['mismatch'])) {
                                $node['data']['tags']['mismatch'] = 0;
                            }
                            $node['data']['tags']['mismatch']++;
                            $node['data']['meta'][] = $remote;
                        }
                    }
                }

                if ($node['type'] == 'file' && $remote['path'] . $remote['name'] == $dec) {
                    //echo $remote['path'] . $remote['name'];
                    $node['data']['data']['remote'] = $remote;
                    if ($remote['is_deleted']) {
                        $node['data']['tags']['deleted'] = 1;
                    }
                    if ($remote['is_modified']) {
                        $node['data']['tags']['modified'] = 1;
                    }
                    if ($remote['is_quarantine']) {
                        $node['data']['tags']['quarantine'] = 1;
                    }
                    if ($remote['is_vulnerable']) {
                        //$node['data']['tags']['vulnerable'] = 1;
                    }
                    if ($remote['is_whitelisted']) {
                        $node['data']['tags']['whitelist'] = 1;
                    }
                    if ($remote['is_missing']) {
                        $node['data']['tags']['missing'] = 1;
                    }
                    if ($remote['is_match'] === true) {
                        $node['data']['tags']['match'] = 1;
                    }
                    if ($remote['is_match'] === false) {
                        $node['data']['tags']['mismatch'] = 1;
                    }

                    // Single file loop escape if matched
                    break;
                }
            }
        }

        return $tree;
    }

    private function check_tag_filter($tag, $filter)
    {
        if(isset($filter['types']) && count($filter['types'])) {
            if(in_array($tag, $filter['types'])) {
                return true;
            }
        }
        return false;
    }

    private function append_vulnerable($basedir, $parent, $tree, $filter)
    {
        $scan_path = State::scanPath();
        $dirsCreator = new CwisDirsCreator();
        $dirsCreator->setFilePathHash($scan_path);
        $filepath = $dirsCreator->getResultsFilePath('results');
        $serialized_data = file_get_contents_safe($filepath);
        $result = $serialized_data ? @unserialize($serialized_data) : [];

        foreach($tree as &$node) {
            $dec = base64_decode($node['id']);
            /*if(substr($dec, 0, 2) == '//') {
              $dec = substr($dec, 1);
              echo $dec;
            }*/

            foreach ($result as $i2 => $rule) {
                if (is_array($rule)) {
                    foreach($rule as $i3 => $vuln) {
                        if (false && count($this->ext_filter)) {
                            $ext = strtolower(pathinfo($vuln['name'], PATHINFO_EXTENSION));
                            if (in_array($ext, $this->ext_filter)) {
                                continue;
                            }
                        }

                        if ($node['type'] == 'dir') {
                            if (is_array($vuln) && isset($vuln['name']) && strpos(dirname($vuln['name']), $dec) !== false) {
                                if (!isset($row['data']['tags']['vulnerable'])) {
                                    //  $row['data']['tags']['vulnerable'] = 0;
                                }
                                //$node['data']['tags']['vulnerable']++;

                                if (!isset($node['data']['tags'][$i2])) {
                                    $node['data']['tags'][$i2] = 0;
                                }
                                $node['data']['tags'][$i2]++;
                            }
                        }

                        if ($node['type'] == 'file') {
                            if (is_array($vuln) && isset($vuln['name'])) {
                                if(substr($vuln['name'], 0, 3) == '>//') {
                                    $vuln['name'] = substr($vuln['name'], 1);
                                }

                                if (substr($vuln['name'], 1) == $dec) {
                                    //$node['data']['tags']['vulnerable'] = 1;
                                    $node['data']['tags'][$i2] = 1;
                                }
                            }
                        }
                    }
                }
            }
        }

      return array_values($tree);
    }

    private function append_quarantine($basedir, $parent, $tree)
    {
        $cwis = new CwisApp();
        $cwis->construct(0, State::scanPath());
        $cwis->initScanCoreMethods();

        $quarantine = new CwisManageQuarantine();
        $utilities = new CwisUtilities();
        $quarantinedir = State::quarantinePath();
        $path_quarantine = $quarantine->getPathManagedFileList();

        $quarantines = file_get_array($path_quarantine);
        foreach ($quarantines as $file) {
            $is_dir = false;

            $managed_basename = $utilities->filenameSanitize(basename($file)) . '-' . md5($file);
            $quarantineFile = $quarantinedir . DIRECTORY_SEPARATOR . $managed_basename;

            $stat = is_file($quarantineFile) ? stat($quarantineFile) : false;
            if ($stat) {
                $stat['perm'] = substr(sprintf("%o",fileperms($quarantineFile)),-4);
            }

            $file = str_replace($basedir, '', $file);

            if (false && count($this->ext_filter)) {
                $ext = strtolower(pathinfo($file, PATHINFO_EXTENSION));
                if (in_array($ext, $this->ext_filter)) {
                    continue;
                }
            }

            if (!$parent || strpos($file, $parent) !== false) {

                $immidiate = strpos(str_replace($parent, '', $file), '/', 1) === false;

                if ($immidiate) {
                    $found = false;
                    $enc = base64_encode($file);
                    foreach ($tree as $x => &$row) {
                        if ($row['id'] == $enc) {
                            $found = true;
                            $row['data']['tags']['quarantine'] = 1;
                            $row['data']['stat'] = $stat;
                            break;
                        }
                    }

                    if (!$found) {
                        $item = [
                            'id' => $enc,
                            'parent' => $parent ? base64_encode($parent) : '#',
                            'children' => $is_dir,
                            'text' => str_replace($parent . '/', '', $file),
                            'type' => 'file',
                            'data' => [ 'tags' => [ 'quarantine' => 1, 'real' => 1, 'file' => 1 ], 'stat' => $stat ]
                        ];
                        $tree[] = $item;
                    }
                } else {
                    foreach ($tree as $x => &$row) {
                        if ($row['type'] == 'dir' && strpos(dirname($file), base64_decode($row['id'])) !== false) {
                            if (!isset($row['data']['tags']['quarantine'])) {
                                $row['data']['tags']['quarantine'] = 0;
                            }
                            $row['data']['tags']['quarantine']++;
                        }
                    }
                }
            }
        }
        return $tree;
    }
}
