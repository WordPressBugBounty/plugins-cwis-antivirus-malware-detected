<?php

namespace App\Actions;

use App\Library\CwisApp;
use App\Library\CwisAppCore;
use App\Library\CwisData;
use App\Library\CwisResponse;
use App\Library\CwisResults;
use App\Library\CwisManageQuarantine;
use App\Library\CwisManager;
use App\Library\CwisWhitelist;
use App\Library\CwisApi;
use App\Library\CwisFS;
use App\State;

class Whitelist extends BaseAction
{
    public function __invoke($params): ?array {
      return $this->whitelist($params);
    }

    private static function fileHashManage($appCore, $file_name = '', $hash_mode = null, $state = true)
    {
        //if ($appCore->config->license) {
        if ($hash_mode !== 'insert' && $hash_mode !== 'remove') {
            header('HTTP/1.0 403 Forbidden');
            die('Unknown hash mode received!');
        }

        // New whitelist object
        $whitelist = new CwisWhitelist();
        $whitelist->construct($appCore->config);

        // Read the file
        if (is_file($file_name) && is_readable($file_name)) {

            // Get file content unwrapped
            $file_contents_unwrapped = $whitelist->fileContentUnwrapped($file_name);

            // Detect unicode and convert to UTF-8 using iconv()
            $whitelist->fileContentUtf8Encoded($file_contents_unwrapped);

            // Get CRC of file content
            $file_hash = $whitelist->getSha1Hash($file_contents_unwrapped);

            // TODO: transform to the new class or method
            if (true) {
                // Load and set scan results
                $cwisResults = new CwisResults();
                $results = $appCore->progress->loadResults();
                $cwisResults->setResults($results);

                // Move this check result to the whitelisted results
                $entry_name_list_packed = $cwisResults->filterByKey('name');
                $entry_name_list = $appCore->utilities->filenameExpand($entry_name_list_packed);

                // filter by cat
                foreach ($entry_name_list as $key => $entry) {
                    if (strpos($key, 'Whitelisted') === false) {
                        unset($entry_name_list[$key]);
                    }
                }

                $entry_index = array_search($file_name, $entry_name_list);

                // Move this check result to the whitelisted results
                $var_name = $key = ''; // initialize VAR_NAME and KEY
            }

            $result = false;
            if ($hash_mode === 'insert') {
                $result = $whitelist->insertHash($file_hash);
                // Move this entry (check result) to the whitelisted results
                if ($entry_index && $cwisResults->convertEntryIndex($entry_index, $var_name, $key)) {

                    $cwisResults->select($var_name); // select VAR_NAME
                    if ($cwisResults->moveTo('Whitelisted', $key)) {
                        $appCore->progress->saveResults($cwisResults->all());
                    }
                } else {

                  $file_stat = $appCore->scanner->cachedFileStat($file_name);
                  if (null === $file_stat) {
                      return null;
                  }

                  // File size and type
                  $filesize = $file_stat['size'];
                  $filetype = $file_stat['type'];
                  $result_entry_data = array( 'name'		 => $file_name, 'fragment'	 => 'Whitelisted', 'stat'		 => $file_stat);
                  $appCore->scanner->addCheckResultsIndirect('Whitelisted', $result_entry_data, false, State::cnf('CWIS_MAX_EXTERNAL_LINKS'));
                  //$appCore->scanner->results->select('Whitelisted');
                  //$cwisResults->mergeScanResults([ 'Whitelisted' => $appCore->scanner->results->get() ]);
                  $appCore->progress->saveResults($appCore->scanner->results->all());

                }

                // Copy to the "whitefiles" directory
                if (State::cwisDebug() > 0) {
                    $whitefile = new CwisManager();
                    $whitefile->whiteFile();
                    if (!$whitefile->manageFile('copy', $file_name)) {
                        if($state){
                            $appCore->jsonError($whitefile->getLastError());
                        } else {
                            return $whitefile->getLastError();
                        }
                    }
                }
            } elseif ($hash_mode === 'remove') {
                $result = $whitelist->removeHash($file_hash, 0, State::cwisDebug() !== null ? 3 : 1);
                if ($entry_index && $cwisResults->convertEntryIndex($entry_index, $var_name, $key)) {
                    $cwisResults->select($var_name); // select VAR_NAME
                    if ($cwisResults->moveTo('Heuristic', $key)) {
                        $appCore->progress->saveResults($cwisResults->all());
                    }
                }

                // Remove from the "whitefiles" directory
                if (State::cwisDebug() > 0) {
                    $whitefile = new CwisManager();
                    $whitefile->whiteFile();
                    if (!$whitefile->manageFile('delete', $file_name)) {
                        if($state){
                            $appCore->jsonError($whitefile->getLastError());
                        } else {
                            return $whitefile->getLastError();
                        }
                    }
                }
            }

            return $file_hash;

        } else {
          return true;
        }

    }

    public static function recursive_add($quarantine, $dir, &$result) {
      foreach(scandir($dir) as $file) {
        $fileOrDir=$dir.DIRECTORY_SEPARATOR.$file;
        if($file != '.' && $file != '..') {
          if(is_dir($fileOrDir)) {
              Whitelist::recursive_add($quarantine, $fileOrDir, $result);
          } else {
              $result['data'][] = [ $fileOrDir, $whitelist->manageFile('add', $fileOrDir) ];
          }
        }
      }
    }

    public static function whitelist($params) {

      $files = $params['files'] ?? [];
      $folders = $params['folders'] ?? [];

      $type = 'application/json';
      $result = [ 'success' => true, 'data' => [], 'root' => State::scanPath() ];
      $cwis = new CwisApp();
      $cwis->construct(0, State::scanPath());
      //$cwis->initScanCoreMethods();
      $cwis->initScannerMethods();

      //$app->scanner->loadIgnoredExt();
      //$app->scanner->loadIgnoreLists();
      $cwis->scanner->loadOptimizeSignatures();

      //$cwis->mergeProgressData(State::scanPath());
      //$cwisResults = new CwisResults();

      //$cwisResults->setResults($results);
      $appCore = new CwisAppCore();
      $appCore->constructApp($cwis);
      $appCore->initialise();
      //$results = $appCore->progress->loadResults();
      
      $op = $params['subaction'] ?? 'whitelist_list';

      switch ($op) {

          case 'whitelist_list':



          break;

          case 'whitelist_add':

            foreach ($files as $index => $file) {
                if (substr( $file, 0, 1 ) !== "/") {
                    $file = DIRECTORY_SEPARATOR . $file;
                }
                $file_name = State::scanPath() . $file;
                $result['data'][] = [ 'file' => $file, 'hash' => self::fileHashManage($appCore, $file_name, 'insert', false) ];
            }
            if (count($result['data'])) {
                $result['remote'] = CwisApi::whitelist_add($result['data']);
            }

          break;

          case 'whitelist_remove':

            foreach ($files as $index => $file) {
                $fn = State::scanPath() . DIRECTORY_SEPARATOR . $file;
                $fn = str_replace('///', '/', $fn);
                $fn = str_replace('//', '/', $fn);

                $result['data'][] = [ 'file' => $fn, 'op' => self::fileHashManage($appCore, $fn, 'remove', false) ];
            }
            if (count($result['data'])) {
                $result['remote'] = CwisApi::whitelist_remove($result['data']);
            }

          break;

      }

      return $result;

    }

}
