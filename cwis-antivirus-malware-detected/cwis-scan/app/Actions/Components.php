<?php

namespace App\Actions;

require_once ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';

use App\Adapters\WpAdapter;
use Automatic_Upgrader_Skin;
use Exception;
use Plugin_Upgrader;
use Bulk_Plugin_Upgrader_Skin;
use Theme_Upgrader;

class Components extends BaseAction
{
    public function __invoke($dt, $params ): array
    {
        try {
            $op = isset($params['cwis_task']) ? $params['cwis_task'] : '-';

            switch ($op) {
                case 'enable':
                    $res = $this->enable($params);
                    break;
                case 'is_core_update':
                    $res = $this->isCoreUpdate();
                    break;
                case 'upgrade':
                    $res = $this->upgrade($params);
                    break;
                case 'disable':
                    $res = $this->disable($params);
                    break;
                default:
                    $res = $this->list($dt, $params);
                    break;
            }

            return $res;
        } catch (Exception $ex) {
            return ['error' => $ex->getMessage()];
        }
    }

    private function isCoreUpdate()
    {
        $allComponents = $this->getInfoList();
        if (array_key_exists('wordpress', $allComponents) && $allComponents['wordpress']['buttons']['upgrade']) {
            $message = sprintf(
            /* translators: 1: Documentation on WordPress backups, 2: Documentation on updating WordPress. */
                __( '<strong>Important:</strong> Before updating, please <a href="%1$s">back up your database and files</a>. For help with updates, visit the <a href="%2$s">Updating WordPress</a> documentation page.' ),
                __( 'https://wordpress.org/documentation/article/wordpress-backups/' ),
                __( 'https://wordpress.org/documentation/article/updating-wordpress/' )
            );

            $message = str_replace('a href=', 'a target=”_blank” href=', $message);

            return ['status' => true, 'msg' => $message];
        }

        return ['status' => false, 'msg' => ''];
    }

    private function upgrade($params)
    {
        $adapter = new WpAdapter();

        if (!isset($params["components"])) {
            return [ 'success' => false, 'error' => 'no_components_for_upgrade' ];
        }

        $allComponents = $this->getInfoList();
        $components = $params["components"];
        $upgradeList = [];
        foreach ($components as $component) {
            if (array_key_exists($component, $allComponents) && $allComponents[$component]['buttons']['upgrade']) {
                $upgradeList[$allComponents[$component]['type']][$component] = $allComponents[$component];
            }
        }

        $upgradedList = [];
        $noUpgradedList = [];
        if ($upgradeList) {
            // plugins update
            if (isset($upgradeList["plugins"]) && $upgradeList["plugins"]) {
                foreach ($upgradeList["plugins"] as $component) {
                    try {
                        if ($adapter->upgradePlugin($component['file'])) {
                            $upgradedList[] = $component['title'];
                        } else {
                            $noUpgradedList[] = $component['title'];
                        }
                    } catch (Exception $ex) {
                        $noUpgradedList[] = $component['title'];
                    }
                }
            }

            // themes update
            if (isset($upgradeList["themes"]) && $upgradeList["themes"]) {
                foreach ($upgradeList["themes"] as $component) {
                    try {
                        if ($adapter->upgradeTheme($component['name'])) {
                            $upgradedList[] = $component['title'];
                        } else {
                            $noUpgradedList[] = $component['title'];
                        }
                    } catch (Exception $ex) {
                        $noUpgradedList[] = $component['title'];
                    }
                }
            }

            // core update
            if (isset($upgradeList["core"]) && $upgradeList["core"]) {
                foreach ($upgradeList["core"] as $component) {
                    try {
                        if ($component['name'] == 'wordpress' && $adapter->upgradeWordpress($component)) {
                            $upgradedList[] = $component['title'];
                        } else {
                            $noUpgradedList[] = $component['title'];
                        }
                    } catch (Exception $ex) {
                        $noUpgradedList[] = $component['title'];
                    }
                }
            }
        }

        return ['success' => (bool)$upgradedList, 'list' => $upgradedList, 'nu_list' => $noUpgradedList];
    }

    private function enable($params)
    {
        $adapter = new WpAdapter();

        if (!isset($params["components"])) {
            return [ 'success' => false, 'error' => 'no_components_for_enable' ];
        }

        $allComponents = $this->getInfoList();
        $components = $params["components"];
        $enableList = [];
        foreach ($components as $component) {
            if (array_key_exists($component, $allComponents) && $allComponents[$component]['buttons']['enable']) {
                $enableList[$allComponents[$component]['type']][$component] = $allComponents[$component];
            }
        }

        $enabledList = [];
        if ($enableList) {
            if (isset($enableList["plugins"]) && $enableList["plugins"]) {
                foreach ($enableList["plugins"] as $component) {
                    try {
                        $adapter->enablePlugin($component['file']);
                        $enabledList[] = $component['title'];
                    } catch (Exception $ex) {}
                }
            }

            if (isset($enableList["themes"]) && $enableList["themes"]) {
                $theme = '';
                foreach ($enableList["themes"] as $component) {
                    try {
                        if ($adapter->enableTheme($component['name'])) {
                            $theme = $component['title'];
                        }
                    } catch (Exception $ex) {}
                }
                if ($theme) {
                    $enabledList[] = $theme;
                }
            }
        }

        if ($enabledList) {
            return ['success' => true, 'list' => $enabledList];
        } else {
            return ['success' => false, 'list' => []];
        }
    }

    private function disable($params)
    {
        $adapter = new WpAdapter();

        if (!isset($params["components"])) {
            return [ 'success' => false, 'error' => 'no_components_for_disable' ];
        }

        $allComponents = $this->getInfoList();
        $components = $params["components"];
        $disableList = [];
        foreach ($components as $component) {
            if (array_key_exists($component, $allComponents) && $allComponents[$component]['buttons']['disable']) {
                $disableList[$allComponents[$component]['type']][$component] = $allComponents[$component];
            }
        }

        $disabledList = [];
        if ($disableList && isset($disableList["plugins"]) && $disableList["plugins"]) {
            foreach ($disableList["plugins"] as $component) {
                try {
                    if ($adapter->disablePlugin($component['file'])) {
                        $disabledList[] = $component['title'];
                    }
                } catch (Exception $ex) {}
            }
        }

        if ($disabledList) {
            return ['success' => true, 'list' => $disabledList];
        } else {
            return ['success' => false, 'list' => []];
        }
    }

    private function getInfoList()
    {
        $components = $this->list(true);

        $list = [];
        foreach ($components['data'] as $component) {
            $list[$component['name']] = $component;
        }

        return $list;
    }

    private function list($dt, $params = [])
    {
        $cmp = $this->adapter()->getSystemComponents();

        if (!$dt) {
            return $cmp;
        }

        $out = [];
        $i = 0;

        $theme = wp_get_theme();

        $updateLatestVersions = $this->getUpdateLatestVersions();

        $plugins = get_plugins();
        $fullInfoPlugins = [];
        foreach ($plugins as $pluginKey => $plugin) {
            $plugin['File'] = $pluginKey;
            $fullInfoPlugins[$plugin['Title'].' '.$plugin['Version']] = $plugin;
        }

        $themes = wp_get_themes();

        foreach($cmp as $type => $components) {
            foreach($components as $component) {
                $component['type'] = $type;
                $component['id'] = $i++;
                $component['path'] = '';
                $component['file'] = '';
                $component['latest_version'] = '';
                $component['description'] = '';
                $component['tags'] = '';

                if ($component['name'] == 'wordpress') {
                    $component['title'] = 'Wordpress';
                }

                if (isset($updateLatestVersions[$component['name']]) &&
                    version_compare($component['version'], $updateLatestVersions[$component['name']], "<")) {
                    $component['latest_version'] = $updateLatestVersions[$component['name']];
                }

                if ($component['type'] == "plugins") {
                    $key = $component['title'].' '.$component['version'];
                    if (isset($fullInfoPlugins[$key]['File'])) {
                        $plugin = $fullInfoPlugins[$key];

                        $component['file'] = $plugin['File'];
                        $component['description'] = $plugin['Description'];
                        $component['tags'] = ''; //$this->getPluginTags($component['name']);
                    }
                }

                if ($component['type'] == "themes") {
                    if (in_array($component['title'], [$theme->name, $theme->parent_theme])) {
                        $component['active'] = true;
                    } else {
                        $component['active'] = false;
                    }

                    if (isset($themes[$component['name']]) && is_object($themes[$component['name']])) {
                        $component['description'] = $themes[$component['name']]->display('Description');
                        $component['tags'] = $themes[$component['name']]->display('Tags');
                    }
                }

                if ($component['type'] == "core") {
                    $component['active'] = true;
                }

                $out[] = $this->setStatuses($component);
            }
        }

        $direction = isset($params['order'][0]['dir']) && $params['order'][0]['dir'] == 'desc' ? SORT_DESC : SORT_ASC;
        $columnName = isset($params['order'][0]['column']) && isset($params['columns'][$params['order'][0]['column']]['name']) ?
            $params['columns'][$params['order'][0]['column']]['name'] : '';

        if ($columnName == 'slug') {
            $columnName = 'name';
        } elseif ($columnName == 'name') {
            $columnName = 'title';
        } elseif ($columnName == 'outdated') {
            $columnName = 'latest_version';
        }

        if ($columnName) {
            switch($columnName) {
                case 'latest_version':
                case 'active':
                case 'type':
                case 'name':
                case 'title':
                case 'version':
                    $out = $this->sort_field($out, $columnName, $direction);
                    break;
            }
        }

        return [ 'data' => $out, "recordsTotal" => count($out), "recordsFiltered" => count($out)];
    }

    private function sort_field($out, $columnName, $direction)
    {
        $values  = array_column($out, $columnName);
        array_multisort($values, $direction, $out);
        return $out;
    }

    private function setStatuses($component)
    {
        $upgradeAllowed = false;
        $enableAllowed = false;
        $disableAllowed = false;

        switch ($component["type"]) {
            case 'plugins':
                if (!$component["active"]) {
                    $enableAllowed = true;
                } else {
                    if (!in_array($component["name"], ["cwis-antivirus-malware-detected"])) {
                        $disableAllowed = true;
                    }
                }
                if ($component["latest_version"]) {
                    $upgradeAllowed = true;
                }
                break;

            case 'themes':
                if (!$component["active"]) {
                    $enableAllowed = true;
                }
                if ($component["latest_version"]) {
                    $upgradeAllowed = true;
                }
                break;

            case 'core':
                if ($component["latest_version"]) {
                    $upgradeAllowed = true;
                }
                break;
        }

        $component['buttons'] = [
            'upgrade' => $upgradeAllowed,
            'enable' => $enableAllowed,
            'disable' => $disableAllowed,
        ];

        $component['is_buttons'] = $upgradeAllowed || $enableAllowed || $disableAllowed;

        return $component;
    }

    private function getUpdateLatestVersions()
    {
        $updateLatestVersions = [];
        wp_update_themes();
        $themeUpdates = get_site_transient('update_themes');
        foreach ($themeUpdates->response as $name => $themeInfo) {
            $updateLatestVersions[$name] = $themeInfo['new_version'];
        }
        wp_update_plugins();
        $pluginUpdates = get_site_transient('update_plugins');
        foreach ($pluginUpdates->response as $plugInfo) {
            $updateLatestVersions[$plugInfo->slug] = $plugInfo->new_version;
        }
        $coreUpdates = get_site_transient('update_core');
        if ($coreUpdates->updates && isset($coreUpdates->updates[0])) {
            $updateLatestVersions["wordpress"] = str_replace(' ', '', $coreUpdates->updates[0]->current);
        }

        return $updateLatestVersions;
    }

    private function getPluginTags($slug)
    {
        if (empty($slug)) {
            return '';
        }

        $api_url = 'https://api.wordpress.org/plugins/info/1.2/?action=plugin_information&request[slug]=' . $slug;

        $response = wp_remote_get($api_url);

        if (is_wp_error($response)) {
            return '';
        }

        $plugin_info = json_decode(wp_remote_retrieve_body($response), true);

        if (isset($plugin_info['tags'])) {
            $tags = $plugin_info['tags'];

            return implode(',', $tags);
        } else {
            return '';
        }
    }
}
