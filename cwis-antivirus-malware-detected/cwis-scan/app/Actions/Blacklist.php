<?php

namespace App\Actions;

use App\Library\Cwis_Defender_Settings;
use App\Library\Cwis_Defender_Guarder;
use App\Library\CwisApi;


class Blacklist extends BaseAction
{
    public function __invoke($vars = false): ?array
    {
        $op = isset($vars['cwis_task']) ? $vars['cwis_task'] : '-';
        $res = [];
        switch ($op) {
            case 'block_unblock':
                $res = $this->blockUnblock($vars);
                break;
        }

        if ($res) {
            return $res;
        }

        $defender = new Cwis_Defender_Guarder();
        $guarder_log = $defender->get_guarder_log_data();

        $logs = array();
        if(count($guarder_log) > 0) {
            foreach($guarder_log as $line) {
                $data_log = explode("\t", $line);
                $ip_info = explode(" ",$data_log[1]);
                $logs[$ip_info[1]][]=["ts"=>strtotime($data_log[0]),
                    "reason"=> join(' ',array_slice($ip_info, 2))];
            }
        }

        $out = array();
        foreach($logs as $ip => $info) {
          foreach($info as $item) {
            if(!isset($out[$ip])) {
              $out[$ip] = [
                  'ip' => $ip,
                  'ts1' => $item['ts'],
                  'ts2' => -1,
                  'count'=> 1,
              ];
            } else {
              if($out[$ip]['ts1'] > $item['ts']) {
                $out[$ip]['ts1'] = $item['ts'];
              }
              if($out[$ip]['ts2'] < $item['ts']) {
                $out[$ip]['ts2'] = $item['ts'];
              }
              $out[$ip]['count']++;
            }
            if(isset($item['reason'])) {
              try {
                $rsn = json_decode($item['reason'], true);
                if($rsn) {
                  $out[$ip] = array_merge($out[$ip], $rsn);
                }
              } catch(Exception $e) {
                $rsn = $item['reason'];
                $out[$ip] = array_merge($out[$ip], $rsn);
              }
            }
          }
        }

        $results = array_values($out);

        if ($vars) {
            $out = array_merge($results, []);

            foreach ($out as $k => $v) {
                $out[$k]['id'] = $k;

                if (!isset($v['ip'])) {$out[$k]['ip'] = '';}
                if (!isset($v['geo'])) {$out[$k]['geo'] = '';}
            }

            $ip  = array_column($out, 'ip');
            $geo  = array_column($out, 'geo');


            array_multisort($geo, SORT_ASC, $ip, SORT_ASC, $out);
            $total = count($out);
            $filtered = $total;

            if (isset($params['search']) && isset($params['search']['value']) && $params['search']['value']) {
                $out = array_values(array_filter($out, function($k) use($params) {
                  $bool = strpos($k['ip'], $params['search']['value']) !== false || strpos($k['geo'], $params['search']['value']) !== false;
                  return $bool;
                }));
                $filtered = count($out);
            }

            $out = array_values(array_slice(array_values($out), $params['start'] ?? 0, $params['length'] ?? 100));
            return [ 'data' => $out, "recordsTotal" => $total, "recordsFiltered" => $filtered ];
        }

        return $results;
    }

    private function blockUnblock($vars)
    {
        $res = ['success' => false];

        $type = isset($vars['type']) ? $vars['type'] : '-';

        $b_list = isset($vars['b_list']) ? $vars['b_list'] : [];
        if (empty($b_list)) {
            return $res;
        }

        switch ($type) {
            case 'unblock':
                $res = $this->unblock($vars);
                break;
            case 'block_net':
                $res = $this->blockNet($vars);
                break;
            case 'block_asn':
                $res = $this->blockAsn($vars);
                break;
            case 'block_geo':
                $res = $this->blockGeo($vars);
                break;
        }

        return $res;
    }

    private function unblock($vars)
    {
        $res = ['success' => false];

        $defender = new Cwis_Defender_Guarder();
        $guarder_log = $defender->get_guarder_log_data();

        $b_list = $vars['b_list'];
        $info = [];
        foreach ($b_list as $row) {
            if ($row['ip'] && !in_array($row['ip'], $info)) {
                $info[] = ['ip' => $row['ip'], 'asn' => $row['asn'], 'geo' => $row['geo']];
            }
        }

        $count = 0;
        $logs = [];
        if(count($guarder_log) > 0) {
            foreach($guarder_log as $line) {
                $data_log = explode("\t", $line);
                $ip_info = explode(" ",$data_log[1]);
                $ip = $ip_info[1];
                $reason = join(' ',array_slice($ip_info, 2));
                $rsn = json_decode($reason, true);

                $asn = isset($rsn['asn']) && $rsn['asn'] ? $rsn['asn'] : '';
                $geo = isset($rsn['geo']) && $rsn['geo'] ? $rsn['geo'] : '';

                $logs[] = ['ip' => $ip, 'asn' => $asn, 'geo' => $geo];

                if (in_array($ip, $info)) {
                    $count++;
                }
            }
        }

        //$res['success'] = true;
        //$res['count'] = $count;
        //$res['logs'] = $logs;

        return $res;
    }

    private function blockNet($vars)
    {
        $res = ['success' => false];

        return $res;
    }

    private function blockAsn($vars)
    {
        $cwis_defender_settings = new Cwis_Defender_Settings();
        $cwsd_options_prev = $cwis_defender_settings->all();

        $b_list = $vars['b_list'];

        $asn = isset($cwsd_options_prev['asn']) && trim($cwsd_options_prev['asn'])?
            explode(',', trim($cwsd_options_prev['asn'])) : [];

        foreach ($b_list as $row) {
            if ($row['asn'] && !in_array($row['asn'], $asn)) {
                $asn[] = $row['asn'];
            }
        }

        $cwsd_options_prev['asn'] = implode(',', $asn);

        $cwis_defender_settings->update($cwsd_options_prev);
        CwisApi::sync_settings($cwsd_options_prev);

        return ['success' => true];
    }

    private function blockGeo($vars)
    {
        $cwis_defender_settings = new Cwis_Defender_Settings();
        $cwsd_options_prev = $cwis_defender_settings->all();

        $b_list = $vars['b_list'];

        $geo = isset($cwsd_options_prev['geo']) ? explode(',', $cwsd_options_prev['geo']) : [];

        foreach ($b_list as $row) {
            if ($row['geo'] && !in_array($row['geo'], $geo) && strlen($row['geo']) == 2) {
                $geo[] = strtoupper($row['geo']);
            }
        }

        $cwsd_options_prev['geo'] = implode(',', $geo);

        $cwis_defender_settings->update($cwsd_options_prev);
        CwisApi::sync_settings($cwsd_options_prev);

        return ['success' => true];
    }

}
