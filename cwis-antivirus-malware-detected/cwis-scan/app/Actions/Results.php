<?php

namespace App\Actions;

use App\Library\CwisData;
use App\Library\CwisDirsCreator;
use App\Library\CwisServerEnvInfo;
use App\Library\CwisLoader;
use App\Library\CwisApp;
use App\Library\Cwis_Updater_Methods;
use App\State;

class Results extends BaseAction
{
    public function __invoke(): ?array
    {

        $scan_path = State::scanPath();
        $dirsCreator = new CwisDirsCreator();
        $dirsCreator->setFilePathHash($scan_path);
        $filepath = $dirsCreator->getResultsFilePath('results');

        $serialized_data = file_get_contents_safe($filepath);
        $result = $serialized_data ? @unserialize($serialized_data) : [];


        $app = new CwisApp();
        $app->construct(0, State::scanPath(), []);
        $result = $app->start();


/*
        //$security_plugin_updates = self::get_security_plugin_updates();
        $log_guarder = CwisData::get_log_guarder();

        // Don't report scanner related stuff here..
        // $quarantine_list = self::get_quarantine_list();
        // $rescan = self::get_rescan_data('rescan');
        // $prescan = self::get_rescan_data('prescan');
        // $progress = self::get_rescan_data('progress');
        // $queue = CwisData::get_queues_data(CWIS_SCAN_PATH);
        //$error_php = self::get_error_php();

        $themes = CwisData::get_themes_info();
        $server_info = self::get_server_info_data();
        //$cwis_defender_settings = CwisLoader::get_class_instance('Cwis_Defender_Settings');

        $extra = [
            "PluginUpdates" => $security_plugin_updates,
            "LogGuarder"    => $log_guarder,
            "Themes"        => $themes,
            "Server"        => $server_info,
          // "Defender"      => $cwis_defender_settings->all()

          //  "ReScan"        => $rescan,
          //  "PreScan"       => $prescan,
          //  "Queue"         => $queue,
          //  "Status"        => $progress,
          //  "Quarantine"    => $quarantine_list

        ];
*/
        $extra = [];
        return array_merge($extra, $result);

    }

    public static function get_security_plugin_updates () {

        $cwis_updater = new Cwis_Updater_Methods('cwis', $version = State::pluginVersion());

        // Get list of all plugins and themes installed
        $all_plugins_installed = $cwis_updater->get_all_plugins_installed();
        $all_themes_installed = $cwis_updater->get_all_themes_installed();

        // Read plugin/theme updates settings from database
        $cwis_auto_plugin_updates = $cwis_updater->get_cwis_auto_plugin_updates(true);
        $cwis_auto_theme_updates = $cwis_updater->get_cwis_auto_theme_updates();

        $total_plugins = $total_themes = 0;
        $securisk_count = array(0, 0, 0, 0); //Secured,Low,Medium,High
        //
        // Analyse plugins installed
        foreach ($all_plugins_installed as $plugin_key_name => $plugin) {
            $is_checkbox_checked = isset($cwis_auto_plugin_updates[$plugin_key_name]) && $cwis_auto_plugin_updates[$plugin_key_name];

            // Get plugin security risk level
            $plugin_securisk_level = $is_checkbox_checked ? # reduce risk if checked
                0 : (isset($plugin['SecuriskLevel']) ? $plugin['SecuriskLevel'] : 1);
            $securisk_count[$plugin_securisk_level] ++;
            $total_plugins++;
        }

        // Analyse themes installed
        foreach ($all_themes_installed as $theme_key_name => $theme) {
            $is_checkbox_checked = isset($cwis_auto_theme_updates[$theme_key_name]) && $cwis_auto_theme_updates[$theme_key_name];

            // Get theme security risk level
            $theme_securisk_level = $is_checkbox_checked ? # reduce risk if checked
                0 : (isset($theme['SecuriskLevel']) ? $theme['SecuriskLevel'] : 1);
            $securisk_count[$theme_securisk_level] ++;
            $total_themes++;
        }

        // Collect result data
        $updater_data = array(
            array(
                'type'  => 'plugins',
                'name'  => 'Total Plugins',
                'count' => $total_plugins
            ),
            array(
                'type'  => 'themes',
                'name'  => 'Total Themes',
                'count' => $total_themes
            ),
            array(
                'type'    => 'secured',
                'name'    => 'Auto Updated',
                'context' => 'success',
                'count'   => $securisk_count[0]
            ),
            array(
                'type'    => 'risk_low',
                'name'    => 'Low Risk',
                'context' => 'info',
                'count'   => $securisk_count[1]
            ),
            array(
                'type'    => 'risk_medium',
                'name'    => 'Medium Risk',
                'context' => 'warning',
                'count'   => $securisk_count[2]
            ),
            array(
                'type'    => 'risk_high',
                'name'    => 'High Risk',
                'context' => 'danger',
                'count'   => $securisk_count[3]
            )
        );

        return $updater_data;
    }

    public static function get_quarantine_list($log_lines=0) {
        $upload_path = dirname(dirname(CWIS_PLUGIN_DIR_PATH)) . '/uploads/cwis/CWIS-QUARANTINE/';
        $file_quarantine = $upload_path.'.filelist.db';
        $file_contents = array();
        if (is_readable($file_quarantine)) {
            $file = is_file($file_quarantine) ? file($file_quarantine) : array();
            $file_size = count($file);
            $file_start = ($log_lines >0) ? max(0, $file_size - $log_lines) : 0;
            for ($i = $file_start; $i < $file_size; $i++) {
                $file_contents[] = trim($file[$i]);
            }
        }
        return $file_contents;
    }

    public static function get_rescan_data($scan_type,$seria=false) {

        if(!defined('CWIS_SCAN_PATH')) {
            define('CWIS_SCAN_PATH', substr(ABSPATH, 0, -1));
        }

        $scan_path = normalize_path(CWIS_SCAN_PATH);

        $dirsCreator = new CwisDirsCreator();
        $dirsCreator->setFilePathHash($scan_path);
        $resultdir = $dirsCreator->getPathToResultsSubdir();
        $file_name = 'CWIS-'.strtoupper($scan_type).'.dat';
        $serialized_data = file_get_contents_safe($resultdir."/".$file_name);

        if($seria) {
            $serialized_data = (!empty($serialized_data)) ? @unserialize(trim($serialized_data)) : false;
        }

        return $serialized_data;
    }

    public static function get_server_info_data() {

        $server_info = new CwisServerEnvInfo();
        $result = $server_info->parseResultInfo('json');

        return $result;
    }

    public static function get_error_php() {

        $error_php_fname = "";
        if (functions_exists('ini_get')) {
            $error_php_fname = ini_get('error_log');
        }

        return $error_php_fname;

    }
}
