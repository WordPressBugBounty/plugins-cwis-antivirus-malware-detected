<?php

namespace App\Actions;
use App\Library\CwisApp;
use App\Library\CwisData;
use App\Library\CwisDirsCreator;
use App\Library\CwisManageQuarantine;
use App\Library\Cwis_Defender_Guarder;
use App\Library\CwisApi;
use App\State;

class Explorer extends BaseAction
{
    private $ext_filter = [];
    private $out = [];
    public function __invoke($params): ?array
    {
        return $this->explorer_run($params);
    }

    public function explorer_run($params)
    {
        // Filter out based on ext
        if (isset($params['filters']['ext']) && count($params['filters']['ext'])) {
            $this->ext_filter = $params['filters']['ext'];
        }

        $basedir = State::scanPath();
        $quarantinedir = State::quarantinePath();

        if (isset($params['cat'])) {
            switch($params['cat']) {
                case 'quarantine':
                    $this->append_quarantine($basedir);
                    $this->append_hashes_tags($basedir);
                    $this->append_vulnerable_tags($basedir);
                break;
                case 'missing':
                case 'match':
                case 'mismatch':
                    $this->append_hashes($basedir, $params['cat']);
                    $this->append_quarantine_tags($basedir);
                    $this->append_vulnerable_tags($basedir);
                break;
                default:
                    $this->append_vulnerable($basedir, $params['cat']);
                    $this->append_quarantine_tags($basedir);
                    $this->append_hashes_tags($basedir);
                    $this->append_vulnerable_tags($basedir);
                break;
            }
        } else {
            $this->append_quarantine($basedir);
            $this->append_vulnerable($basedir);
            $this->append_hashes($basedir);
        }

        // Filter out based on tags
        if (isset($params['filters']['types']) && count($params['filters']['types'])) {
            $this->filter_tags($params['filters']['types']);
        }

        $name  = array_column($this->out, 'name');
        $path  = array_column($this->out, 'path');
        array_multisort($path, SORT_ASC, $name, SORT_ASC, $this->out);
        $total = count($this->out);
        $filtered = $total;

        // Filter out based on search string
        if (isset($params['search']['value']) && $params['search']['value']) {
            $this->out = array_values(array_filter($this->out, function($k) use($params) {

                return strpos($k['name'], $params['search']['value']) !== false ||
                    strpos($k['path'], $params['search']['value']) !== false;
            }));
            $filtered = count($this->out);
        }

        // get part
        $this->out = array_slice($this->out, $params['start'] ?? 0, $params['length'] ?? 100);


        // calculate file stat
        foreach ($this->out as $index => $fi) {
            $fn = $basedir . $fi['path'] . $fi['name']; //origin file path
            if (!file_exists($fn)) { // file in quarantine
                $utilities = new \App\Library\CwisUtilities();

                $managed_basename = $utilities->filenameSanitize(basename($fn)) . '-' . md5($fn);

                $fn = $quarantinedir . DIRECTORY_SEPARATOR . $managed_basename;
            }

            $stat = is_file($fn) ? stat($fn) : false;
            if ($stat) {
              $stat['perm'] = substr(sprintf("%o",fileperms($fn)),-4);
              $this->out[$index]['stat'] = $stat;
            }

            //tags string
            $tagsStr = $this->tagsToString($this->out[$index]['tags']);
            $this->out[$index]['tagsStr'] = $tagsStr;
        }

        //order
        if (isset($params['order'][0]['column']) && $params['order'][0]['column'] &&
            isset($params['order'][0]['dir']) && $params['order'][0]['dir']) {
            $direction = $params['order'][0]['dir'] == 'desc' ? SORT_DESC : SORT_ASC;
            $column = $params['order'][0]['column'];
            $columnName = isset($params['columns'][$params['order'][0]['column']]['name']) ?
                $params['columns'][$params['order'][0]['column']]['name'] : '';

            if ($columnName) {
                switch($columnName) {
                    case 'path':
                    case 'name':
                        $this->sort_field($columnName, $direction);
                        break;
                    case 'stats':
                        $this->sort_stats($direction);
                        break;
                    case 'tags':
                        $this->sort_field('tagsStr', $direction);
                        break;
                }
            }
        }

        return [
            'data' => array_values($this->out),
            "recordsTotal" => $total,
            "recordsFiltered" => $filtered
        ];
    }

    private function tagsToString($tags)
    {
        $tagTitles = [];
        foreach ($tags as $key => $val) {
            if ($val > 0) {
                $title = $this->getTagTitle($key);

                if ($title) {
                    $tagTitles[] = $this->getTagTitle($key);
                }

            }
        }

        return implode(',', $tagTitles);
    }

    private function getTagTitle($tag)
    {
        $title = '';

        $map = [
            'vulnerable' => 'Vulnerable',
            'quarantine' => 'Quarantine',
            'match' => 'Hash Matched',
            'mismatch' => 'Hash Changed',
            'missing' => 'Hash Not Found',
            'VulnerCMS' => 'Vulnerable CMS',
            'Vulnerable' => 'Vulnerable scripts',
            'WebShells' => 'Backdoor webshells',
            'CriticalPHP' => 'Server malware',
            'CriticalJS' => 'JS viruses',
            'Phishing' => 'Phishing pages',
            'Htaccess' => 'Htaccess',
            'HiddenFiles' => 'Hidden files',
            'PrivateIP' => 'Private IPs',
            'NotRead' => 'Reading errors',
            'BigFiles' => 'Skipped big files',
            'GitFiles' => 'Skipped Git files',
            'SkippedDirs' => 'Skipped folders and files',
            'SymLinks' => 'Symlinks',
            'Whitelisted' => 'Whitelisted files',
            'AdwareList' => 'Adware and spam links',
            'Doorways' => 'Doorways',
            'EmptyLinks' => 'SEO links',
            'Heuristic' => 'Suspicious (heuristics)',
            'Iframer' => 'iFrame injections',
            'PHPCodeInside' => 'Suspicious PHP code',
            'MaliciousCode' => 'Potentially malicious',
            'VulnerCode' => 'Potentially vulnerable',
            'UnixExec' => 'Unix executables'
        ];

        switch ($tag) {
            // Not printed
            case 'real':
            case 'file':
            case 'dir':
                break;

            case 'match':
                $title = 'Matching';
                break;

            case 'quarantine':
                $title = 'Quarantine';
                break;

            case 'missing':
                $title = 'Missing';
                break;

            case 'mismatch':
                $title = 'Mismatch';
                break;

            case 'vulnerable':
                // $title = 'Vulnerable';
                break;

            case 'whitelisted':
                $title = 'Whitelisted';
                break;

            default:
                $type = ucfirst($tag);

                if (isset($map[$type])) {
                    $type = $map[$type];
                }

                $title = $type;

                break;
        }

        return $title;
    }

    private function sort_field($columnName, $direction)
    {
        $values  = array_column($this->out, $columnName);
        $values = array_map('strtolower', $values);
        array_multisort($values, $direction, $this->out);
    }

    private function sort_stats($direction)
    {
        $values = [];
        foreach ($this->out as $stat) {
            $values[] = isset($stat['stat']['perm']) ? $stat['stat']['perm'] : 0;
        }
        array_multisort($values, $direction, $this->out);
    }

    private function append_hashes($basedir, $cat = 'all')
    {
        $remote_db = CwisApi::fetch_hashes();
        foreach ($remote_db as $remote) {
            if ($remote['is_match'] === false && ($cat == 'all' || $cat == 'mismatch')) {
                $this->append_file_result($remote['path'], $remote['name'], 'mismatch');
            }
            if ($remote['is_match'] === true && $cat == 'match') {
                $this->append_file_result($remote['path'], $remote['name'], 'matching');
            }
            if ($remote['is_missing'] === true && ($cat == 'all' || $cat == 'missing')) {
                $this->append_file_result($remote['path'], $remote['name'], 'missing');
            }
        }
    }

    private function append_hashes_tags($basedir, $cat = 'all')
    {
        $remote_db = CwisApi::fetch_hashes();
        foreach ($remote_db as $remote) {
            if ($remote['is_match'] === false && ($cat == 'all' || $cat == 'mismatch')) {
                $this->append_file_result_tags($remote['path'], $remote['name'], 'mismatch');
            }
            if ($remote['is_match'] === true && $cat == 'match') {
                $this->append_file_result_tags($remote['path'], $remote['name'], 'matching');
            }
            if ($remote['is_missing'] === true && ($cat == 'all' || $cat == 'missing')) {
                $this->append_file_result_tags($remote['path'], $remote['name'], 'missing');
            }
        }
    }

    private function append_vulnerable($basedir, $cat = 'all')
    {
        if (!defined('CWIS_SCAN_PATH')) {
            define('CWIS_SCAN_PATH', substr(ABSPATH, 0, -1));
        }

        $scan_path = normalize_path(CWIS_SCAN_PATH);
        $dirsCreator = new CwisDirsCreator();
        $dirsCreator->setFilePathHash($scan_path);
        $filepath = $dirsCreator->getResultsFilePath('results');
        $serialized_data = file_get_contents_safe($filepath);
        $result = $serialized_data ? @unserialize($serialized_data) : [];

        foreach ($result as $i2 => $rule) {
            if (is_array($rule)) {
                foreach ($rule as $vuln) {
                    if (is_array($vuln) && isset($vuln['name'])) {
                        $fn = substr($vuln['name'], 1);
                        $fragment = isset($vuln['fragment']) ? $vuln['fragment'] : '';
                        $lines = isset($vuln['lines']) ? $vuln['lines'] : [];

                        if ($cat == 'all' || $cat == $i2) {
                            $this->append_file_result(dirname($fn), basename($fn), $i2, 1, $fragment, $lines);
                        }
                    }
                }
            }
        }
    }

    private function append_vulnerable_tags($basedir, $cat = 'all')
    {
        if (!defined('CWIS_SCAN_PATH')) {
            define('CWIS_SCAN_PATH', substr(ABSPATH, 0, -1));
        }

        $scan_path = normalize_path(CWIS_SCAN_PATH);
        $dirsCreator = new CwisDirsCreator();
        $dirsCreator->setFilePathHash($scan_path);
        $filepath = $dirsCreator->getResultsFilePath('results');
        $serialized_data = file_get_contents_safe($filepath);
        $result = $serialized_data ? @unserialize($serialized_data) : [];

        foreach ($result as $i2 => $rule) {
            if (is_array($rule)) {
                foreach ($rule as $vuln) {
                    if (is_array($vuln) && isset($vuln['name'])) {
                        $fn = substr($vuln['name'], 1);

                        if ($cat == 'all' || $cat == $i2) {
                            $this->append_file_result_tags(dirname($fn), basename($fn), $i2);
                        }
                    }
                }
            }
        }
    }

    private function getQuarantineFiles()
    {
        $cwis = new CwisApp();
        $cwis->construct(0, State::scanPath());
        $cwis->initScanCoreMethods();

        $quarantine = new CwisManageQuarantine();
        $path_quarantine = $quarantine->getPathManagedFileList();
        $quarantines = file_get_array($path_quarantine);

        $list = [];
        foreach($quarantines as $i => $fn) {
            $path = str_replace(State::scanPath(), '', dirname($fn));
            // Fix empty
            if (!$path) { $path = DIRECTORY_SEPARATOR; }
            // Fix suffix
            if (substr($path, -1) !== DIRECTORY_SEPARATOR) { $path .= DIRECTORY_SEPARATOR; }

            $list[$path][basename($fn)] = $fn;
        }

        return $list;
    }

    private function append_quarantine($basedir)
    {
        $cwis = new CwisApp();
        $cwis->construct(0, State::scanPath());
        $cwis->initScanCoreMethods();

        $quarantine = new CwisManageQuarantine();
        $path_quarantine = $quarantine->getPathManagedFileList();
        $quarantines = file_get_array($path_quarantine);

        foreach($quarantines as $fn) {
            $this->append_file_result(dirname($fn), basename($fn), 'quarantine', false);
        }
    }

    private function append_quarantine_tags($basedir)
    {
        $cwis = new CwisApp();
        $cwis->construct(0, State::scanPath());
        $cwis->initScanCoreMethods();

        $quarantine = new CwisManageQuarantine();
        $path_quarantine = $quarantine->getPathManagedFileList();
        $quarantines = file_get_array($path_quarantine);

        foreach($quarantines as $fn) {
            $this->append_file_result_tags(dirname($fn), basename($fn), 'quarantine');
        }
    }

    private function filter_tags($filters)
    {
        foreach($this->out as $id => $data) {
            foreach($data['tags'] as $tag => $count) {
                if(in_array($tag, $filters)) {
                    //unset($this->out[$id]['tags'][$tag]);
                    unset($this->out[$id]);
                }
            }
            // If we don't have other tags -- remove result (file + real == 2)
            //if(count($this->out[$id]['tags']) == 2) {
            //  unset($this->out[$id]);
            //}
        }
    }

    private function filter_ext($fn)
    {
        if(!$this->ext_filter || !count($this->ext_filter)) {
            return false;
        }

        $ext = strtolower(pathinfo($fn, PATHINFO_EXTENSION));
        return in_array($ext, $this->ext_filter);
    }

    private function append_file_result_tags($path, $fn, $tag)
    {
        $path = str_replace(State::scanPath(), '', $path);

        // Fix empty
        if (!$path) { $path = DIRECTORY_SEPARATOR; }
        // Fix suffix
        if (substr($path, -1) !== DIRECTORY_SEPARATOR) { $path .= DIRECTORY_SEPARATOR; }

        $id = base64_encode($path . $fn);

        if (isset($this->out[$id])) {
            $this->out[$id]['tags'][$tag] = 1;
        }
    }

    private function append_file_result($path, $fn, $tag, $real = 1, $fragment = '', $lines = [])
    {
        $path = str_replace(State::scanPath(), '', $path);

        /*if ($real && !is_file(State::scanPath() . $path . $fn)) {
        return;
        }*/

        if ($this->filter_ext($fn)) {
        //  return;
        }

        // Fix empty
        if (!$path) { $path = DIRECTORY_SEPARATOR; }
        // Fix suffix
        if (substr($path, -1) !== DIRECTORY_SEPARATOR) { $path .= DIRECTORY_SEPARATOR; }

        $id = base64_encode($path . $fn);

        if (isset($this->out[$id])) {
            $this->out[$id]['tags'][$tag] = 1;
        } else {
            $this->out[$id] = [
              'id' => $id,
              'name' => $fn,
              'fragment' => $fragment,
              'lines' => $lines,
              'is_dir' => is_dir(State::scanPath() . DIRECTORY_SEPARATOR . $path . $fn),
              'path' => $path,
              'tags' => [ 'file' => 1 ],
            ];
            $this->out[$id]['tags'][$tag] = 1;
        }

        /*if ($tag !== 'quarantine') {
            $quarantineFiles = $this->getQuarantineFiles();

            if (isset($quarantineFiles[$path][$fn])) {
                $this->out[$id]['tags']['quarantine'] = 1;
            }
        }*/

        if ($real) {
            $this->out[$id]['tags']['real'] = 1;
        }
    }
}
