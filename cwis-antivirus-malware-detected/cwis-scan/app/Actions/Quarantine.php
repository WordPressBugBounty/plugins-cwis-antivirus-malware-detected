<?php

namespace App\Actions;

use App\Library\CwisApp;
use App\Library\CwisData;
use App\Library\CwisManageQuarantine;
use App\Library\CwisApi;
use App\Library\CwisFS;
use App\State;

class Quarantine extends BaseAction
{
    public function __invoke($params): ?array {
      return self::quarantine_run($params);
    }

    public static function recursive_add($quarantine, $dir, &$result) {
      foreach(scandir($dir) as $file) {
        $fileOrDir=$dir.DIRECTORY_SEPARATOR.$file;
        if($file != '.' && $file != '..') {
          if(is_dir($fileOrDir)) {
              Filesystem::recursive_add($quarantine, $fileOrDir, $result);
          } else {
              $result['data'][] = [ $fileOrDir, $quarantine->manageFile('move', $fileOrDir) ];
          }
        }
      }
    }

    public static function quarantine_list($quarantine) {

      $quarantined = array();

      // New quarantine object
      $path_to_quarantine_filelist = $quarantine->getPathManagedFileList();
      $quarantine_filelist = file_get_array($path_to_quarantine_filelist);
      foreach ($quarantine_filelist as $file_index => $file_name) {
        // Add a new result
        if(is_file($file_name)) {
          $quarantined[] = array(
              'id'	 => $file_index, // index
              'name'	 => $file_name, // file name
              'path'	 => $this->utilities->filenameShorten($file_name),
              'date'	 => filemtime($file_name), // file modified
              'size'	 => filesize(($file_name)) // file size
          );
        }
      }
      // JSON with quarantined files
      return $quarantined;

    }

    public static function quarantine_run($params) {

      $type = 'application/json';
      $result = [ 'success' => true, 'data' => [], 'root' => State::scanPath() ];
      $cwis = new CwisApp();
      $cwis->construct(0, State::scanPath());
      $cwis->initScanCoreMethods();

      $quarantine = new CwisManageQuarantine();

      if(!isset($params['subaction'])) {
        return [ 'success' => false, 'error' => 'Bad param' ];
      }

      switch ($params['subaction']) {

          case 'quarantine_count':
            return count(file_get_array($quarantine->getPathManagedFileList()));
          break;

          case 'quarantine_list':
            $result = self::quarantine_list($quarantine);
          break;

          case 'quarantine_add':

            $items = $params['files'] ?? [];
            foreach ($items as $index => $value) {
                $fn = State::scanPath() . $value;
                $ext = pathinfo($fn, PATHINFO_EXTENSION);
                if($ext) {
                  $result['data'][] = [$fn, $quarantine->manageFile('move', $fn) ];
                } else {
                  Quarantine::recursive_add($quarantine, $fn, $result);
                }
            }

            break;

          case 'quarantine_restore':

            $items = $params['files'] ?? [];
            foreach ($items as $index => $value) {
                $fn = State::scanPath() . $value;
                $result['data'][] = ['fn' => $fn, 'res' => $quarantine->manageFile('restore', $fn) ];
            }

          break;

      }

      return $result;

    }

}
